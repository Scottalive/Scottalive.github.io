{
    "version": "https://jsonfeed.org/version/1",
    "title": "沉鱼的博客",
    "subtitle": "了解自我，超越自我",
    "icon": "http://scottalive.github.io/images/favicon.ico",
    "description": "编程笔记 & 资料分享",
    "home_page_url": "http://scottalive.github.io",
    "items": [
        {
            "id": "http://scottalive.github.io/computer-science/java/interview/SpringBoot%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://scottalive.github.io/computer-science/java/interview/SpringBoot%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "SpringBoot面试题",
            "date_published": "2023-10-23T00:36:23.000Z",
            "content_html": "<h2 id=\"springboot面试题\"><a class=\"anchor\" href=\"#springboot面试题\">#</a> SpringBoot 面试题</h2>\n<h3 id=\"1springboot的特性\"><a class=\"anchor\" href=\"#1springboot的特性\">#</a> 1.SpringBoot 的特性</h3>\n<ol>\n<li>Spring 的独立应用；</li>\n<li>SpringBoot 内置 Tomcat、Jetty 容器，不需要构建 war 文件；</li>\n<li>SpringBoot 提供了各种 starter 即场景启动器，简化了构建配置；</li>\n<li>当条件满足的时候自动地装配 Spring 或第三方类库；</li>\n<li>提供运维特性，如指标信息、健康检查以及外部化配置；</li>\n<li>绝无代码生成，并且不需要 XML 配置；</li>\n</ol>\n<h3 id=\"2springboot的原理\"><a class=\"anchor\" href=\"#2springboot的原理\">#</a> 2.SpringBoot 的原理</h3>\n<h3 id=\"3springboot多出的一些注解\"><a class=\"anchor\" href=\"#3springboot多出的一些注解\">#</a> 3.SpringBoot 多出的一些注解</h3>\n<h3 id=\"4springboot的场景启动器是什么\"><a class=\"anchor\" href=\"#4springboot的场景启动器是什么\">#</a> 4.SpringBoot 的场景启动器是什么？</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "Java开发面试题",
                "SpringBoot"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/interview/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://scottalive.github.io/computer-science/java/interview/Spring%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "Spring面试题",
            "date_published": "2023-10-11T16:59:00.000Z",
            "content_html": "<h2 id=\"spring面试题\"><a class=\"anchor\" href=\"#spring面试题\">#</a> Spring 面试题</h2>\n<h3 id=\"1spring原理\"><a class=\"anchor\" href=\"#1spring原理\">#</a> 1.Spring 原理</h3>\n<ol>\n<li><strong>IoC（控制反转）和 DI（依赖注入）：</strong>\n<ul>\n<li><strong>IoC（Inversion of Control）</strong>：IoC 是一种设计思想，它将程序的控制权交给容器或框架，由容器来负责对象的创建和管理。Spring 的 IoC 容器，即 ApplicationContext，负责管理 Bean 的生命周期。</li>\n<li><strong>DI（Dependency Injection）</strong>：DI 是 IoC 的一种实现方式，它通过注入的方式将一个对象的依赖关系交给容器管理，而不是在对象内部直接创建依赖对象。这样做提高了组件的可重用性和可测试性。</li>\n</ul>\n</li>\n<li><strong>AOP（面向切面编程）：</strong>\n<ul>\n<li><strong>AOP（Aspect-Oriented Programming）</strong>：AOP 是一种编程范式，它允许将横切关注点（如日志、安全、事务管理等）从业务逻辑中剥离出来，使得系统关注点的变化不影响业务逻辑。在 Spring 中，AOP 通过代理机制实现，常见的代理方式有基于 JDK 动态代理和基于 CGLIB 的代理。</li>\n</ul>\n</li>\n<li><strong>Bean 的生命周期和作用域：</strong>\n<ul>\n<li><strong>Bean 的生命周期</strong>：Bean 的生命周期包括实例化、初始化、使用和销毁四个阶段。Spring 容器负责 Bean 的实例化和初始化，而销毁阶段则由容器负责。你可以提及 <code>InitializingBean</code>  和 <code>DisposableBean</code>  接口以及 <code>@PostConstruct</code>  和 <code>@PreDestroy</code>  注解来控制 Bean 的初始化和销毁操作。</li>\n<li><strong>Bean 的作用域</strong>：Spring 定义了多种 Bean 的作用域，包括 singleton（单例，默认）、prototype（原型）、request（每个 HTTP 请求一个实例）、session（每个 HTTP Session 一个实例）和 global session（全局 HTTP Session 一个实例）等。</li>\n</ul>\n</li>\n<li><strong>Spring 的事务管理：</strong>\n<ul>\n<li><strong>声明式事务管理</strong>：通过使用 <code>@Transactional</code>  注解或 XML 配置来声明事务，使得事务的控制更加方便。Spring 提供了对编程式事务管理的支持，可以通过 <code>PlatformTransactionManager</code>  接口进行编程式事务控制。</li>\n</ul>\n</li>\n<li><strong>Spring 的数据访问与集成：</strong>\n<ul>\n<li><strong>数据访问</strong>：Spring 提供了 JdbcTemplate 等模板类，简化了 JDBC 的操作，同时支持 ORM 框架（如 Hibernate、MyBatis）的集成，提供了对持久层的支持。</li>\n<li><strong>集成其他技术</strong>：Spring 能够与其他技术（如消息队列、缓存、搜索引擎等）进行集成，提供了丰富的集成方案。</li>\n</ul>\n</li>\n<li><strong>Spring 框架的核心组件：</strong>\n<ul>\n<li><strong>ApplicationContext</strong>：Spring 的 IoC 容器，负责管理 Bean 的生命周期。</li>\n<li><strong>BeanFactory</strong>：是 IoC 容器的基础接口，提供了基本的 IoC 功能。</li>\n<li><strong>BeanPostProcessor</strong>：在 Bean 初始化前后执行一些操作。</li>\n<li><strong>BeanDefinition</strong>：定义了 Bean 的配置信息。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"2什么是控制反转什么是依赖注入\"><a class=\"anchor\" href=\"#2什么是控制反转什么是依赖注入\">#</a> 2. 什么是控制反转？什么是依赖注入</h3>\n<p>​\t控制反转（IoC，Inversion of Control）和依赖注入（DI，Dependency Injection）是面向对象编程中两个重要的概念，它们是实现松耦合（Loose Coupling）的关键。</p>\n<h3 id=\"控制反转ioc\"><a class=\"anchor\" href=\"#控制反转ioc\">#</a> 控制反转（IoC）：</h3>\n<p>控制反转是一种设计原则，它将程序的控制权从程序代码本身转移到了外部容器或框架。在传统的程序设计中，程序代码通常负责对象的创建、依赖关系的管理以及资源的释放。而在 IoC 中，这些职责被反转，由外部容器负责。IoC 使得系统更加灵活，易于扩展和维护。</p>\n<p>在 IoC 中，对象的创建和管理由 IoC 容器负责。Spring 的 ApplicationContext 就是一个经典的 IoC 容器。它负责实例化 Bean、注入 Bean 之间的依赖关系、管理 Bean 的生命周期等。开发者只需定义好 Bean 和它们之间的关系，由容器负责具体的实例化和管理。</p>\n<h3 id=\"依赖注入di\"><a class=\"anchor\" href=\"#依赖注入di\">#</a> 依赖注入（DI）：</h3>\n<p>依赖注入是 IoC 的一种具体实现方式。在依赖注入中，组件的依赖关系由外部容器在组件被创建时注入。依赖关系通常以构造函数、Setter 方法或接口注入的方式实现。</p>\n<p>假设有一个类 <code>UserService</code>  依赖于 <code>UserRepository</code> ，传统的做法是在 <code>UserService</code>  类内部创建 <code>UserRepository</code>  的实例。但在依赖注入中， <code>UserService</code>  不再负责创建 <code>UserRepository</code> ，而是通过构造函数或 Setter 方法接受一个 <code>UserRepository</code>  的实例。容器在创建 <code>UserService</code>  时，将 <code>UserRepository</code>  的实例注入到 <code>UserService</code>  中。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 通过构造函数注入依赖</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserRepository</span> userRepository<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userRepository <span class=\"token operator\">=</span> userRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 或者通过 Setter 方法注入依赖</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// public void setUserRepository(UserRepository userRepository) &#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//     this.userRepository = userRepository;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>依赖注入使得对象之间的关系更加灵活，容易被替换和测试。Spring 框架提供了多种依赖注入的方式，包括构造函数注入、Setter 方法注入、接口注入等。</p>\n<h3 id=\"3spring的生命周期\"><a class=\"anchor\" href=\"#3spring的生命周期\">#</a> 3.Spring 的生命周期</h3>\n<p>​\tSpring 框架中的 Bean（Java 对象）的生命周期由 Spring 容器来管理，包括 Bean 的创建、初始化、使用和销毁等阶段。以下是 Spring Bean 的生命周期：</p>\n<ol>\n<li><strong>实例化（Instantiation）</strong>： 当 Spring 容器接收到 Bean 的定义后，它会通过构造函数或工厂方法来实例化 Bean 对象。</li>\n<li><strong>设定 Bean 的属性（Population of Properties）</strong>： Spring 容器将配置文件或注解中定义的属性值或引用注入到 Bean 中。</li>\n<li><strong>Bean 的初始化（Bean Initialization）</strong>： 如果 Bean 实现了 <code>InitializingBean</code>  接口，Spring 将调用其 <code>afterPropertiesSet</code>  方法进行初始化。另外，如果在配置文件中使用了 <code>init-method</code>  属性，指定了初始化方法，Spring 容器会在属性设置完成后调用这个指定的方法。</li>\n<li><strong>Bean 的使用（Bean is ready to use）</strong>： 此时，Bean 已经可以被应用程序使用了。</li>\n<li><strong>Bean 的销毁（Bean Destruction）</strong>： 如果 Bean 实现了 <code>DisposableBean</code>  接口，Spring 容器在 Bean 不再需要时调用其 <code>destroy</code>  方法进行销毁。或者，如果在配置文件中使用了 <code>destroy-method</code>  属性，指定了销毁方法，Spring 容器在需要销毁 Bean 时调用这个指定的方法。</li>\n</ol>\n<p>在整个生命周期中，Spring 容器负责管理 Bean 的创建、依赖注入、初始化和销毁等工作，确保 Bean 在应用程序中的正确运作。</p>\n<h3 id=\"4spring事务\"><a class=\"anchor\" href=\"#4spring事务\">#</a> 4.Spring 事务</h3>\n<p>​\tSpring 框架提供了丰富的事务管理功能，支持编程式事务和声明式事务两种方式。事务是用来保持数据库的一致性和完整性的机制，当一组相关的操作要么全部成功，要么全部失败。</p>\n<p>在 Spring 中，你可以使用注解或 XML 配置来声明式地管理事务。以下是一些关于 Spring 事务的关键概念：</p>\n<ol>\n<li>\n<p><strong>事务管理器（Transaction Manager）</strong>： 事务管理器负责实际管理事务。Spring 支持各种事务管理器，如 <code>DataSourceTransactionManager</code> （针对关系型数据库）、 <code>JtaTransactionManager</code> （用于分布式事务）等。</p>\n</li>\n<li>\n<p><strong>事务定义（Transaction Definition）</strong>： 事务定义定义了事务的隔离级别、传播行为、超时等属性。Spring 使用 <code>org.springframework.transaction.TransactionDefinition</code>  接口来表示事务定义。</p>\n</li>\n<li>\n<p><strong>事务传播行为（Transaction Propagation）</strong>： 事务传播行为定义了在方法调用中的事务如何传播。例如，一个方法 A 调用另一个方法 B，B 是否应该加入 A 的事务。Spring 定义了多种传播行为，例如 <code>REQUIRED</code> 、 <code>REQUIRES_NEW</code> 、 <code>NESTED</code>  等。</p>\n</li>\n<li>\n<p><strong>隔离级别（Isolation Level）</strong>： 隔离级别定义了多个事务并发执行时，彼此之间的可见性。Spring 支持不同的隔离级别，包括 <code>DEFAULT</code> （使用数据库默认隔离级别）、 <code>READ_UNCOMMITTED</code> （允许读取未提交的数据）、 <code>READ_COMMITTED</code> （只能读取已提交的数据）、 <code>REPEATABLE_READ</code> （可重复读取）、 <code>SERIALIZABLE</code> （串行化）等。</p>\n</li>\n<li>\n<p><strong>声明式事务管理</strong>： 通过注解或 XML 配置，你可以在方法上声明事务的属性。例如，使用 <code>@Transactional</code>  注解来标识一个方法应该在事务中执行。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">REQUIRED</span><span class=\"token punctuation\">,</span> isolation <span class=\"token operator\">=</span> <span class=\"token class-name\">Isolation</span><span class=\"token punctuation\">.</span><span class=\"token constant\">READ_COMMITTED</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">someTransactionalMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 事务性操作</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>编程式事务管理</strong>： 在代码中通过编程的方式控制事务。Spring 提供了 <code>TransactionTemplate</code>  来简化编程式事务管理。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>transactionTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TransactionCallbackWithoutResult</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doInTransactionWithoutResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TransactionStatus</span> status<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 事务性操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>通过合适的配置，Spring 事务管理器可以确保事务的正确性和一致性，保障了数据操作的可靠性。</p>\n<h3 id=\"5aop是什么aop代理方式有哪些\"><a class=\"anchor\" href=\"#5aop是什么aop代理方式有哪些\">#</a> 5.AOP 是什么？AOP 代理方式有哪些？</h3>\n<p>​\t\tAOP（Aspect-Oriented Programming）是一种编程范式，它允许你定义横切关注点（cross-cutting concerns），如日志记录、性能监控、事务管理等，并将这些关注点模块化，然后将它们自动应用到应用程序的特定部分，而无需修改这些部分的代码。AOP 的目的是提高代码的模块性，降低耦合度，使代码更易于维护和扩展。</p>\n<p>在 AOP 中，关注点（Aspect）是一个模块化的、可重用的模块，它包含了通知（Advice）和切点（Pointcut）两个主要概念。通知是关注点的具体行为，例如在方法执行前后执行的操作，而切点是指在何处应用通知的定义。</p>\n<p>AOP 代理方式主要有两种：</p>\n<ol>\n<li><strong>基于代理的 AOP（Proxy-Based AOP）</strong>： 这是最常见的 AOP 代理方式。在基于代理的 AOP 中，AOP 框架创建一个目标对象（被代理的对象）的代理对象，并将通知织入到代理对象的方法调用中。Spring 的 AOP 默认采用基于代理的 AOP 实现。基于代理的 AOP 主要有两种代理方式：\n<ul>\n<li><strong>JDK 动态代理</strong>：如果目标对象实现了接口，Spring 将使用 JDK 动态代理来创建代理对象。</li>\n<li><strong>CGLIB 代理</strong>：如果目标对象没有实现接口，Spring 将使用 CGLIB 库来创建代理对象。</li>\n</ul>\n</li>\n<li><strong>基于字节码的 AOP（AspectJ AOP）</strong>： 基于字节码的 AOP 通过直接在类的字节码上织入切面，因此不需要代理对象。这种方式更为强大和灵活，但也更复杂，通常需要使用特定的编译器或者在运行时进行字节码操纵。AspectJ 是一个常用的基于字节码的 AOP 框架。</li>\n</ol>\n<h3 id=\"6spring的bean有哪些创建方式\"><a class=\"anchor\" href=\"#6spring的bean有哪些创建方式\">#</a> 6.Spring 的 Bean 有哪些创建方式？</h3>\n<p>​\t在 Spring 框架中，有多种方式可以创建 Bean：</p>\n<ol>\n<li>\n<p><strong>XML 配置方式</strong>：在 XML 配置文件中使用 <code>&lt;bean&gt;</code>  标签定义 Bean 的配置信息。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBean<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>注解方式</strong>：使用注解标记类，然后在配置类中使用 <code>@ComponentScan</code>  或者 <code>@Component</code>  等注解进行扫描和定义 Bean。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBean</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>Java 配置方式</strong>：通过 Java 类配置 Bean，使用 <code>@Configuration</code>  和 <code>@Bean</code>  注解。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBean</span> <span class=\"token function\">myBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>工厂方法方式</strong>：使用工厂方法创建 Bean，即在 XML 配置文件或者 Java 配置类中定义工厂方法。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBeanFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createInstance<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">MyBean</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>实例工厂方法方式</strong>：使用实例工厂方法创建 Bean，需要定义一个实例工厂，然后在 XML 配置文件或 Java 配置类中引用该工厂。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-bean</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBeanFactory<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">factory-method</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>createInstance<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyBeanFactory</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">MyBean</span> <span class=\"token function\">createInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyBean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>以上是常见的 Spring Bean 创建方式，选择适合项目需求的方式可以提高代码的灵活性和可维护性。</p>\n<h3 id=\"7spring的bean作用域有哪些\"><a class=\"anchor\" href=\"#7spring的bean作用域有哪些\">#</a> 7.Spring 的 Bean 作用域有哪些？</h3>\n<p>在 Spring 框架中，Bean 的作用域（Scope）定义了 Bean 实例的生命周期范围。Spring 支持以下几种 Bean 的作用域：</p>\n<ol>\n<li>\n<p><strong>Singleton（单例）</strong>：在整个 Spring 容器中，只存在一个 Bean 实例。无论有多少个 Bean 的定义，Spring 容器都只会创建一个 Bean 实例，并在需要时返回给每个请求。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>singleton<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>Prototype（原型）</strong>：每次请求 Bean 时，容器都会创建一个新的 Bean 实例。每个请求都会得到一个全新的 Bean 对象。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>prototype<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>Request（请求）</strong>：在一次 HTTP 请求中，容器会返回同一个 Bean 实例。该作用域仅在使用 Spring Web 应用时有效。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>request<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>Session（会话）</strong>：在一个 HTTP 会话中，容器会返回同一个 Bean 实例。该作用域同样只在 Spring Web 应用时有效。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>session<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>Global Session（全局会话）</strong>：在一个全局 HTTP 会话中，容器会返回同一个 Bean 实例。该作用域通常用于 Portlet 应用环境。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>globalSession<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>Application（应用）</strong>：在整个 Web 应用中，容器会返回同一个 Bean 实例。</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>myBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>com.example.MyBean<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>application<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure></li>\n</ol>\n<p>这些作用域允许你控制 Bean 实例的生命周期和共享程度，根据需求选择合适的作用域可以提高系统的性能和资源利用率。</p>\n<h3 id=\"8spring如何解决bean循环依赖问题\"><a class=\"anchor\" href=\"#8spring如何解决bean循环依赖问题\">#</a> 8.Spring 如何解决 Bean 循环依赖问题？</h3>\n<p>​\t在 Spring 中，Bean 的循环依赖是指两个或多个 Bean 相互依赖，形成一个循环引用的关系。Spring 容器默认是不支持循环依赖的，但是它提供了一种机制来处理部分循环依赖情况。</p>\n<p>Spring 使用了三级缓存解决 Bean 的循环依赖问题：</p>\n<ol>\n<li><strong>SingletonObjects 缓存</strong>：Spring 容器创建 Bean 时，会将正在创建的 Bean 放入 SingletonObjects 缓存中，标记为正在创建中。</li>\n<li><strong>EarlySingletonObjects 缓存</strong>：当发现循环依赖时，Spring 会将早期暴露的 Bean 放入 EarlySingletonObjects 缓存中，标记为早期暴露的 Bean。</li>\n<li><strong>SingletonFactories 缓存</strong>：当 Bean 创建完成后，会放入 SingletonFactories 缓存中，表示该 Bean 可以被其他 Bean 引用。</li>\n</ol>\n<p>Spring 容器在创建 Bean 时，会先从 SingletonObjects 缓存中查找是否存在 Bean 的实例。如果存在，直接返回。如果不存在，会先创建一个 ObjectFactory，用于生成 Bean 的实例。然后，将该 ObjectFactory 放入 SingletonFactories 缓存中。接着，Spring 会递归地创建 Bean 的依赖关系。如果在创建依赖关系的过程中，发现了循环依赖，Spring 会从 EarlySingletonObjects 缓存中获取早期暴露的 Bean，而不是直接创建新的实例。这样，就避免了循环依赖的问题。</p>\n<p>需要注意的是，虽然 Spring 提供了这种机制来处理部分循环依赖情况，但是过多的循环依赖可能会导致系统设计存在问题，因此在设计时，尽量避免复杂的循环依赖关系。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "Java开发面试题",
                "Spring"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/interview/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%B8%B8%E9%97%AE%E5%9B%9E%E7%AD%94/",
            "url": "http://scottalive.github.io/computer-science/java/interview/%E9%9D%A2%E8%AF%95%E9%A2%98%E5%B8%B8%E9%97%AE%E5%9B%9E%E7%AD%94/",
            "title": "面试题常问回答",
            "date_published": "2023-10-10T05:44:44.000Z",
            "content_html": "<h2 id=\"面试题常问回答\"><a class=\"anchor\" href=\"#面试题常问回答\">#</a> 面试题常问回答</h2>\n<ol>\n<li>\n<p>上份工作离职理由</p>\n<p>由于公司组织结构调整，需要从我所在原来的部门调到其他岗位，同事有接受调岗，也有在观望，但我不想偏离自己的职业方向，所以只好离职。</p>\n</li>\n<li>\n<p>空窗期在干什么？或者空窗期找工作的情况？</p>\n<p>上份工作离职后，在找工作的过程中，发现我在开发技术方面很多地方需要提升，所以自学了一些符合就业市场中需求的技术课程，趁此机会提升自己的能力，以便能够更好地胜任工作。</p>\n</li>\n<li>\n<p>当前你的找工作情况，目前手上有 offer 吗？</p>\n<p>说实话，我最近才开始陆续参加一些面试，有几个公司已经到了最后环节，offer 还在洽谈中。<br />\n我自己也是偶然看到贵公司的岗位，觉得自己与该岗位十分合适，另外过往的工作经历和贵岗位非常匹配，也很喜欢这个平台和氛围，尤其是今天和您聊了之后，对公司 XX 方面很佩服，真心期待有这样一个机会。</p>\n</li>\n<li>\n<p>你能接受加班吗？</p>\n<p>我会努力地避免因为个人低效等原因造成的加班问题。</p>\n</li>\n<li>\n<p>自我介绍一下？</p>\n<p>面试官您好，我叫罗涛，从 2022 年开始进行 java 开发的工作，到目前为止，已经有了 1 年左右的工作经验，我在一家公司工作过，参与过一些应用的二次开发，比如说，机构服务平台。在工作期间呢，也做出来了一些成绩，比如说在机构服务平台这个系统中，我为公司重构了登录和安全认证模块相关的功能，包含了用户管理、权限管理、角色管理、验证码认证、密码加密等等功能，为公司将老系统基础模块二次开发后，提供了更加方便且易扩展的程序。用到的技术栈主要以 SpringBoot 为主，对于其他的技术也有一定的了解，如 Redis、SpringSecurity、Mybatis。好了，我的介绍完毕。</p>\n</li>\n<li>\n<p>你还有什么问题需要问我的吗？</p>\n<p>我想请问一下，如果确认录用的话，我需要准备什么可以快速融入到贵司的工作当中？</p>\n<p>刚才的面试当中，你觉得我的技术存在什么问题？下一步应该怎么学习？</p>\n<p>你觉得我刚才面试当中哪个方面回答的不好？</p>\n<p>咱们公司的技术栈是什么？</p>\n<p>咱们公司内部有没有什么培训或者分享</p>\n</li>\n<li>\n<p>如果录用你的话，需要多久能入职？</p>\n<p>如果贵公司录用了我的话，我会在一周内给出准确的答复。</p>\n</li>\n<li>\n<p>介绍一下你的缺点？</p>\n<p>由于我是刚毕业出来 1 年多，所以我的社会经验不足，可能在一些场景下沟通技巧和职场经验上不足，但是我会努力学习改变这种境况。</p>\n</li>\n<li>\n<p>介绍一下你的优点？</p>\n</li>\n<li></li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "JavaSE",
                "Java开发面试题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/interview/10%E6%9C%889%E6%97%A5%E9%9D%A2%E8%AF%95%E5%A4%B1%E8%B4%A5%E5%A4%8D%E7%9B%98/",
            "url": "http://scottalive.github.io/computer-science/java/interview/10%E6%9C%889%E6%97%A5%E9%9D%A2%E8%AF%95%E5%A4%B1%E8%B4%A5%E5%A4%8D%E7%9B%98/",
            "title": "10月9日面试失败复盘",
            "date_published": "2023-10-09T14:05:00.000Z",
            "content_html": "<p>面试题：</p>\n<ol>\n<li>先自我介绍一下？</li>\n<li>说说数据库左连接和右连接的区别？</li>\n<li>mysql 的事务说一下？</li>\n<li>Spring 原理？\n<ol>\n<li><strong>IoC（控制反转）和 DI（依赖注入）：</strong>\n<ul>\n<li><strong>IoC（Inversion of Control）</strong>：IoC 是一种设计思想，它将程序的控制权交给容器或框架，由容器来负责对象的创建和管理。Spring 的 IoC 容器，即 ApplicationContext，负责管理 Bean 的生命周期。</li>\n<li><strong>DI（Dependency Injection）</strong>：DI 是 IoC 的一种实现方式，它通过注入的方式将一个对象的依赖关系交给容器管理，而不是在对象内部直接创建依赖对象。这样做提高了组件的可重用性和可测试性。</li>\n</ul>\n</li>\n<li><strong>AOP（面向切面编程）：</strong>\n<ul>\n<li><strong>AOP（Aspect-Oriented Programming）</strong>：AOP 是一种编程范式，它允许将横切关注点（如日志、安全、事务管理等）从业务逻辑中剥离出来，使得系统关注点的变化不影响业务逻辑。在 Spring 中，AOP 通过代理机制实现，常见的代理方式有基于 JDK 动态代理和基于 CGLIB 的代理。</li>\n</ul>\n</li>\n<li><strong>Bean 的生命周期和作用域：</strong>\n<ul>\n<li><strong>Bean 的生命周期</strong>：Bean 的生命周期包括实例化、初始化、使用和销毁四个阶段。Spring 容器负责 Bean 的实例化和初始化，而销毁阶段则由容器负责。你可以提及 <code>InitializingBean</code>  和 <code>DisposableBean</code>  接口以及 <code>@PostConstruct</code>  和 <code>@PreDestroy</code>  注解来控制 Bean 的初始化和销毁操作。</li>\n<li><strong>Bean 的作用域</strong>：Spring 定义了多种 Bean 的作用域，包括 singleton（单例，默认）、prototype（原型）、request（每个 HTTP 请求一个实例）、session（每个 HTTP Session 一个实例）和 global session（全局 HTTP Session 一个实例）等。</li>\n</ul>\n</li>\n<li><strong>Spring 的事务管理：</strong>\n<ul>\n<li><strong>声明式事务管理</strong>：通过使用 <code>@Transactional</code>  注解或 XML 配置来声明事务，使得事务的控制更加方便。Spring 提供了对编程式事务管理的支持，可以通过 <code>PlatformTransactionManager</code>  接口进行编程式事务控制。</li>\n</ul>\n</li>\n<li><strong>Spring 的数据访问与集成：</strong>\n<ul>\n<li><strong>数据访问</strong>：Spring 提供了 JdbcTemplate 等模板类，简化了 JDBC 的操作，同时支持 ORM 框架（如 Hibernate、MyBatis）的集成，提供了对持久层的支持。</li>\n<li><strong>集成其他技术</strong>：Spring 能够与其他技术（如消息队列、缓存、搜索引擎等）进行集成，提供了丰富的集成方案。</li>\n</ul>\n</li>\n<li><strong>Spring 框架的核心组件：</strong>\n<ul>\n<li><strong>ApplicationContext</strong>：Spring 的 IoC 容器，负责管理 Bean 的生命周期。</li>\n<li><strong>BeanFactory</strong>：是 IoC 容器的基础接口，提供了基本的 IoC 功能。</li>\n<li><strong>BeanPostProcessor</strong>：在 Bean 初始化前后执行一些操作。</li>\n<li><strong>BeanDefinition</strong>：定义了 Bean 的配置信息。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>Rest 的请求有哪些？</li>\n<li>空窗期的安排？</li>\n</ol>\n<p>失败原因：</p>\n<ol>\n<li>准备不充足</li>\n<li>嘴笨，下意识逃避</li>\n<li>没有吸取教训，依然把自己劣势暴露出来。</li>\n<li>压根不重视面试。</li>\n<li>坏习惯依旧不改。</li>\n</ol>\n<p>解决方案：</p>\n<ol>\n<li>空出时间在面试前准备模拟面试</li>\n<li>提前准备好自我介绍</li>\n<li>适当改正回答时的下意识逃避行为（这点尤为重要）</li>\n<li>需要调整好作息，不能再休息不好去面试。</li>\n</ol>\n<p>初级考察范围：</p>\n<ol>\n<li>Java 基础。</li>\n<li>SQL 语句</li>\n<li>MySql 索引、事务</li>\n<li>框架原理</li>\n<li>项目？</li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "JavaSE",
                "Java开发面试题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/interview/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/",
            "url": "http://scottalive.github.io/computer-science/java/interview/%E8%87%AA%E6%88%91%E4%BB%8B%E7%BB%8D/",
            "title": "自我介绍",
            "date_published": "2023-10-09T14:05:00.000Z",
            "content_html": "<h3 id=\"自我介绍\"><a class=\"anchor\" href=\"#自我介绍\">#</a> 自我介绍</h3>\n<p>面试官您好，我叫罗涛，从 2022 年开始进行 java 开发的工作，到目前为止，已经有了 1 年左右的工作经验，我在一家公司工作过，参与过一些应用的二次开发，比如说，机构服务平台。在工作期间呢，也做出来了一些成绩，比如说在机构服务平台这个系统中，我为公司重构了登录和安全认证模块相关的功能，包含了用户管理、权限管理、角色管理、验证码认证、密码加密等等功能，为公司将老系统基础模块二次开发后，提供了更加方便且易扩展的程序。用到的技术栈主要有 SpringBoot 为主，对于其他的技术也有一定的了解，如 Redis、SpringSecurity、Mybatis。好了，我的介绍完毕。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "JavaSE",
                "Java开发面试题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/5-%E5%8A%9B%E6%89%A3-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/5-%E5%8A%9B%E6%89%A3-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/",
            "title": "力扣算法题-5-最长回文子串",
            "date_published": "2023-09-24T14:33:00.000Z",
            "content_html": "<h2 id=\"最长回文子串\"><a class=\"anchor\" href=\"#最长回文子串\">#</a> 最长回文子串</h2>\n<p>给你一个字符串  <code>s</code> ，找到  <code>s</code>  中最长的回文子串。</p>\n<p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：s = &quot;babad&quot;\n输出：&quot;bab&quot;\n解释：&quot;aba&quot; 同样是符合题意的答案。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：s = &quot;cbbd&quot;\n输出：&quot;bb&quot;\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n<li><code>s</code>  仅由数字和英文字母组成</li>\n</ul>\n<p><strong>思路</strong>：</p>\n<ol>\n<li>\n<p>动态规划</p>\n<p>对于一个子串而言，如果它是回文串，并且长度大于 2，那么将它首尾的两个字母去除之后，它仍然是个回文串。例如对于字符串 “ababa”，如果我们已经知道 “bab” 是回文串，那么 “ababa” 一定是回文串，这是因为它的首尾两个字母都是 “a”。</p>\n<p>根据这样的思路，我们就可以用动态规划的方法解决本题。我们用 P (i,j) 表示字符串 s 的第 i 到 j 个字母组成的串（下文表示成 s [i:j]）是否为回文串：</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/651051c1c458853aefb341e4.jpg\" alt=\"image-20230924225747002\" /></p>\n<p>是回文串其它情况这里的「其它情况」包含两种可能性：</p>\n<ul>\n<li>s [i,j] 本身不是一个回文串；</li>\n<li>i&gt;ji &gt; j<em>i</em>&gt;<em>j</em>，此时 s [i,j] 本身不合法。</li>\n</ul>\n<p>那么我们就可以写出动态规划的状态转移方程：</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/651051d4c458853aefb35cd0.jpg\" alt=\"image-20230924225631034\" /><br />\n 也就是说，只有 s [i+1:j−1] 是回文串，并且 s 的第 i 和 j 个字母相同时，s [i:j] 才会是回文串。</p>\n<p>上文的所有讨论是建立在子串长度大于 2 的前提之上的，我们还需要考虑动态规划中的边界条件，即子串的长度为 1 或 2。对于长度为 1 的子串，它显然是个回文串；对于长度为 2 的子串，只要它的两个字母相同，它就是一个回文串。因此我们就可以写出动态规划的边界条件：</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/651051e3c458853aefb37420.jpg\" alt=\"image-20230924225644678\" /></p>\n<p>根据这个思路，我们就可以完成动态规划了，最终的答案即为所有 P (i,j)=true 中 j−i+1（即子串长度）的最大值。注意：在状态转移方程中，我们是从长度较短的字符串向长度较长的字符串进行转移的，因此一定要注意动态规划的循环顺序。</p>\n<p><strong>代码</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> maxLen <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">int</span> begin <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//dp [i][j] 表示 s [i..j] 是否是回文串</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> dp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 初始化：所有长度为 1 的子串都是回文串</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> charArray <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token comment\">// 递推开始</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 先枚举子串长度</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">&lt;=</span> len<span class=\"token punctuation\">;</span> <span class=\"token class-name\">L</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">// 枚举左边界，左边界的上限设置可以宽松一些</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 由 L 和 i 可以确定右边界，即 j - i + 1 = L 得</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token class-name\">L</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token comment\">// 如果右边界越界，就可以退出当前循环</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">>=</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>charArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> charArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                        dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dp<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">// 只要 dp [i][L] == true 成立，就表示子串 s [i..L] 是回文，此时记录回文长度和起始位置</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> maxLen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                    maxLen <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                    begin <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span> begin <span class=\"token operator\">+</span> maxLen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>复杂度分析</strong>:</p>\n<p>时间复杂度：O (n2)，其中 n 是字符串的长度。</p>\n<p>动态规划的状态总数为 O (n2)，对于每个状态，我们需要转移的时间为 O (1)。</p>\n<p>空间复杂度：O (n2)，即存储动态规划状态需要的空间。</p>\n</li>\n<li>\n<p>中心扩散</p>\n</li>\n</ol>\n<p>​\t\t我们仔细观察一下方法一中的状态转移方程：</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/651051f4c458853aefb37907.jpg\" alt=\"image-20230924230359318\" /></p>\n<p>​\t\t 找出其中的状态转移链：</p>\n<p>​\t\t <img data-src=\"https://pic.imgdb.cn/item/65105201c458853aefb37a8f.jpg\" alt=\"image-20230924230425562\" /></p>\n<p>​</p>\n<p>​\t\t 可以发现，所有的状态在转移的时候的可能性都是唯一的。也就是说，我们可以从每一种边界情况开始「扩展」，也可以得出所有的状态对应的答案。</p>\n<p>​\t\t 边界情况即为子串长度为 1 或 2 的情况。我们枚举每一种边界情况，并从对应的子串开始不断地向两边扩展。如果两边的字母相同，我们就可以继续扩展，例如从 P (i+1,j−1) 扩展到 P (i,j)；如果两边的字母不同，我们就可以停止扩展，因为在这之后的子串都不能是回文串了。</p>\n<p>​\t\t 聪明的读者此时应该可以发现，「边界情况」对应的子串实际上就是我们「扩展」出的回文串的「回文中心」。方法二的本质即为：我们枚举所有的「回文中心」并尝试「扩展」，直到无法扩展为止，此时的回文串长度即为此「回文中心」下的最长回文串长度。我们对所有的长度求出最大值，即可得到最终的答案。</p>\n<p>​\t\t <strong>代码</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">longestPalindrome</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">int</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> end <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">int</span> len1 <span class=\"token operator\">=</span> <span class=\"token function\">expandAroundCenter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">int</span> len2 <span class=\"token operator\">=</span> <span class=\"token function\">expandAroundCenter</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>len1<span class=\"token punctuation\">,</span> len2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">></span> end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                start <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                end <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> len <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>start<span class=\"token punctuation\">,</span> end <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">expandAroundCenter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> right<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> right <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token operator\">--</span>left<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token operator\">++</span>right<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">return</span> right <span class=\"token operator\">-</span> left <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "力扣算法题",
                "算法"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/4-%E5%8A%9B%E6%89%A3-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-%E4%B8%AD%E7%AD%89/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/4-%E5%8A%9B%E6%89%A3-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-%E4%B8%AD%E7%AD%89/",
            "title": "力扣算法题-4-整数反转",
            "date_published": "2023-09-21T18:43:00.000Z",
            "content_html": "<h2 id=\"整数反转\"><a class=\"anchor\" href=\"#整数反转\">#</a> 整数反转</h2>\n<p>给你一个 32 位的有符号整数  <code>x</code>  ，返回将  <code>x</code>  中的数字部分反转后的结果。</p>\n<p>如果反转后整数超过 32 位的有符号整数的范围  <code>[−231, 231 − 1]</code>  ，就返回 0。</p>\n<p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：x = 123\n输出：321\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：x = -123\n输出：-321\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：x = 120\n输出：21\n</code></pre>\n<p><strong>示例 4：</strong></p>\n<pre><code>输入：x = 0\n输出：0\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>-231 &lt;= x &lt;= 231 - 1</code></li>\n</ul>\n<p><strong>思路</strong>：<br />\n首先我们想一下，怎么去反转一个整数？<br />\n用栈？<br />\n或者把整数变成字符串，再去反转这个字符串？<br />\n这两种方式是可以，但并不好。实际上我们只要能拿到这个整数的 末尾数字 就可以了。<br />\n以 12345 为例，先拿到 5，再拿到 4，之后是 3，2，1，我们按这样的顺序就可以反向拼接处一个数字了，也就能达到 反转 的效果。<br />\n怎么拿末尾数字呢？好办，用取模运算就可以了</p>\n<p><img data-src=\"https://pic.leetcode-cn.com/be35cb60bec9a9ae794abad671e6618abb5664780bc7ee30ca93ca423884a666-1.jpg\" alt=\"1.jpg\" /></p>\n<p>1、将 12345 % 10 得到 5，之后将 12345 / 10<br />\n2、将 1234 % 10 得到 4，再将 1234 / 10<br />\n3、将 123 % 10 得到 3，再将 123 / 10<br />\n4、将 12 % 10 得到 2，再将 12 / 10<br />\n5、将 1 % 10 得到 1，再将 1 / 10</p>\n<p>这么看起来，一个循环就搞定了，循环的判断条件是 x&gt;0<br />\n 但这样不对，因为忽略了 负数<br />\n循环的判断条件应该是 while (x!=0)，无论正数还是负数，按照上面不断的 / 10 这样的操作，最后都会变成 0，所以判断终止条件就是！=0<br />\n 有了取模和除法操作，对于像 12300 这样的数字，也可以完美的解决掉了。</p>\n<p>看起来这道题就这么解决了，但请注意，题目上还有这么一句</p>\n<p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。</p>\n<p>也就是说我们不能用 long 存储最终结果，而且有些数字可能是合法范围内的数字，但是反转过来就超过范围了。<br />\n假设有 1147483649 这个数字，它是小于最大的 32 位整数 2147483647 的，但是将这个数字反转过来后就变成了 9463847411，这就比最大的 32 位整数还要大了，这样的数字是没法存到 int 里面的，所以肯定要返回 0 (溢出了)。 甚至，我们还需要提前判断</p>\n<p><img data-src=\"https://pic.leetcode-cn.com/42c736510f4914af169907d61b22d1a39bd5a16bbd7eca0466d90350e2763164-2.jpg\" alt=\"2.jpg\" /></p>\n<p>上图中，绿色的是最大 32 位整数<br />\n第二排数字中，橘子的是 5，它是大于上面同位置的 4，这就意味着 5 后跟任何数字，都会比最大 32 为整数都大。<br />\n所以，我们到【最大数的 1/10】时，就要开始判断了<br />\n如果某个数字大于 214748364 那后面就不用再判断了，肯定溢出了。<br />\n如果某个数字等于 214748364 呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的末尾数字比较，如果这个数字比 7 还大，说明溢出了。</p>\n<p>对于负数也是一样的</p>\n<p><img data-src=\"https://pic.leetcode-cn.com/525aa75c19702e57b780c91a7ebb990359b14e96acc09b6327d9e1f0a5b3a16a-3.jpg\" alt=\"3.jpg\" /></p>\n<p>上图中绿色部分是最小的 32 位整数，同样是在【最小数的 1/10】时开始判断<br />\n如果某个数字小于 -214748364 说明溢出了<br />\n如果某个数字等于 -214748364，还需要跟最小数的末尾比较，即看它是否小于 8</p>\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// 每次取末尾数字</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">int</span> tmp <span class=\"token operator\">=</span> x<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token comment\">// 判断是否 大于 最大 32 位整数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token operator\">></span><span class=\"token number\">214748364</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>res<span class=\"token operator\">==</span><span class=\"token number\">214748364</span> <span class=\"token operator\">&amp;&amp;</span> tmp<span class=\"token operator\">></span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 判断是否 小于 最小 32 位整数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>res<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">214748364</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>res<span class=\"token operator\">==</span><span class=\"token operator\">-</span><span class=\"token number\">214748364</span> <span class=\"token operator\">&amp;&amp;</span> tmp<span class=\"token operator\">&lt;</span><span class=\"token operator\">-</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            res <span class=\"token operator\">=</span> res<span class=\"token operator\">*</span><span class=\"token number\">10</span> <span class=\"token operator\">+</span> tmp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            x <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "力扣算法题",
                "算法"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "title": "查找算法",
            "date_published": "2023-09-20T20:47:00.000Z",
            "content_html": "<h3 id=\"二分查找法\"><a class=\"anchor\" href=\"#二分查找法\">#</a> 二分查找法</h3>\n<p><code>思路：</code> 先将列表中间的元素与要查找的元素比较，如果相等直接返回，如果大了，将中间元素后面的列表元素排除，再在列表开始到列表中间元素之间进行相同操作，直到查找到匹配的元素。</p>\n<p>时间复杂度：O (log2 n)</p>\n<p><code>代码：</code></p>\n<p>java:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法一：递归</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">+</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 方法二：循环</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">+</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>python:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 二分查找中，数组必须是有序的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 方法一：采用递归的方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 如果 start 索引下的元素就是目标元素，直接返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> start</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 如果 end 索引下的元素就是目标元素，直接返回</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> end</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 取中间的元素 为什么是 (end + start) / 2？因为当 start>0 时，中间的索引必须是 (end - start) / 2 + start = (end + start) / 2，必须要加上 start, 否则递归会溢出，无限递归下去。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    mid <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">+</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 如果中间的元素是目标元素则直接返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> mid</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 如果中间元素大于目标元素，则递归调用，将 end 设置成中间索引减 1，即 mid - 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 如果中间元素小于目标元素，则递归调用，将 start 设置成中间索引加 1，即 mid+ 1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 方法二：采用循环的方式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search_2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    low <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    high <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span> low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> low</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> high</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        guess <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> mid</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            low <span class=\"token operator\">=</span> low <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            high <span class=\"token operator\">=</span> high <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "编程笔记",
                "算法"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/",
            "title": "力扣算法题-3-无重复字符的最长子串",
            "date_published": "2023-09-18T21:54:00.000Z",
            "content_html": "<h2 id=\"无重复字符的最长子串\"><a class=\"anchor\" href=\"#无重复字符的最长子串\">#</a> 无重复字符的最长子串</h2>\n<p>给定一个字符串  <code>s</code>  ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: s = &quot;abcabcbb&quot;\n输出: 3 \n解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: s = &quot;bbbbb&quot;\n输出: 1\n解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。\n</code></pre>\n<p><strong>示例 3:</strong></p>\n<pre><code>输入: s = &quot;pwwkew&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>\n<li><code>s</code>  由英文字母、数字、符号和空格组成</li>\n</ul>\n<p><strong>解法</strong></p>\n<p><strong>思路：</strong><br />\n这道题主要用到思路是：滑动窗口</p>\n<p>什么是滑动窗口？</p>\n<p>其实就是一个队列，比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p>\n<p>如何移动？</p>\n<p>我们只要把队列的左边的元素移出就行了，直到满足题目要求！</p>\n<p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p>\n<p>时间复杂度：O (n)</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                left <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "力扣算法题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/2-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-%E4%B8%AD%E7%AD%89/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/2-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-%E4%B8%AD%E7%AD%89/",
            "title": "力扣算法题-2-两数相加",
            "date_published": "2023-09-18T21:43:00.000Z",
            "content_html": "<h2 id=\"力扣算法题-2-两数相加\"><a class=\"anchor\" href=\"#力扣算法题-2-两数相加\">#</a> 力扣算法题 - 2 - 两数相加</h2>\n<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"img\" /></p>\n<pre><code>输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：l1 = [0], l2 = [0]\n输出：[0]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>每个链表中的节点数在范围  <code>[1, 100]</code>  内</li>\n<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n<li>题目数据保证列表表示的数字不含前导零</li>\n</ul>\n<p>解法：</p>\n<p><strong>思路</strong></p>\n<ul>\n<li>标签：链表</li>\n<li>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 000，比如 987 + 23 = 987 + 023 = 1010</li>\n<li>每一位计算的同时需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值<br />\n如果两个链表全部遍历完毕后，进位值为 111，则在新链表最前方添加节点 1</li>\n<li>小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点 head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。</li>\n</ul>\n<p><strong>代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * public class ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode(int x) &#123; val = x; &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            carry <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>carry <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "力扣算法题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/1-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E7%AE%80%E5%8D%95/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/1-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E7%AE%80%E5%8D%95/",
            "title": "力扣算法题-1-两数之和",
            "date_published": "2023-09-18T21:22:00.000Z",
            "content_html": "<h2 id=\"两数之和\"><a class=\"anchor\" href=\"#两数之和\">#</a> 两数之和</h2>\n<h3 id=\"两数之和-2\"><a class=\"anchor\" href=\"#两数之和-2\">#</a> 两数之和</h3>\n<p>给定一个整数数组  <code>nums</code>  和一个整数目标值  <code>target</code> ，请你在该数组中找出 <strong>和为目标值</strong> <em> <code>target</code> </em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：nums = [3,2,4], target = 6\n输出：[1,2]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：nums = [3,3], target = 6\n输出：[0,1]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n<li><strong>只会存在一个有效答案</strong></li>\n</ul>\n<p>** 进阶：** 你可以想出一个时间复杂度小于  <code>O(n2)</code>  的算法吗？</p>\n<p><strong>解法：</strong></p>\n<p>方法一：暴力枚举<br />\n思路及算法</p>\n<p>最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。</p>\n<p>当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。</p>\n<p>代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度：O (N²)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p>\n<p>空间复杂度：O (1)。</p>\n<p>方法二：哈希表<br />\n思路及算法</p>\n<p>注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p>\n<p>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O (N) 降低到 O (1)。</p>\n<p>这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p>\n<p>代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度：O (N)，其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 O (1) 地寻找 target - x。</p>\n<p>空间复杂度：O (N)，其中 N 是数组中的元素数量。主要为哈希表的开销。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "力扣算法题"
            ]
        },
        {
            "id": "http://scottalive.github.io/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/",
            "url": "http://scottalive.github.io/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/",
            "title": "坏习惯",
            "date_published": "2023-09-17T11:36:00.000Z",
            "content_html": "<h3 id=\"九种弱者习惯\"><a class=\"anchor\" href=\"#九种弱者习惯\">#</a> 九种弱者习惯</h3>\n<p>一、九种弱者习惯，包括爱找借口、缺乏胆识、犹豫不决等，提醒读者要养成优秀的习惯，不断成长进步。</p>\n<ul>\n<li>习惯不好消耗生命，好习惯塑造自己</li>\n<li>摒弃消极的念头，主动调整一个个微小的行为</li>\n<li>去爱、攀山、追梦，去尝试，去尝试，去尝试</li>\n</ul>\n<p>二、犹豫、学习、拖延等现代职场中的常见问题，并给出了解决方案，鼓励人们积极行动，终身学习，克服拖延症。</p>\n<ul>\n<li>犹豫不决，害怕失败，浪费时间</li>\n<li>不懂得学习，抛弃旧技能，容易被取代</li>\n<li>拖延症会侵蚀人生，尝试 5 分钟定律</li>\n</ul>\n<p>三、避免生活和工作中的七种常见问题，如拖延症、缺乏恒心、害怕拒绝等，提出了解决方案，帮助人们更好地面对生活中的挑战。</p>\n<ul>\n<li>拖延会消耗生命，提前投入做事</li>\n<li>成功的人有恒心，不要半途而废</li>\n<li>人生的目标由自己定，不要习惯待在舒适区</li>\n</ul>\n<p>四、九种弱者习惯，包括懒惰、逃避现实等，并强调了积极面对生活的重要性，只有戒掉这些习惯才能迈向更好的未来。</p>\n<ul>\n<li>逃避现实会导致内心脆弱，生活也会加倍的报复回来</li>\n<li>不断拥抱新的挑战，熬过一次次痛苦的蜕变，才能向更好的生活靠近</li>\n<li>主动调整微小行为，改写自己的命运，把每一天过得充实而有意义</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtrNHkxUDdzby8/c3BtX2lkX2Zyb209MzMzLjEwMDcudGlhbm1hLjEtMS0xLmNsaWNrJmFtcDt2ZF9zb3VyY2U9ZjllZWRmOTgzNzhhYTc3ZWIzNTZkMzM0M2JiYmU2MDE=\">原文视频来源地址</span></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "生活习惯",
                "个人分享",
                "坏习惯"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/",
            "title": "初识Nacos",
            "date_published": "2023-09-01T01:17:00.000Z",
            "content_html": "<h2 id=\"初识nacos\"><a class=\"anchor\" href=\"#初识nacos\">#</a> 初识 Nacos</h2>\n<h3 id=\"nacos安装\"><a class=\"anchor\" href=\"#nacos安装\">#</a> Nacos 安装</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2023-08-30T03:07:00.000Z",
            "content_html": "<h2 id=\"排序算法\"><a class=\"anchor\" href=\"#排序算法\">#</a> 排序算法</h2>\n<h3 id=\"冒泡排序法\"><a class=\"anchor\" href=\"#冒泡排序法\">#</a> 冒泡排序法</h3>\n<h3 id=\"选择排序法\"><a class=\"anchor\" href=\"#选择排序法\">#</a> 选择排序法</h3>\n<p><code>思路：</code> 选择一个元素作为最小元素（一般是第一个），然后将这个元素与数组其他元素进行比较，如果比它还小则将其最小元素赋值给它，比较完一轮后，将这个最小元素放入到新数组（排序好的数组）并从原数组剔除出去，如此反复操作 n 轮</p>\n<p>** 时间复杂度:**O (n²)</p>\n<p><code>代码：</code></p>\n<p><code>java</code> :</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 寻找最小元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param arr 数组</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return 最小元素索引</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findSmallest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> smallest_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> smallest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                smallest_index <span class=\"token operator\">=</span> i <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> smallest_index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 返回去除元素的新数组</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param arr 原数组</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param element_index 最小元素索引</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @return 新数组</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> element_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>element_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 选择排序算法</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @param arr 原数组</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @return 排序好的新数组</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">chooseSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>newArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">int</span> smallest_index <span class=\"token operator\">=</span> <span class=\"token function\">findSmallest</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            newArr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>smallest_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            arr <span class=\"token operator\">=</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>smallest_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>python</code> :</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 寻找最小元素，并返回最小元素索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_smallest</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    smallest_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> smallest<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            smallest_index <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> smallest_index</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 选择排序法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">choose_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sort_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        smallest_index <span class=\"token operator\">=</span> find_smallest<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        sort_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>smallest_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> sort_list</pre></td></tr></table></figure><h3 id=\"快速排序法\"><a class=\"anchor\" href=\"#快速排序法\">#</a> 快速排序法</h3>\n<p>** 思路:** 选择数组中的一个元素作为基准元素，然后将其他元素与其比较，如果小的放入左边一个数组，如果大的放入右边的数组，反复操作，直至子数组只有 0 个或者 1 个元素为止。</p>\n<p><strong>时间复杂度</strong>：O (nlogn)</p>\n<p><code>python</code> :</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 快速排序法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 思路：选择数组中的一个元素作为基准元素，然后将其他元素与其比较，如果小的放入左边一个数组，如果大的放入右边的数组，反复操作，直至子数组只有 0 个或者 1 个元素为止</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 这种思路可以使用递归的方式来做，将数组只有 0 个或者 1 个元素作为递归终止条件，后面再做归纳 --- 选择基准元素和子数组递归。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 快速排序法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 如果数组长度小于 2，则直接返回数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> arr</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 将数组第一个元素作为基准元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pivot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 生成小于等于基准元素的子数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    less <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;=</span> pivot<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 生成大于基准元素的子数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 合并数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> quick_sort<span class=\"token punctuation\">(</span>less<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> quick_sort<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>quick_sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>java:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 快速排序法</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param arr 原数组</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 如果数组长度小于等于 1，直接返回 基准条件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 取第一个元素作为基准元素</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">int</span> privot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 获取比基准元素小和比基准元素大的数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> less <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> greater <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> privot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                greater<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                less<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token comment\">// 递归上述行为，直至获取到两个数组排序好的数组</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lessArr <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>less<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> greaterArr <span class=\"token operator\">=</span> <span class=\"token function\">quickSort</span><span class=\"token punctuation\">(</span>greater<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">mapToInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token comment\">// 将其复制到新数组中</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>lessArr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>lessArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>greaterArr<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>array<span class=\"token punctuation\">,</span>lessArr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>greaterArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        array<span class=\"token punctuation\">[</span>lessArr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> privot <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> array <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "编程笔记",
                "算法"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Ribbon负载均衡",
            "date_published": "2023-08-30T02:17:00.000Z",
            "content_html": "<h2 id=\"ribbon负载均衡\"><a class=\"anchor\" href=\"#ribbon负载均衡\">#</a> Ribbon 负载均衡</h2>\n<h3 id=\"负载均衡原理\"><a class=\"anchor\" href=\"#负载均衡原理\">#</a> 负载均衡原理</h3>\n<p>规则接口是<strong> IRule</strong><br />\n 默认实现是<strong> ZoneAvoidanceRule</strong>，根据<strong> zone</strong> 选择服务列表，然后轮询</p>\n<h3 id=\"负载均衡策略\"><a class=\"anchor\" href=\"#负载均衡策略\">#</a> 负载均衡策略</h3>\n<p>代码方式：配置灵活，但修改时需要重新打包布<br />\n配置方式：直观，方便，无需重新打包发布但是无法做全局配置</p>\n<h3 id=\"懒加载\"><a class=\"anchor\" href=\"#懒加载\">#</a> 懒加载</h3>\n<p>开启饥饿加载<br />\n指定饥饿加载的微服务名称</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/",
            "title": "Eureka注册中心",
            "date_published": "2023-08-30T01:17:00.000Z",
            "content_html": "<h2 id=\"eureka注册中心\"><a class=\"anchor\" href=\"#eureka注册中心\">#</a> Eureka 注册中心</h2>\n<h3 id=\"服务调用出现的问题\"><a class=\"anchor\" href=\"#服务调用出现的问题\">#</a> 服务调用出现的问题</h3>\n<ul>\n<li>服务消费者该如何获取服务提供这的地址信息？</li>\n<li>如果有多个服务提供者，消费者该如何选择？</li>\n<li>消费者如何得知服务提供这的健康状态？</li>\n</ul>\n<h3 id=\"eureka的作用\"><a class=\"anchor\" href=\"#eureka的作用\">#</a> Eureka 的作用</h3>\n<ul>\n<li>消费者该如何获取服务提供者的具体信息？\n<ul>\n<li>服务提供者启动时向 Eureka 注册自己的信息</li>\n<li>eureka 保存这些信息</li>\n<li>消费者根据服务名称向 eureka 拉取提供者信息</li>\n</ul>\n</li>\n<li>如果有多个服务提供者，消费者该如何选择？\n<ul>\n<li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li>\n</ul>\n</li>\n<li>消费者该如何感知服务提供者健康状态？\n<ul>\n<li>服务提供者会每 30 秒向 EurekaServer 发送心跳请求，报告健康状态</li>\n<li>eureka 会更新服务列表信息，心跳不正常会被剔除</li>\n<li>消费者就可以拉取到最新的信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"搭建eureka服务注册中心\"><a class=\"anchor\" href=\"#搭建eureka服务注册中心\">#</a> 搭建 Eureka 服务注册中心</h3>\n<ol>\n<li>\n<p>引入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>eureka<span class=\"token operator\">-</span>server<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写启动类，并在启动类添加 **@EnableEurekaServer** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaServer</span> <span class=\"token comment\">// 添加注解</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件上添加 eureka 服务器地址信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka <span class=\"token comment\">#注册中心地址</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"搭建eureka客户端中心\"><a class=\"anchor\" href=\"#搭建eureka客户端中心\">#</a> 搭建 Eureka 客户端中心</h3>\n<ol>\n<li>\n<p>引入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>eureka<span class=\"token operator\">-</span>client<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写启动类，并在启动类上添加 **@EnableEurekaClient** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.itcast.user.mapper\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span> <span class=\"token comment\">// 添加注解开启服务注册</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件上写明 Eureka 服务端的地址信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> userservice <span class=\"token comment\"># user 服务的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">## eureka 服务中心</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka</pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"eureka服务发现拉取\"><a class=\"anchor\" href=\"#eureka服务发现拉取\">#</a> Eureka 服务发现 / 拉取</h3>\n<ol>\n<li>\n<p>前提：完成 Eureka 服务端和 Eureka 客户端的搭建，并且服务中心可以看到这些注册到 Eureka 的服务</p>\n</li>\n<li>\n<p>在原来<strong> RestTemplate</strong> 上加入 **@LoadBalanced** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将原来使用 RestTemplate 发送 http 请求时写入的 ip 地址替换成 eureka 服务端中的服务名，即 spring.application.name 字段的名称</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2. 利用 restTemplate 发起 http 请求，查询用户 这里原来是 ip 地址，替换成服务名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://userservice/user/\"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/",
            "title": "认识微服务",
            "date_published": "2023-08-30T00:04:00.000Z",
            "content_html": "<h2 id=\"认识微服务\"><a class=\"anchor\" href=\"#认识微服务\">#</a> 认识微服务</h2>\n<p>微服务是一种经过良好架构设计的<strong>分布式</strong>架构方案，微服务架构特征：</p>\n<ul>\n<li>单一职责：微服务拆分力度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发。</li>\n<li>面向服务：微服务对外暴露业务接口。</li>\n<li>自治：团队独立、技术独立、数据独立、部署独立。</li>\n<li>隔离性强：服务调用做好隔离、容错、降级、避免级联现象。</li>\n</ul>\n<h3 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题：</h3>\n<p>单体架构与分布式架构的区别？</p>\n<ul>\n<li>单体架构特点：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</li>\n<li>分布式架构特点：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东，淘宝。</li>\n</ul>\n<p>微服务：一种良好的分布式架构</p>\n<ul>\n<li>优点：拆分力度更小、服务更独立、耦合度更低</li>\n<li>缺点：架构非常复杂，运维、监控、部署难度提高</li>\n</ul>\n<h3 id=\"微服务结构\"><a class=\"anchor\" href=\"#微服务结构\">#</a> 微服务结构</h3>\n<p>微服务这种方案需要技术框架来落地，全球的互联网公司都在积极尝试自己的微服务落地技术。在国内最知名的就是 SpringCloud 和阿里巴巴的 Dubbo。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8d49661c6c8e54729987.jpg\" alt=\"image-20230830082645810\" /></p>\n<h3 id=\"微服务技术对比\"><a class=\"anchor\" href=\"#微服务技术对比\">#</a> 微服务技术对比</h3>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8ec5661c6c8e547347d2.jpg%5B\" alt=\"\" /></p>\n<h3 id=\"企业需求\"><a class=\"anchor\" href=\"#企业需求\">#</a> 企业需求</h3>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8f18661c6c8e5473504b.jpg\" alt=\"\" /></p>\n<h3 id=\"springcloud\"><a class=\"anchor\" href=\"#springcloud\">#</a> SpringCloud</h3>\n<ul>\n<li><strong>SpringCloud</strong> 是目前国内使用最广泛的微服务架构。官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3Vk\">Spring Cloud</span></li>\n<li><strong>SpringCloud</strong> 集成了各种微服务功能组件，并基于<strong> SpringBoot</strong> 实现了这些组件的自动装配，从而提供了良好的开箱即用体验：</li>\n</ul>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee90d0661c6c8e54740733.jpg\" alt=\"微服务技术体系\" /></p>\n<h3 id=\"服务拆分与远程调用\"><a class=\"anchor\" href=\"#服务拆分与远程调用\">#</a> 服务拆分与远程调用</h3>\n<p><strong>服务拆分注意事项</strong></p>\n<ol>\n<li>不同微服务，不要重复开发相同业务</li>\n<li>微服务数据独立，不要访问其他微服务的数据库</li>\n<li>微服务可以将自己的业务暴露为接口，供其他微服务调用</li>\n</ol>\n<h3 id=\"微服务远程调用\"><a class=\"anchor\" href=\"#微服务远程调用\">#</a> 微服务远程调用</h3>\n<p><strong>提供者与消费者</strong></p>\n<ul>\n<li>\n<p>服务提供者：一次业务中，被其他为服务调用的服务。（提供接口给其他微服务）</p>\n</li>\n<li>\n<p>服务消费者：一次业务中，调用其他为服务的服务。（调用其他微服务提供的接口）</p>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/",
            "url": "http://scottalive.github.io/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/",
            "title": "操纵性理学",
            "date_published": "2023-07-06T14:17:00.000Z",
            "content_html": "<h2 id=\"操纵心理学\"><a class=\"anchor\" href=\"#操纵心理学\">#</a> 操纵心理学</h2>\n<p><strong>不要相信” 都是为你好 “，拒绝做软柿子</strong></p>\n<p><strong>修炼你的心，懂得爱人，也要懂得爱自己</strong></p>\n<p><strong>你的人生应该永远由你来选择</strong></p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "心理学",
                "操纵心理学",
                "心理学知识"
            ]
        },
        {
            "id": "http://scottalive.github.io/introduction/%E5%8E%9F%E5%88%99/",
            "url": "http://scottalive.github.io/introduction/%E5%8E%9F%E5%88%99/",
            "title": "个人原则",
            "date_published": "2023-06-21T20:22:00.000Z",
            "content_html": "<h3 id=\"原则\"><a class=\"anchor\" href=\"#原则\">#</a> 原则</h3>\n<ul>\n<li>\n<p>生活态度</p>\n<ul>\n<li>\n<p>身体健康</p>\n<p><strong>身体健康乃是第一要素，所有的原则都要建立在身体健康上。</strong></p>\n<ol>\n<li>平时熬夜不得超过两点，保证睡眠充足。</li>\n<li>早上起床工作日在 8 点左右起来，休息日要在 10 点之前起来。</li>\n<li>平时加强锻炼，平时锻炼需要控制在 1 个小时左右，室内室外就行。</li>\n<li>饭菜不能过于重，需要合理膳食，荤素搭配，而且每天需要补充水果。</li>\n</ol>\n</li>\n<li>\n<p>心理健康</p>\n<p><strong>基于我经常内耗的情况，我需要适当性地进行心理上的培养</strong></p>\n<ol>\n<li>休息日必须要画上 2 个小时进行心理书籍阅读。</li>\n<li>工作日晚上睡觉时可以进行心理书籍阅读。</li>\n<li>内耗时必须要寻找事情做，听音乐和看视频。</li>\n<li>以正常合适的心态面对自己的各种情绪，不能因为某种情绪影响自己的状态就直接一刀切的忽视。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>人际关系</p>\n<ul>\n<li>\n<p>朋友关系</p>\n<p><strong>朋友关系是我一直以来十分重视的关系，但是自己却经常把它搞砸，来自于内心深处那喜欢责怪他人的怪异心理。</strong></p>\n<ol>\n<li>建立朋友关系前，需要了解他人的脾性，如果经常性对你沉默，忽略，必须要收住热情，不能再进行主动行为。</li>\n<li>由于建立的朋友关系大多是人走茶凉，所以，无论是对你多好的朋友，如果走后没有主动寻找过，都一律当做普通朋友，并以待之。</li>\n<li>当与朋友相处时，如果遇到三观不合的情况下，不可直接指出，一定要远离，但不可操之过急，需不引起注意远离。</li>\n<li>当与朋友相处时，如果遇到想做的事情可能遭受他的厌恶时，即当面骂人，无视风险，非他人所求就强行帮助（这点尤其注意），鉴于我的性格，我很容易在感到不适时，喜欢无视他人感受，无视所有风险，以个人感受为主要驱动来行动，我必须要改掉无视他人感受和风险，如果有这种想法，一定要旁敲侧击来询问他人建议，并非直接询问我的行为，而是表达情绪，即适当性抱怨他人忽略或者无视我的行为，适当表达出自己的不满，如果他人还是不管，3 次就可直接远离，切记不可摊牌翻脸，要循序渐进。</li>\n<li>与朋友相处时，遇到朋友嘲讽时，如果非常生气，不可以直接无视，将自己之前喜欢辩解，喜欢对喷的行为改为话语：烦死了、闭嘴、我想安静点。切勿真正动气来报复。</li>\n<li>不要主动窥探他人的生活，这点尤为重要，无论我多么寂寞，多么孤独，都不能主动地去窥探别人生活，或者主动性地进入别人生活。</li>\n<li>朋友心情低落时，如果自己想要帮助他人，将自己的行为看成普通帮助，不能将其当做自己的好，而且一定得面对面交流，即在尊重他人的情况下，再进行适当帮助。</li>\n</ol>\n</li>\n<li>\n<p>亲情关系</p>\n<ul>\n<li>\n<p>直系血缘关系（家人）</p>\n<ol>\n<li>关心家人必须建立在自己的状态良好的情况下，不能再将父母当做无话不说的对象，控制自己在父母面前抱怨的样子，收起自己遇到父母说话不符合自己三观的情况下驳斥，放下反驳的心态去面对家人，家人相处不是来辩论的，一切顺着他们来就行，听而不从，可以解决大部分问题。</li>\n<li>父亲是个十分强硬，执拗的人，一旦认定的观念就不可能改变，所以他说的话全可以当做他个人不得志的倾述，我只需要当个附和的旁人即可，无需去跟他辩解，反驳他的话，改变别人不是我的人生课题，一定要原谅别人的无知，别人的愚蠢，别人的冒犯，因为为别人的问题生气和纠正别人不是自己的课题。</li>\n<li>母亲是一个个性软弱，喜欢隐忍自己感受的人，她的性别十分恶劣，某种程度上，我的母亲带给我的影响大于父亲，所以遇到母亲在我面前歇斯底里地骂我不孝的情况，一定不要慌张，也不要辩解，如果可以的话，尽量避免这种情况即可。</li>\n<li>妹妹被我伤害的最多，所以我需要做的是做好哥哥该干的事，不要再用之前的脾气面对她，也不能在他面前与父母对峙，吵架，平时有时间就联系一下她也可以。</li>\n</ol>\n</li>\n<li>\n<p>嫡系血缘关系（亲戚）</p>\n<ol>\n<li>好好对待自己的亲戚，但是不能以自己为第一个大学生的身份来教导别人，记住，永远不要轻易地去教导别人，千万不要轻易地去扶别人，这是我这 20 多年来犯的最大的一个错，我必须要纠正自己好为人师的性格，觉得自己比别人更懂某些道理，其实懂不懂从当前的境遇就可以看出来一个人是否是强人，那种别人口中厉害的人，我没有必要去强行地倾述自己的见解。只要不是自己悟出来的，别人强行灌输的道理我都不认，这辈子我只认我自己亲身悟出来的道理。</li>\n<li>我并不是一个孝顺的好孩子，但是很多情况下，我不能得势并不是因为别人给我的个个理由，而是由于我自己的心境不如别人，我看了太多的人生大道，经历了很多低谷期，也抑郁过，自己也堕落过，但我还是那个我，我并不是希望别人来拯救的人，所以，我不会允许也不会求助于别人，尤其是亲戚，我不会抖露出自己的志向，也不会向任何人倾述我的烦恼和自己的计划。言多必失，这是我十分惨重的教训。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>爱情关系</p>\n<ol>\n<li>我不确定自己是否需要爱情，但是如若真的遇到了自己喜爱的女孩，我一定会尽力地去爱她，不主动寻找是我对爱情的谨慎，因为有我父母娃娃亲的教训，我出生在一个并不和睦的家庭，这一切都是由于父母之间长期的内斗，窝里横让我对于爱情有了恐惧，这种恐惧是刻在骨子里的，我并不排斥这种情感，就像父母之间的矛盾一样，我只是对爱情有了更高的要求，我更倾向于寻找一个各方面都符合自己的，更愿意与我一同的爱情关系，而不是那种喜欢窝里斗，时常吵架的家庭。</li>\n</ol>\n</li>\n<li>\n<p>同事关系</p>\n<ol>\n<li>同事永远不是朋友，之前的我可以为任何人做任何事，现在的我以为，职场中我这种人首要做的就是藏拙，并且示弱，并请教别人，这是我第一段事业的教训，由于我的傲慢和好为人师，喜欢关注别人的成长，让我一直以来其实都是没有成长。我必须竭尽所能地关注自己的成长，我必须要以自己的事情为主，别人发生了什么事，我都无需去主动指教，我真的，这种喜欢教导别人的性格真的是十分阻碍我。</li>\n<li>同事可以亲近，但是不能过度亲近，永远不能给自己的同事暴露自己的家事，自己的状态，自己的私事，这点尤为重要，别人的微信，别人的消息，不能恶心地去留意，上级的要求，要主动跟上级交代和沟通好细节，否则不要轻易地动手。</li>\n<li>自己的事情不能让别人做，别人的事情，自己不轻易地做，如果上级再次要求自己的一些无理的要求，需要明确自己的态度，就算妥协也要表现出自己是被胁迫且是非我意愿的，这样其实就可以让我在其他事情上有更多的发语权，在职场上，没有朋友，没有知遇之恩的老板和上级，只有自己的利益，一定要在职场中保护好自己，不要成为顺从的羊，也不要成为过于尖锐的出头鸟。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>责任</p>\n<ul>\n<li>\n<p>个人责任</p>\n<ol>\n<li>我的责任是爱自己，首要就是爱自己，不再依靠别人的安慰，不再依靠别人的帮助，我要成为一个情感独立，生存独立的人，前 20 年都是掌握在我父母中，父母利用赡养我的理由一直以来都是采取打压来让我顺从他们，我到现在我甚至可以肯定他们可能还更喜欢看到我现在的样子，不要看他们对我的样子十分唾弃，其实内心都是在甩锅，底层的人其实就是那么一些人，喜欢落井下石，好为人师，喜欢打压别人，不知道如何爱自己，更不知道怎么爱别人。</li>\n<li>我的责任其实首要是对要对自己的未来做准备，我要做什么，我想做什么，我必须要在有生之年在一些事中做出自己的功绩，我知道这很难，因为我个人天马行空，喜欢做一些不符实际的幻想，喜欢做白日梦，但是我对于这个世界，这个世界有什么组成，我们又是因为什么诞生在这个世界，我想要寻求答案，但是我知道，这并不是我这个普通人能做到的，但我会努力地去做，去做给自己看，有些事情，并不是一时没有能力就不能做的，我可以时时刻刻地去努力。</li>\n</ol>\n</li>\n<li>\n<p>家庭责任</p>\n<ol>\n<li>家庭责任书首要是孝敬父母，我知道我现在并无能力，也经常让父母担心，顶撞父母，当然，我会慢慢改，在我稳定好我自己后，我也会慢慢地回敬自己的父母，我并不想再去纠正自己的父母了，我决定要以当面顺从父母，背后应以自己来做，不能将父母的看法，父母的态度，父母的干预来影响自己，从此以后，我必须要谨慎对待各种观点，各种人对我的看法，我要做到表面无动于衷，背后分析利害并及时改正，司马懿的那句话说的好，这辈子走来，没有敌人，只有朋友，无论是谁，敌人也好，朋友也罢，都是能够让自己更加能够了解自己的人，不能对他们产生一些诸如怨恨、嫉妒、报复等等负面的情感来看别人，需要以礼待之，记住，自己的心态永远是自己最好的风水，不能让情绪，尤其是负面情绪击溃自己。</li>\n<li>家庭责任第二点则是重建自己的影响力，不能让父母或者某些亲戚来干涉自己的事情，至于某些事情需要自己的时候，必须要有自己的确认，否则我不会将任何诸如钱财、信息、等等给父母许诺的任何人，我要逐渐找到自己信任的人，自己的父母生于底层，他们这一生都活在底层的环境，喜欢胡乱地结交别人，喜欢让我也去结交，哪怕别人和自己根本没有任何意愿，强行地撮合是最不能持久的，父亲一直以来都喜欢结交别人，然而忽略了自己，从不想着自己能怎么去帮助别人，一昧地想着如何从自己的关系中获益，这是十分不明智的做法，这世界上真的有人会因为一场谈话，一个谈不上很好的过去的缘分就去帮助一个根本不熟悉的人的孩子吗，我觉得这是不太可能的，所以，我一直坚信着，如果自己不强大，自己没有别人看中的特点和利益，是永远都不可能找到那所谓的贵人相助的，我觉得很多情况下，如果是别人强行塞给我的来帮助我的人，我反而不会去回报他，反而是那些在我真正遇到难处，自己主动或者被人发现并给予帮助的人，那种感恩，那种感情才是真挚的，总而言之，雪中送炭是真挚而且难得的。强塞给我，不是我想要的，我会觉得并不是我想，却与我父母来强行干预我的因果的人是无论如何都是无法让我产生好感的。</li>\n</ol>\n</li>\n<li>\n<p>岗位责任</p>\n</li>\n</ul>\n</li>\n<li>\n<p>能力</p>\n<ul>\n<li>\n<p>工作能力</p>\n</li>\n<li>\n<p>生活能力</p>\n</li>\n<li>\n<p>学习能力</p>\n</li>\n</ul>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "个人简介",
                "原则",
                "个人详情",
                "个人分享"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://scottalive.github.io/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "Java基础面试题",
            "date_published": "2023-05-03T16:28:00.000Z",
            "content_html": "<h2 id=\"java基础面试题\"><a class=\"anchor\" href=\"#java基础面试题\">#</a> Java 基础面试题</h2>\n<ol>\n<li>\n<p><strong>什么是 Java？它有哪些特点？</strong></p>\n<p>Java 是一种广泛应用于软件开发的高级编程语言。它具有以下特点：</p>\n<ol>\n<li><strong>跨平台性（Platform Independence）</strong>：Java 代码可以在不同操作系统上运行，这是通过将 Java 源代码编译成字节码（Bytecode），然后在 Java 虚拟机（JVM）上执行的方式实现的。这使得 Java 成为一个跨平台的编程语言，只需要编写一次代码，就可以在多个平台上运行。</li>\n<li><strong>面向对象（Object-Oriented）</strong>：Java 是一种面向对象的编程语言，它支持面向对象编程的特性，如封装、继承和多态。这有助于组织和管理复杂的代码和数据。</li>\n<li><strong>简单性（Simplicity）</strong>：Java 的语法设计相对简单明了，易于学习和使用。它删除了许多容易引起错误的复杂功能，同时提供了强大的标准库。</li>\n<li><strong>健壮性（Robustness）</strong>：Java 提供了内置的错误检查和异常处理机制，有助于编写健壮的代码。它还通过垃圾回收机制管理内存，减少了内存泄漏的风险。</li>\n<li><strong>安全性（Security）</strong>：Java 在安全性方面有很多内置特性。例如，它可以防止未经授权的访问和执行，提供了安全的网络通信和文件访问机制。</li>\n<li><strong>多线程支持（Multithreading）</strong>：Java 内置了多线程支持，使得开发多线程应用程序变得相对容易。多线程可以提高程序的并发性能。</li>\n<li><strong>高性能（High Performance）</strong>：虽然 Java 是解释性语言，但它通过即时编译器（Just-In-Time Compiler，JIT Compiler）将字节码转化为本机机器代码，提高了执行速度。此外，Java 的运行时环境（JRE）经过优化，具有高效的垃圾回收机制和内存管理。</li>\n<li><strong>大型标准库（Rich Standard Library）</strong>：Java 提供了丰富的标准库，包含了各种类和方法，用于执行各种任务，从文件操作到网络通信，从数据库访问到用户界面开发。</li>\n<li><strong>开源社区支持（Open Source Community）</strong>：Java 拥有庞大的开源社区，这意味着有大量的开源库和框架可供使用，能够加速应用程序的开发。</li>\n</ol>\n<p>总之，Java 是一种强大且多用途的编程语言，适用于各种不同类型的应用程序，从移动应用到企业级应用都有广泛的应用。其跨平台性、可靠性、安全性和性能等特点使其成为一种流行的编程语言。</p>\n</li>\n<li>\n<p><strong>Java 中的四种访问修饰符是什么？</strong></p>\n<p>在 Java 中，有四种主要的访问修饰符，用于控制类、方法、变量和其他类成员的访问权限。这些修饰符包括：</p>\n<ol>\n<li><strong>public（公共）</strong>：public 是最宽松的访问修饰符。使用 public 修饰的类、方法或变量可以被任何其他类访问，无论这些类是否在同一包内，甚至是否在不同的包内。public 成员对外部代码是可见的。</li>\n<li><strong>private（私有）</strong>：private 是最严格的访问修饰符。使用 private 修饰的类成员只能在包含该成员的类内部访问，其他类无法访问它。这种封装性有助于隐藏类的内部实现细节。</li>\n<li><strong>protected（受保护的）</strong>：protected 修饰符用于限制成员的访问范围，但相对于 private，它更宽松一些。protected 成员可以被定义在同一包内的类访问，也可以被继承自该类的子类访问，即使这些子类位于不同的包中。</li>\n<li><strong>默认（不加修饰符）</strong>：如果一个成员没有显式地使用 public、private 或 protected 进行修饰，它就具有默认的访问权限，也被称为包访问权限。默认访问权限仅限于同一包内的类可以访问该成员，而其他包中的类无法访问。</li>\n</ol>\n<p>这些访问修饰符允许程序员控制类成员的可见性和访问权限，从而实现封装、继承和多态等面向对象编程的特性。通过选择适当的访问修饰符，可以确保代码的安全性和可维护性。</p>\n</li>\n<li>\n<p><strong>什么是面向对象编程（OOP）？</strong></p>\n<p>面向对象编程（Object-Oriented Programming，简称 OOP）是一种常用于软件开发的编程范式或方法论。它的核心思想是将现实世界中的事物抽象为对象，然后通过对象之间的交互来实现程序的设计和编码。面向对象编程的主要概念包括以下几个方面：</p>\n<ol>\n<li><strong>对象（Object）</strong>：对象是面向对象编程的基本单元，它代表了现实世界中的某个具体事物或抽象概念。每个对象都有状态（属性或数据）和行为（方法或函数）。</li>\n<li><strong>类（Class）</strong>：类是对象的模板或蓝图，它定义了对象的共同属性和行为。类可以看作是一种用户自定义的数据类型。</li>\n<li><strong>封装（Encapsulation）</strong>：封装是将数据和方法打包到一个类中，并将类的内部细节隐藏起来，只暴露必要的接口给外部。这有助于数据的安全性和代码的模块化。</li>\n<li><strong>继承（Inheritance）</strong>：继承允许一个类从另一个类继承属性和方法。子类（派生类）可以继承父类（基类）的特性，并可以在其基础上添加新的属性和行为。</li>\n<li><strong>多态（Polymorphism）</strong>：多态允许不同类的对象对相同的方法做出不同的响应。这使得程序可以根据实际对象的类型来动态选择方法的调用，提高了代码的灵活性。</li>\n</ol>\n<p>面向对象编程的优点包括：</p>\n<ul>\n<li>模块化：将代码划分为独立的类和对象，便于管理和维护。</li>\n<li>可重用性：可以通过继承和多态实现代码的重用。</li>\n<li>扩展性：可以通过添加新的类和对象来扩展程序的功能。</li>\n<li>抽象性：可以将现实世界中的复杂问题抽象为简单的对象和类。</li>\n<li>面向对象编程语言如 Java、C++、Python 等广泛应用于软件开发领域，它们提供了丰富的工具和特性，支持面向对象编程的实践。</li>\n</ul>\n</li>\n<li>\n<p><strong>什么是多态性（Polymorphism）？</strong></p>\n<p>多态性（Polymorphism）是面向对象编程中的一个重要概念，它指的是对象可以根据其实际类型表现出多种不同的行为或形态的能力。多态性允许不同类的对象对相同的方法或操作做出不同的响应，这样可以提高代码的灵活性和可扩展性。</p>\n<p>多态性主要有两种实现方式：</p>\n<ol>\n<li>\n<p><strong>编译时多态性（Compile-time Polymorphism）</strong>：也称为静态多态性。它发生在编译阶段，通常与函数重载（方法重载）相关。在编译时，编译器会根据方法的名称、参数列表或参数类型来确定调用哪个方法。编译时多态性是静态的，因为在编译时就能够确定调用哪个方法。</p>\n<p>例如，Java 中的方法重载就是一种编译时多态性的体现。</p>\n</li>\n<li>\n<p><strong>运行时多态性（Runtime Polymorphism）</strong>：也称为动态多态性。它发生在程序运行时，通常与方法的重写（覆盖）和继承相关。在运行时，根据实际对象的类型来决定调用哪个方法。运行时多态性是动态的，因为它需要在程序运行时才能够确定。</p>\n<p>例如，Java 中的方法重写（覆盖）和接口的实现就是一种运行时多态性的体现。在运行时，子类对象可以替代父类对象，以一种更具体的方式来实现相同的方法。</p>\n</li>\n</ol>\n<p>多态性的优点包括：</p>\n<ul>\n<li>灵活性：允许使用通用的代码来处理不同类型的对象。</li>\n<li>可扩展性：可以轻松添加新的子类或扩展现有类的功能。</li>\n<li>代码重用：通过接口和抽象类可以实现代码的重用。</li>\n</ul>\n<p>多态性是面向对象编程的一个重要特性，它有助于提高代码的可维护性和可扩展性，同时使代码更加通用和灵活。</p>\n</li>\n<li>\n<p><strong>Java 中的异常处理机制是什么？</strong></p>\n<p>Java 中的异常处理机制是一种用于处理程序执行期间可能出现的错误或异常情况的机制。异常是指程序在执行过程中遇到的不正常或错误的情况，例如除以零、空指针引用等。Java 提供了强大的异常处理机制，使程序员能够更好地管理和处理这些异常情况，以避免程序崩溃或产生不可预测的结果。</p>\n<p>以下是 Java 中异常处理机制的关键要点：</p>\n<ol>\n<li>\n<p><strong>异常类（Exception Class）</strong>：Java 中的异常是用类表示的，每种异常情况都有对应的异常类。异常类是 Throwable 类的子类，分为两种类型：受检查异常（Checked Exception）和非受检查异常（Unchecked Exception）。</p>\n<ul>\n<li>受检查异常：必须在代码中显式地捕获或声明，否则无法通过编译。通常表示一些可预测的错误，如文件不存在或网络连接中断。</li>\n<li>非受检查异常：不要求显式捕获或声明，通常是 RuntimeException 及其子类。表示一些编程错误，如空指针异常或数组越界异常。</li>\n</ul>\n</li>\n<li>\n<p><strong>try-catch 语句块</strong>：用于捕获和处理异常的关键结构。在 try 块中编写可能引发异常的代码，然后在 catch 块中指定处理异常的代码。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 可能引发异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionType</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 处理异常的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>finally 块</strong>：可选的 finally 块用于指定无论是否发生异常都会执行的代码。通常用于资源清理，如关闭文件或释放资源。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 可能引发异常的代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">ExceptionType</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 处理异常的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 无论是否发生异常，都会执行的代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>抛出异常</strong>：使用 <code>throw</code>  关键字手动抛出异常。可以创建自定义异常类，并在需要时抛出。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"This is a custom exception.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>自定义异常</strong>：除了 Java 提供的异常类，程序员可以创建自定义异常类来表示特定的异常情况。自定义异常类通常继承自 <code>Exception</code>  或其子类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomException</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 构造函数和其他方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>Java 的异常处理机制使程序员能够更好地识别、处理和记录异常情况，从而提高了程序的稳定性和可维护性。通过合理地使用 try-catch 块、自定义异常和 finally 块，可以更好地管理和处理各种异常情况。</p>\n</li>\n<li>\n<p><strong>什么是 Java 的自动装箱和拆箱？</strong></p>\n<p>Java 的自动装箱（Autoboxing）和拆箱（Unboxing）是 Java 语言的一项特性，用于在基本数据类型（如 int、double）和对应的包装类（如 Integer、Double）之间进行转换。这个特性使得编程更加方便，不再需要手动进行类型转换。</p>\n<p>下面分别解释自动装箱和拆箱：</p>\n<ol>\n<li>\n<p><strong>自动装箱（Autoboxing）</strong>：自动装箱是指将基本数据类型转换为对应的包装类对象，这个过程是自动进行的。例如，将 int 类型的值赋给 Integer 对象，编译器会自动进行装箱。</p>\n<pre><code>javaCopy codeint primitiveInt = 42;\nInteger boxedInt = primitiveInt; // 自动装箱\n</code></pre>\n<p>在这个例子中， <code>primitiveInt</code>  是基本的 int 类型，但它可以自动装箱为 <code>boxedInt</code> ，变成了 Integer 对象。</p>\n</li>\n<li>\n<p><strong>自动拆箱（Unboxing）</strong>：自动拆箱是指将包装类对象转换为基本数据类型，也是自动进行的。例如，将 Integer 对象的值赋给 int 类型的变量，编译器会自动进行拆箱。</p>\n<pre><code>javaCopy codeInteger boxedInt = 42;\nint primitiveInt = boxedInt; // 自动拆箱\n</code></pre>\n<p>在这个例子中， <code>boxedInt</code>  是 Integer 对象，但它可以自动拆箱为 <code>primitiveInt</code> ，变成了 int 类型的值。</p>\n</li>\n</ol>\n<p>自动装箱和拆箱提高了 Java 代码的可读性和简洁性，不需要显式地调用 <code>intValue()</code> 、 <code>doubleValue()</code>  等方法来进行类型转换。这个特性在集合类（如 ArrayList）中尤其有用，因为集合类通常要求存储的是对象而不是基本数据类型。在 Java 5 及以后的版本中引入了自动装箱和拆箱功能。</p>\n</li>\n<li>\n<p><strong>什么是 Java 的集合框架？</strong><br />\nJava 的集合框架（Collection Framework）是一组用于存储和操作对象的类和接口。它提供了一种统一的方式来管理和操作各种数据集合，如列表、集合、映射等。Java 集合框架的主要目标是提供高性能、高可扩展性、高可用性和类型安全的数据结构。</p>\n<p>Java 集合框架的主要特点包括：</p>\n<ol>\n<li><strong>接口和实现类</strong>：集合框架定义了一组接口，包括 <code>List</code> 、 <code>Set</code> 、 <code>Map</code>  等，以及许多具体的实现类，如 <code>ArrayList</code> 、 <code>HashSet</code> 、 <code>HashMap</code>  等。这种分离的设计允许开发人员根据需求选择适当的数据结构。</li>\n<li><strong>通用性</strong>：Java 集合框架支持泛型，允许您在集合中存储特定类型的对象，提高了类型安全性。</li>\n<li><strong>高性能</strong>：集合框架中的数据结构经过精心设计和优化，以提供高性能的数据访问和操作。</li>\n<li><strong>多线程支持</strong>：集合框架包括线程安全的集合类，可以在多线程环境中使用，如 <code>ConcurrentHashMap</code> 。</li>\n<li><strong>可扩展性</strong>：集合框架支持可扩展的接口和类，允许开发人员创建自定义的集合类型。</li>\n<li><strong>算法</strong>：集合框架提供了各种算法和方法，如排序、搜索和遍历，使数据操作更加方便。</li>\n<li><strong>互操作性</strong>：集合框架允许不同实现的集合之间进行互操作，以及与数组之间的互操作。</li>\n<li><strong>异常处理</strong>：集合框架定义了一些异常，如 <code>NullPointerException</code>  和 <code>ConcurrentModificationException</code> ，以帮助开发人员识别和处理常见的问题。</li>\n</ol>\n<p>Java 集合框架是 Java 编程中非常重要的一部分，几乎每个 Java 程序都会用到它，无论是开发桌面应用程序、Web 应用程序还是后端服务。通过选择适当的集合类型，开发人员可以更轻松地实现各种数据操作和算法，并提高代码的可维护性和可读性。</p>\n</li>\n<li>\n<p><strong>什么是 Java 线程？如何创建和启动线程？</strong></p>\n<p>Java 线程是 Java 编程语言中用于实现多任务并发执行的基本单元。线程是程序的执行路径，每个线程都是独立运行的，可以同时执行不同的任务。Java 的多线程编程允许程序在同一进程中创建多个线程，这些线程可以并发执行，提高程序的性能和响应能力。</p>\n<p>要创建和启动线程，可以使用 Java 的两种方法：</p>\n<ol>\n<li>\n<p><strong>继承 Thread 类</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个继承自 Thread 类的新类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyThread</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 线程执行的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程运行中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 在主程序中创建并启动线程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">MyThread</span> myThread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建线程对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    myThread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>实现 Runnable 接口</strong>：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义一个实现 Runnable 接口的类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyRunnable</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 线程执行的代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"线程运行中...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 在主程序中创建并启动线程</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">MyRunnable</span> myRunnable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyRunnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 Runnable 对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Thread</span> thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>myRunnable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建线程，将 Runnable 对象传递给线程</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    thread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 启动线程</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>以上两种方式都可以创建并启动线程，但一般来说，推荐使用第二种方式，实现 Runnable 接口，因为这种方式更加灵活，允许多个线程共享同一个 Runnable 对象，降低了资源消耗。</p>\n<p>线程一旦启动，它会执行 <code>run()</code>  方法中的代码，您可以在 <code>run()</code>  方法中编写线程的主要逻辑。线程的执行是异步的，多个线程可以同时运行，因此要小心处理多线程之间的共享数据和同步问题，以避免竞态条件和数据不一致性的问题。在 Java 中，可以使用 <code>synchronized</code>  关键字和其他同步工具来实现线程之间的同步。</p>\n</li>\n<li>\n<p><strong>什么是 Java 的同步机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 final 关键字有什么用途？</strong></p>\n</li>\n<li>\n<p><strong>Java 中如何实现多线程？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的垃圾回收机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的静态方法和实例方法有何区别？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的反射（Reflection）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的抽象类和接口有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 equals () 和 hashCode () 方法有何作用？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的异常处理机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的序列化是什么？如何实现对象的序列化和反序列化？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的泛型（Generics）是什么？有什么作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 Lambda 表达式是什么？有什么作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的重载和重写有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 String 和 StringBuffer（或 StringBuilder）有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的静态块（static block）有何作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常分类及继承关系是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的装箱和拆箱是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的枚举（Enum）是什么？有什么用途？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 finalize () 方法有何作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的注解是什么？有哪些内置注解？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的内部类有哪些类型？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 ClassLoader 是什么？有哪些类加载器？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 中的泛型（Generics）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的多态（Polymorphism）是什么？如何实现多态？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的集合框架（Collections Framework）包括哪些主要接口和类？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的序列化（Serialization）是什么？如何实现对象的序列化和反序列化？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常处理机制是怎样的？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的线程安全是什么？如何实现线程安全？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的反射（Reflection）是什么？如何使用反射获取类的信息和调用方法？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 JVM（Java 虚拟机）是什么？它的作用是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 Lambda 表达式是什么？它的作用是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的数据类型有哪些？基本数据类型和引用数据类型有什么区别？</strong></p>\n</li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "JavaSE",
                "Java开发面试题"
            ]
        }
    ]
}