{
    "version": "https://jsonfeed.org/version/1",
    "title": "沉鱼的博客",
    "subtitle": "了解自我，超越自我",
    "icon": "http://scottalive.github.io/images/favicon.ico",
    "description": "编程笔记 & 资料分享",
    "home_page_url": "http://scottalive.github.io",
    "items": [
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/",
            "title": "查找算法",
            "date_published": "2023-09-20T20:47:00.000Z",
            "content_html": "<h3 id=\"二分查找法\"><a class=\"anchor\" href=\"#二分查找法\">#</a> 二分查找法</h3>\n<p><code>思路：</code> 先将列表中间的元素与要查找的元素比较，如果相等直接返回，如果大了，将中间元素后面的列表元素排除，再在列表开始到列表中间元素之间进行相同操作，直到查找到匹配的元素。</p>\n<p>时间复杂度：O (log2 n)</p>\n<p><code>代码：</code></p>\n<p>java:</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方法一：递归</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">+</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>low<span class=\"token punctuation\">,</span>mid<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">binarySearch</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>target<span class=\"token punctuation\">,</span>mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 方法二：循环</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">binarySearch2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low<span class=\"token operator\">&lt;=</span>high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token keyword\">return</span> low<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">return</span> high<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>            <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">+</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">return</span> mid<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                high <span class=\"token operator\">=</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                low <span class=\"token operator\">=</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>python:</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 二分查找中，数组必须是有序的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 方法一：采用递归的方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\"># 如果 start 索引下的元素就是目标元素，直接返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>start<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> start</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\"># 如果 end 索引下的元素就是目标元素，直接返回</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>end<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> end</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\"># 取中间的元素 为什么是 (end + start) / 2？因为当 start>0 时，中间的索引必须是 (end - start) / 2 + start = (end + start) / 2，必须要加上 start, 否则递归会溢出，无限递归下去。</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    mid <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">+</span> start<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\"># 如果中间的元素是目标元素则直接返回</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> mid</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 如果中间元素大于目标元素，则递归调用，将 end 设置成中间索引减 1，即 mid - 1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> start<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># 如果中间元素小于目标元素，则递归调用，将 start 设置成中间索引加 1，即 mid+ 1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> binary_search<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> mid <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> end<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\"># 方法二：采用循环的方式</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">binary_search_2</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">:</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    low <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    high <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">while</span> low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token keyword\">return</span> low</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            <span class=\"token keyword\">return</span> high</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        mid <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>low <span class=\"token operator\">+</span> high<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        guess <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">==</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">return</span> mid</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">></span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            low <span class=\"token operator\">=</span> low <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> guess <span class=\"token operator\">&lt;</span> target<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            high <span class=\"token operator\">=</span> high <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "编程笔记",
                "算法"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/",
            "title": "力扣算法题-3-无重复字符的最长子串",
            "date_published": "2023-09-18T21:54:00.000Z",
            "content_html": "<h2 id=\"无重复字符的最长子串\"><a class=\"anchor\" href=\"#无重复字符的最长子串\">#</a> 无重复字符的最长子串</h2>\n<p>给定一个字符串  <code>s</code>  ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p>\n<p><strong>示例 1:</strong></p>\n<pre><code>输入: s = &quot;abcabcbb&quot;\n输出: 3 \n解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。\n</code></pre>\n<p><strong>示例 2:</strong></p>\n<pre><code>输入: s = &quot;bbbbb&quot;\n输出: 1\n解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。\n</code></pre>\n<p><strong>示例 3:</strong></p>\n<pre><code>输入: s = &quot;pwwkew&quot;\n输出: 3\n解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。\n     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>0 &lt;= s.length &lt;= 5 * 104</code></li>\n<li><code>s</code>  由英文字母、数字、符号和空格组成</li>\n</ul>\n<p><strong>解法</strong></p>\n<p><strong>思路：</strong><br />\n这道题主要用到思路是：滑动窗口</p>\n<p>什么是滑动窗口？</p>\n<p>其实就是一个队列，比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p>\n<p>如何移动？</p>\n<p>我们只要把队列的左边的元素移出就行了，直到满足题目要求！</p>\n<p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p>\n<p>时间复杂度：O (n)</p>\n<h2 id=\"代码\"><a class=\"anchor\" href=\"#代码\">#</a> 代码：</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">lengthOfLongestSubstring</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Character</span><span class=\"token punctuation\">,</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">int</span> left <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                left <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">,</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            map<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            max <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">,</span>i<span class=\"token operator\">-</span>left<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "力扣算法题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/2-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-%E4%B8%AD%E7%AD%89/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/2-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-%E4%B8%AD%E7%AD%89/",
            "title": "力扣算法题-2-两数相加",
            "date_published": "2023-09-18T21:43:00.000Z",
            "content_html": "<h2 id=\"力扣算法题-2-两数相加\"><a class=\"anchor\" href=\"#力扣算法题-2-两数相加\">#</a> 力扣算法题 - 2 - 两数相加</h2>\n<p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p>\n<p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p>\n<p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>\n<p><strong>示例 1：</strong></p>\n<p><img data-src=\"https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg\" alt=\"img\" /></p>\n<pre><code>输入：l1 = [2,4,3], l2 = [5,6,4]\n输出：[7,0,8]\n解释：342 + 465 = 807.\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：l1 = [0], l2 = [0]\n输出：[0]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]\n输出：[8,9,9,9,0,0,0,1]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li>每个链表中的节点数在范围  <code>[1, 100]</code>  内</li>\n<li><code>0 &lt;= Node.val &lt;= 9</code></li>\n<li>题目数据保证列表表示的数字不含前导零</li>\n</ul>\n<p>解法：</p>\n<p><strong>思路</strong></p>\n<ul>\n<li>标签：链表</li>\n<li>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 000，比如 987 + 23 = 987 + 023 = 1010</li>\n<li>每一位计算的同时需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值<br />\n如果两个链表全部遍历完毕后，进位值为 111，则在新链表最前方添加节点 1</li>\n<li>小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点 head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。</li>\n</ul>\n<p><strong>代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * public class ListNode &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *     ListNode next;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *     ListNode(int x) &#123; val = x; &#125;</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ListNode</span> <span class=\"token function\">addTwoNumbers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ListNode</span> l1<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ListNode</span> l2<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> pre <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token class-name\">ListNode</span> cur <span class=\"token operator\">=</span> pre<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">int</span> carry <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> l1 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l1<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> l2 <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> l2<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> carry<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            carry <span class=\"token operator\">=</span> sum <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            cur <span class=\"token operator\">=</span> cur<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                l1 <span class=\"token operator\">=</span> l1<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l2 <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                l2 <span class=\"token operator\">=</span> l2<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>carry <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            cur<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ListNode</span><span class=\"token punctuation\">(</span>carry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> pre<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "力扣算法题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/1-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E7%AE%80%E5%8D%95/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/1-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E7%AE%80%E5%8D%95/",
            "title": "力扣算法题-1-两数之和",
            "date_published": "2023-09-18T21:22:00.000Z",
            "content_html": "<h2 id=\"两数之和\"><a class=\"anchor\" href=\"#两数之和\">#</a> 两数之和</h2>\n<h3 id=\"两数之和-2\"><a class=\"anchor\" href=\"#两数之和-2\">#</a> 两数之和</h3>\n<p>给定一个整数数组  <code>nums</code>  和一个整数目标值  <code>target</code> ，请你在该数组中找出 <strong>和为目标值</strong> <em> <code>target</code> </em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p>\n<p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p>\n<p>你可以按任意顺序返回答案。</p>\n<p><strong>示例 1：</strong></p>\n<pre><code>输入：nums = [2,7,11,15], target = 9\n输出：[0,1]\n解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。\n</code></pre>\n<p><strong>示例 2：</strong></p>\n<pre><code>输入：nums = [3,2,4], target = 6\n输出：[1,2]\n</code></pre>\n<p><strong>示例 3：</strong></p>\n<pre><code>输入：nums = [3,3], target = 6\n输出：[0,1]\n</code></pre>\n<p><strong>提示：</strong></p>\n<ul>\n<li><code>2 &lt;= nums.length &lt;= 104</code></li>\n<li><code>-109 &lt;= nums[i] &lt;= 109</code></li>\n<li><code>-109 &lt;= target &lt;= 109</code></li>\n<li><strong>只会存在一个有效答案</strong></li>\n</ul>\n<p>** 进阶：** 你可以想出一个时间复杂度小于  <code>O(n2)</code>  的算法吗？</p>\n<p><strong>解法：</strong></p>\n<p>方法一：暴力枚举<br />\n思路及算法</p>\n<p>最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。</p>\n<p>当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。</p>\n<p>代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">int</span> n <span class=\"token operator\">=</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> nums<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度：O (N2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p>\n<p>空间复杂度：O (1)。</p>\n<p>方法二：哈希表<br />\n思路及算法</p>\n<p>注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p>\n<p>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O (N) 降低到 O (1)。</p>\n<p>这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p>\n<p>代码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">twoSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> nums<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> target<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">Map</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> hashtable <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HashMap</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">containsKey</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">&#123;</span>hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>target <span class=\"token operator\">-</span> nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            hashtable<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p>\n<p>时间复杂度：O (N)，其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 O (1) 地寻找 target - x。</p>\n<p>空间复杂度：O (N)，其中 N 是数组中的元素数量。主要为哈希表的开销。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "力扣算法题"
            ]
        },
        {
            "id": "http://scottalive.github.io/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/",
            "url": "http://scottalive.github.io/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/",
            "title": "坏习惯",
            "date_published": "2023-09-17T11:36:00.000Z",
            "content_html": "<h3 id=\"九种弱者习惯\"><a class=\"anchor\" href=\"#九种弱者习惯\">#</a> 九种弱者习惯</h3>\n<p>一、九种弱者习惯，包括爱找借口、缺乏胆识、犹豫不决等，提醒读者要养成优秀的习惯，不断成长进步。</p>\n<ul>\n<li>习惯不好消耗生命，好习惯塑造自己</li>\n<li>摒弃消极的念头，主动调整一个个微小的行为</li>\n<li>去爱、攀山、追梦，去尝试，去尝试，去尝试</li>\n</ul>\n<p>二、犹豫、学习、拖延等现代职场中的常见问题，并给出了解决方案，鼓励人们积极行动，终身学习，克服拖延症。</p>\n<ul>\n<li>犹豫不决，害怕失败，浪费时间</li>\n<li>不懂得学习，抛弃旧技能，容易被取代</li>\n<li>拖延症会侵蚀人生，尝试 5 分钟定律</li>\n</ul>\n<p>三、避免生活和工作中的七种常见问题，如拖延症、缺乏恒心、害怕拒绝等，提出了解决方案，帮助人们更好地面对生活中的挑战。</p>\n<ul>\n<li>拖延会消耗生命，提前投入做事</li>\n<li>成功的人有恒心，不要半途而废</li>\n<li>人生的目标由自己定，不要习惯待在舒适区</li>\n</ul>\n<p>四、九种弱者习惯，包括懒惰、逃避现实等，并强调了积极面对生活的重要性，只有戒掉这些习惯才能迈向更好的未来。</p>\n<ul>\n<li>逃避现实会导致内心脆弱，生活也会加倍的报复回来</li>\n<li>不断拥抱新的挑战，熬过一次次痛苦的蜕变，才能向更好的生活靠近</li>\n<li>主动调整微小行为，改写自己的命运，把每一天过得充实而有意义</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtrNHkxUDdzby8/c3BtX2lkX2Zyb209MzMzLjEwMDcudGlhbm1hLjEtMS0xLmNsaWNrJmFtcDt2ZF9zb3VyY2U9ZjllZWRmOTgzNzhhYTc3ZWIzNTZkMzM0M2JiYmU2MDE=\">原文视频来源地址</span></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "生活习惯",
                "个人分享",
                "坏习惯"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/",
            "title": "初识Nacos",
            "date_published": "2023-09-01T01:17:00.000Z",
            "content_html": "<h2 id=\"初识nacos\"><a class=\"anchor\" href=\"#初识nacos\">#</a> 初识 Nacos</h2>\n<h3 id=\"nacos安装\"><a class=\"anchor\" href=\"#nacos安装\">#</a> Nacos 安装</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://scottalive.github.io/computer-science/java/arithmetic/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2023-08-30T03:07:00.000Z",
            "content_html": "<h2 id=\"排序算法\"><a class=\"anchor\" href=\"#排序算法\">#</a> 排序算法</h2>\n<h3 id=\"冒泡排序法\"><a class=\"anchor\" href=\"#冒泡排序法\">#</a> 冒泡排序法</h3>\n<h3 id=\"选择排序法\"><a class=\"anchor\" href=\"#选择排序法\">#</a> 选择排序法</h3>\n<p><code>思路：</code> 选择一个元素作为最小元素（一般是第一个），然后将这个元素与数组其他元素进行比较，如果比它还小则将其最小元素赋值给它，比较完一轮后，将这个最小元素放入到新数组（排序好的数组）并从原数组剔除出去，如此反复操作 n 轮</p>\n<p>** 时间复杂度:**O (n²)</p>\n<p><code>代码：</code></p>\n<p><code>java</code> :</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 寻找最小元素</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @param arr 数组</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     * @return 最小元素索引</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">findSmallest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> smallest_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> smallest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                smallest_index <span class=\"token operator\">=</span> i <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> smallest_index<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 返回去除元素的新数组</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param arr 原数组</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @param element_index 最小元素索引</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * @return 新数组</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> element_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">,</span>j <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">!=</span>element_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                array<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     * 选择排序算法</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     * @param arr 原数组</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     * @return 排序好的新数组</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">chooseSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>newArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>        <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">int</span> smallest_index <span class=\"token operator\">=</span> <span class=\"token function\">findSmallest</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            newArr<span class=\"token punctuation\">[</span>index<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>smallest_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            arr <span class=\"token operator\">=</span> <span class=\"token function\">removeElement</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">,</span>smallest_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> newArr<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>python</code> :</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 寻找最小元素，并返回最小元素索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">find_smallest</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    smallest_index <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> smallest<span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            smallest <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            smallest_index <span class=\"token operator\">=</span> i</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> smallest_index</pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\"># 选择排序法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">choose_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    sort_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        smallest_index <span class=\"token operator\">=</span> find_smallest<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        sort_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span>smallest_index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> sort_list</pre></td></tr></table></figure><h3 id=\"快速排序法\"><a class=\"anchor\" href=\"#快速排序法\">#</a> 快速排序法</h3>\n<p>** 思路:** 选择数组中的一个元素作为基准元素，然后将其他元素与其比较，如果小的放入左边一个数组，如果大的放入右边的数组，反复操作，直至子数组只有 0 个或者 1 个元素为止。</p>\n<p><strong>时间复杂度</strong>：O (nlogn)</p>\n<p><code>python</code> :</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 快速排序法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 思路：选择数组中的一个元素作为基准元素，然后将其他元素与其比较，如果小的放入左边一个数组，如果大的放入右边的数组，反复操作，直至子数组只有 0 个或者 1 个元素为止</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 这种思路可以使用递归的方式来做，将数组只有 0 个或者 1 个元素作为递归终止条件，后面再做归纳 --- 选择基准元素和子数组递归。</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 快速排序法</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">def</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\"># 如果数组长度小于 2，则直接返回数组</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> arr</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\"># 将数组第一个元素作为基准元素</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    pivot <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\"># 生成小于等于基准元素的子数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    less <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">&lt;=</span> pivot<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\"># 生成大于基准元素的子数组</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    right <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>i <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">if</span> i <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\"># 合并数组</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> quick_sort<span class=\"token punctuation\">(</span>less<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">[</span>pivot<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> quick_sort<span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>quick_sort<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "算法",
                "编程笔记",
                "算法"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Ribbon负载均衡",
            "date_published": "2023-08-30T02:17:00.000Z",
            "content_html": "<h2 id=\"ribbon负载均衡\"><a class=\"anchor\" href=\"#ribbon负载均衡\">#</a> Ribbon 负载均衡</h2>\n<h3 id=\"负载均衡原理\"><a class=\"anchor\" href=\"#负载均衡原理\">#</a> 负载均衡原理</h3>\n<p>规则接口是<strong> IRule</strong><br />\n 默认实现是<strong> ZoneAvoidanceRule</strong>，根据<strong> zone</strong> 选择服务列表，然后轮询</p>\n<h3 id=\"负载均衡策略\"><a class=\"anchor\" href=\"#负载均衡策略\">#</a> 负载均衡策略</h3>\n<p>代码方式：配置灵活，但修改时需要重新打包布<br />\n配置方式：直观，方便，无需重新打包发布但是无法做全局配置</p>\n<h3 id=\"懒加载\"><a class=\"anchor\" href=\"#懒加载\">#</a> 懒加载</h3>\n<p>开启饥饿加载<br />\n指定饥饿加载的微服务名称</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/",
            "title": "Eureka注册中心",
            "date_published": "2023-08-30T01:17:00.000Z",
            "content_html": "<h2 id=\"eureka注册中心\"><a class=\"anchor\" href=\"#eureka注册中心\">#</a> Eureka 注册中心</h2>\n<h3 id=\"服务调用出现的问题\"><a class=\"anchor\" href=\"#服务调用出现的问题\">#</a> 服务调用出现的问题</h3>\n<ul>\n<li>服务消费者该如何获取服务提供这的地址信息？</li>\n<li>如果有多个服务提供者，消费者该如何选择？</li>\n<li>消费者如何得知服务提供这的健康状态？</li>\n</ul>\n<h3 id=\"eureka的作用\"><a class=\"anchor\" href=\"#eureka的作用\">#</a> Eureka 的作用</h3>\n<ul>\n<li>消费者该如何获取服务提供者的具体信息？\n<ul>\n<li>服务提供者启动时向 Eureka 注册自己的信息</li>\n<li>eureka 保存这些信息</li>\n<li>消费者根据服务名称向 eureka 拉取提供者信息</li>\n</ul>\n</li>\n<li>如果有多个服务提供者，消费者该如何选择？\n<ul>\n<li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li>\n</ul>\n</li>\n<li>消费者该如何感知服务提供者健康状态？\n<ul>\n<li>服务提供者会每 30 秒向 EurekaServer 发送心跳请求，报告健康状态</li>\n<li>eureka 会更新服务列表信息，心跳不正常会被剔除</li>\n<li>消费者就可以拉取到最新的信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"搭建eureka服务注册中心\"><a class=\"anchor\" href=\"#搭建eureka服务注册中心\">#</a> 搭建 Eureka 服务注册中心</h3>\n<ol>\n<li>\n<p>引入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>eureka<span class=\"token operator\">-</span>server<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写启动类，并在启动类添加 **@EnableEurekaServer** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaServer</span> <span class=\"token comment\">// 添加注解</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件上添加 eureka 服务器地址信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka <span class=\"token comment\">#注册中心地址</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"搭建eureka客户端中心\"><a class=\"anchor\" href=\"#搭建eureka客户端中心\">#</a> 搭建 Eureka 客户端中心</h3>\n<ol>\n<li>\n<p>引入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>eureka<span class=\"token operator\">-</span>client<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写启动类，并在启动类上添加 **@EnableEurekaClient** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.itcast.user.mapper\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span> <span class=\"token comment\">// 添加注解开启服务注册</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件上写明 Eureka 服务端的地址信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> userservice <span class=\"token comment\"># user 服务的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">## eureka 服务中心</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka</pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"eureka服务发现拉取\"><a class=\"anchor\" href=\"#eureka服务发现拉取\">#</a> Eureka 服务发现 / 拉取</h3>\n<ol>\n<li>\n<p>前提：完成 Eureka 服务端和 Eureka 客户端的搭建，并且服务中心可以看到这些注册到 Eureka 的服务</p>\n</li>\n<li>\n<p>在原来<strong> RestTemplate</strong> 上加入 **@LoadBalanced** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将原来使用 RestTemplate 发送 http 请求时写入的 ip 地址替换成 eureka 服务端中的服务名，即 spring.application.name 字段的名称</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2. 利用 restTemplate 发起 http 请求，查询用户 这里原来是 ip 地址，替换成服务名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://userservice/user/\"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/",
            "url": "http://scottalive.github.io/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/",
            "title": "认识微服务",
            "date_published": "2023-08-30T00:04:00.000Z",
            "content_html": "<h2 id=\"认识微服务\"><a class=\"anchor\" href=\"#认识微服务\">#</a> 认识微服务</h2>\n<p>微服务是一种经过良好架构设计的<strong>分布式</strong>架构方案，微服务架构特征：</p>\n<ul>\n<li>单一职责：微服务拆分力度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发。</li>\n<li>面向服务：微服务对外暴露业务接口。</li>\n<li>自治：团队独立、技术独立、数据独立、部署独立。</li>\n<li>隔离性强：服务调用做好隔离、容错、降级、避免级联现象。</li>\n</ul>\n<h3 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题：</h3>\n<p>单体架构与分布式架构的区别？</p>\n<ul>\n<li>单体架构特点：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</li>\n<li>分布式架构特点：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东，淘宝。</li>\n</ul>\n<p>微服务：一种良好的分布式架构</p>\n<ul>\n<li>优点：拆分力度更小、服务更独立、耦合度更低</li>\n<li>缺点：架构非常复杂，运维、监控、部署难度提高</li>\n</ul>\n<h3 id=\"微服务结构\"><a class=\"anchor\" href=\"#微服务结构\">#</a> 微服务结构</h3>\n<p>微服务这种方案需要技术框架来落地，全球的互联网公司都在积极尝试自己的微服务落地技术。在国内最知名的就是 SpringCloud 和阿里巴巴的 Dubbo。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8d49661c6c8e54729987.jpg\" alt=\"image-20230830082645810\" /></p>\n<h3 id=\"微服务技术对比\"><a class=\"anchor\" href=\"#微服务技术对比\">#</a> 微服务技术对比</h3>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8ec5661c6c8e547347d2.jpg%5B\" alt=\"\" /></p>\n<h3 id=\"企业需求\"><a class=\"anchor\" href=\"#企业需求\">#</a> 企业需求</h3>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8f18661c6c8e5473504b.jpg\" alt=\"\" /></p>\n<h3 id=\"springcloud\"><a class=\"anchor\" href=\"#springcloud\">#</a> SpringCloud</h3>\n<ul>\n<li><strong>SpringCloud</strong> 是目前国内使用最广泛的微服务架构。官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3Vk\">Spring Cloud</span></li>\n<li><strong>SpringCloud</strong> 集成了各种微服务功能组件，并基于<strong> SpringBoot</strong> 实现了这些组件的自动装配，从而提供了良好的开箱即用体验：</li>\n</ul>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee90d0661c6c8e54740733.jpg\" alt=\"微服务技术体系\" /></p>\n<h3 id=\"服务拆分与远程调用\"><a class=\"anchor\" href=\"#服务拆分与远程调用\">#</a> 服务拆分与远程调用</h3>\n<p><strong>服务拆分注意事项</strong></p>\n<ol>\n<li>不同微服务，不要重复开发相同业务</li>\n<li>微服务数据独立，不要访问其他微服务的数据库</li>\n<li>微服务可以将自己的业务暴露为接口，供其他微服务调用</li>\n</ol>\n<h3 id=\"微服务远程调用\"><a class=\"anchor\" href=\"#微服务远程调用\">#</a> 微服务远程调用</h3>\n<p><strong>提供者与消费者</strong></p>\n<ul>\n<li>\n<p>服务提供者：一次业务中，被其他为服务调用的服务。（提供接口给其他微服务）</p>\n</li>\n<li>\n<p>服务消费者：一次业务中，调用其他为服务的服务。（调用其他微服务提供的接口）</p>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://scottalive.github.io/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/",
            "url": "http://scottalive.github.io/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/",
            "title": "操纵性理学",
            "date_published": "2023-07-06T14:17:00.000Z",
            "content_html": "<h2 id=\"操纵心理学\"><a class=\"anchor\" href=\"#操纵心理学\">#</a> 操纵心理学</h2>\n<p><strong>不要相信” 都是为你好 “，拒绝做软柿子</strong></p>\n<p><strong>修炼你的心，懂得爱人，也要懂得爱自己</strong></p>\n<p><strong>你的人生应该永远由你来选择</strong></p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "心理学",
                "操纵心理学",
                "心理学知识"
            ]
        },
        {
            "id": "http://scottalive.github.io/introduction/%E5%8E%9F%E5%88%99/",
            "url": "http://scottalive.github.io/introduction/%E5%8E%9F%E5%88%99/",
            "title": "个人原则",
            "date_published": "2023-06-21T20:22:00.000Z",
            "content_html": "<h3 id=\"原则\"><a class=\"anchor\" href=\"#原则\">#</a> 原则</h3>\n<ul>\n<li>\n<p>生活态度</p>\n<ul>\n<li>\n<p>身体健康</p>\n<p><strong>身体健康乃是第一要素，所有的原则都要建立在身体健康上。</strong></p>\n<ol>\n<li>平时熬夜不得超过两点，保证睡眠充足。</li>\n<li>早上起床工作日在 8 点左右起来，休息日要在 10 点之前起来。</li>\n<li>平时加强锻炼，平时锻炼需要控制在 1 个小时左右，室内室外就行。</li>\n<li>饭菜不能过于重，需要合理膳食，荤素搭配，而且每天需要补充水果。</li>\n</ol>\n</li>\n<li>\n<p>心理健康</p>\n<p><strong>基于我经常内耗的情况，我需要适当性地进行心理上的培养</strong></p>\n<ol>\n<li>休息日必须要画上 2 个小时进行心理书籍阅读。</li>\n<li>工作日晚上睡觉时可以进行心理书籍阅读。</li>\n<li>内耗时必须要寻找事情做，听音乐和看视频。</li>\n<li>以正常合适的心态面对自己的各种情绪，不能因为某种情绪影响自己的状态就直接一刀切的忽视。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>人际关系</p>\n<ul>\n<li>\n<p>朋友关系</p>\n<p><strong>朋友关系是我一直以来十分重视的关系，但是自己却经常把它搞砸，来自于内心深处那喜欢责怪他人的怪异心理。</strong></p>\n<ol>\n<li>建立朋友关系前，需要了解他人的脾性，如果经常性对你沉默，忽略，必须要收住热情，不能再进行主动行为。</li>\n<li>由于建立的朋友关系大多是人走茶凉，所以，无论是对你多好的朋友，如果走后没有主动寻找过，都一律当做普通朋友，并以待之。</li>\n<li>当与朋友相处时，如果遇到三观不合的情况下，不可直接指出，一定要远离，但不可操之过急，需不引起注意远离。</li>\n<li>当与朋友相处时，如果遇到想做的事情可能遭受他的厌恶时，即当面骂人，无视风险，非他人所求就强行帮助（这点尤其注意），鉴于我的性格，我很容易在感到不适时，喜欢无视他人感受，无视所有风险，以个人感受为主要驱动来行动，我必须要改掉无视他人感受和风险，如果有这种想法，一定要旁敲侧击来询问他人建议，并非直接询问我的行为，而是表达情绪，即适当性抱怨他人忽略或者无视我的行为，适当表达出自己的不满，如果他人还是不管，3 次就可直接远离，切记不可摊牌翻脸，要循序渐进。</li>\n<li>与朋友相处时，遇到朋友嘲讽时，如果非常生气，不可以直接无视，将自己之前喜欢辩解，喜欢对喷的行为改为话语：烦死了、闭嘴、我想安静点。切勿真正动气来报复。</li>\n<li>不要主动窥探他人的生活，这点尤为重要，无论我多么寂寞，多么孤独，都不能主动地去窥探别人生活，或者主动性地进入别人生活。</li>\n<li>朋友心情低落时，如果自己想要帮助他人，将自己的行为看成普通帮助，不能将其当做自己的好，而且一定得面对面交流，即在尊重他人的情况下，再进行适当帮助。</li>\n</ol>\n</li>\n<li>\n<p>亲情关系</p>\n<ul>\n<li>\n<p>直系血缘关系（家人）</p>\n<ol>\n<li>关心家人必须建立在自己的状态良好的情况下，不能再将父母当做无话不说的对象，控制自己在父母面前抱怨的样子，收起自己遇到父母说话不符合自己三观的情况下驳斥，放下反驳的心态去面对家人，家人相处不是来辩论的，一切顺着他们来就行，听而不从，可以解决大部分问题。</li>\n<li>父亲是个十分强硬，执拗的人，一旦认定的观念就不可能改变，所以他说的话全可以当做他个人不得志的倾述，我只需要当个附和的旁人即可，无需去跟他辩解，反驳他的话，改变别人不是我的人生课题，一定要原谅别人的无知，别人的愚蠢，别人的冒犯，因为为别人的问题生气和纠正别人不是自己的课题。</li>\n<li>母亲是一个个性软弱，喜欢隐忍自己感受的人，她的性别十分恶劣，某种程度上，我的母亲带给我的影响大于父亲，所以遇到母亲在我面前歇斯底里地骂我不孝的情况，一定不要慌张，也不要辩解，如果可以的话，尽量避免这种情况即可。</li>\n<li>妹妹被我伤害的最多，所以我需要做的是做好哥哥该干的事，不要再用之前的脾气面对她，也不能在他面前与父母对峙，吵架，平时有时间就联系一下她也可以。</li>\n</ol>\n</li>\n<li>\n<p>嫡系血缘关系（亲戚）</p>\n<ol>\n<li>好好对待自己的亲戚，但是不能以自己为第一个大学生的身份来教导别人，记住，永远不要轻易地去教导别人，千万不要轻易地去扶别人，这是我这 20 多年来犯的最大的一个错，我必须要纠正自己好为人师的性格，觉得自己比别人更懂某些道理，其实懂不懂从当前的境遇就可以看出来一个人是否是强人，那种别人口中厉害的人，我没有必要去强行地倾述自己的见解。只要不是自己悟出来的，别人强行灌输的道理我都不认，这辈子我只认我自己亲身悟出来的道理。</li>\n<li>我并不是一个孝顺的好孩子，但是很多情况下，我不能得势并不是因为别人给我的个个理由，而是由于我自己的心境不如别人，我看了太多的人生大道，经历了很多低谷期，也抑郁过，自己也堕落过，但我还是那个我，我并不是希望别人来拯救的人，所以，我不会允许也不会求助于别人，尤其是亲戚，我不会抖露出自己的志向，也不会向任何人倾述我的烦恼和自己的计划。言多必失，这是我十分惨重的教训。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>爱情关系</p>\n<ol>\n<li>我不确定自己是否需要爱情，但是如若真的遇到了自己喜爱的女孩，我一定会尽力地去爱她，不主动寻找是我对爱情的谨慎，因为有我父母娃娃亲的教训，我出生在一个并不和睦的家庭，这一切都是由于父母之间长期的内斗，窝里横让我对于爱情有了恐惧，这种恐惧是刻在骨子里的，我并不排斥这种情感，就像父母之间的矛盾一样，我只是对爱情有了更高的要求，我更倾向于寻找一个各方面都符合自己的，更愿意与我一同的爱情关系，而不是那种喜欢窝里斗，时常吵架的家庭。</li>\n</ol>\n</li>\n<li>\n<p>同事关系</p>\n<ol>\n<li>同事永远不是朋友，之前的我可以为任何人做任何事，现在的我以为，职场中我这种人首要做的就是藏拙，并且示弱，并请教别人，这是我第一段事业的教训，由于我的傲慢和好为人师，喜欢关注别人的成长，让我一直以来其实都是没有成长。我必须竭尽所能地关注自己的成长，我必须要以自己的事情为主，别人发生了什么事，我都无需去主动指教，我真的，这种喜欢教导别人的性格真的是十分阻碍我。</li>\n<li>同事可以亲近，但是不能过度亲近，永远不能给自己的同事暴露自己的家事，自己的状态，自己的私事，这点尤为重要，别人的微信，别人的消息，不能恶心地去留意，上级的要求，要主动跟上级交代和沟通好细节，否则不要轻易地动手。</li>\n<li>自己的事情不能让别人做，别人的事情，自己不轻易地做，如果上级再次要求自己的一些无理的要求，需要明确自己的态度，就算妥协也要表现出自己是被胁迫且是非我意愿的，这样其实就可以让我在其他事情上有更多的发语权，在职场上，没有朋友，没有知遇之恩的老板和上级，只有自己的利益，一定要在职场中保护好自己，不要成为顺从的羊，也不要成为过于尖锐的出头鸟。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>责任</p>\n<ul>\n<li>\n<p>个人责任</p>\n<ol>\n<li>我的责任是爱自己，首要就是爱自己，不再依靠别人的安慰，不再依靠别人的帮助，我要成为一个情感独立，生存独立的人，前 20 年都是掌握在我父母中，父母利用赡养我的理由一直以来都是采取打压来让我顺从他们，我到现在我甚至可以肯定他们可能还更喜欢看到我现在的样子，不要看他们对我的样子十分唾弃，其实内心都是在甩锅，底层的人其实就是那么一些人，喜欢落井下石，好为人师，喜欢打压别人，不知道如何爱自己，更不知道怎么爱别人。</li>\n<li>我的责任其实首要是对要对自己的未来做准备，我要做什么，我想做什么，我必须要在有生之年在一些事中做出自己的功绩，我知道这很难，因为我个人天马行空，喜欢做一些不符实际的幻想，喜欢做白日梦，但是我对于这个世界，这个世界有什么组成，我们又是因为什么诞生在这个世界，我想要寻求答案，但是我知道，这并不是我这个普通人能做到的，但我会努力地去做，去做给自己看，有些事情，并不是一时没有能力就不能做的，我可以时时刻刻地去努力。</li>\n</ol>\n</li>\n<li>\n<p>家庭责任</p>\n<ol>\n<li>家庭责任书首要是孝敬父母，我知道我现在并无能力，也经常让父母担心，顶撞父母，当然，我会慢慢改，在我稳定好我自己后，我也会慢慢地回敬自己的父母，我并不想再去纠正自己的父母了，我决定要以当面顺从父母，背后应以自己来做，不能将父母的看法，父母的态度，父母的干预来影响自己，从此以后，我必须要谨慎对待各种观点，各种人对我的看法，我要做到表面无动于衷，背后分析利害并及时改正，司马懿的那句话说的好，这辈子走来，没有敌人，只有朋友，无论是谁，敌人也好，朋友也罢，都是能够让自己更加能够了解自己的人，不能对他们产生一些诸如怨恨、嫉妒、报复等等负面的情感来看别人，需要以礼待之，记住，自己的心态永远是自己最好的风水，不能让情绪，尤其是负面情绪击溃自己。</li>\n<li>家庭责任第二点则是重建自己的影响力，不能让父母或者某些亲戚来干涉自己的事情，至于某些事情需要自己的时候，必须要有自己的确认，否则我不会将任何诸如钱财、信息、等等给父母许诺的任何人，我要逐渐找到自己信任的人，自己的父母生于底层，他们这一生都活在底层的环境，喜欢胡乱地结交别人，喜欢让我也去结交，哪怕别人和自己根本没有任何意愿，强行地撮合是最不能持久的，父亲一直以来都喜欢结交别人，然而忽略了自己，从不想着自己能怎么去帮助别人，一昧地想着如何从自己的关系中获益，这是十分不明智的做法，这世界上真的有人会因为一场谈话，一个谈不上很好的过去的缘分就去帮助一个根本不熟悉的人的孩子吗，我觉得这是不太可能的，所以，我一直坚信着，如果自己不强大，自己没有别人看中的特点和利益，是永远都不可能找到那所谓的贵人相助的，我觉得很多情况下，如果是别人强行塞给我的来帮助我的人，我反而不会去回报他，反而是那些在我真正遇到难处，自己主动或者被人发现并给予帮助的人，那种感恩，那种感情才是真挚的，总而言之，雪中送炭是真挚而且难得的。强塞给我，不是我想要的，我会觉得并不是我想，却与我父母来强行干预我的因果的人是无论如何都是无法让我产生好感的。</li>\n</ol>\n</li>\n<li>\n<p>岗位责任</p>\n</li>\n</ul>\n</li>\n<li>\n<p>能力</p>\n<ul>\n<li>\n<p>工作能力</p>\n</li>\n<li>\n<p>生活能力</p>\n</li>\n<li>\n<p>学习能力</p>\n</li>\n</ul>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "个人简介",
                "原则",
                "个人详情",
                "个人分享"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://scottalive.github.io/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "Java基础面试题",
            "date_published": "2023-05-03T16:28:00.000Z",
            "content_html": "<h2 id=\"java基础面试题\"><a class=\"anchor\" href=\"#java基础面试题\">#</a> Java 基础面试题</h2>\n<ol>\n<li>\n<p><strong>什么是 Java？它有哪些特点？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的四种访问修饰符是什么？</strong></p>\n</li>\n<li>\n<p><strong>什么是面向对象编程（OOP）？</strong></p>\n</li>\n<li>\n<p><strong>什么是多态性（Polymorphism）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常处理机制是什么？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的自动装箱和拆箱？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的集合框架？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 线程？如何创建和启动线程？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的同步机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 final 关键字有什么用途？</strong></p>\n</li>\n<li>\n<p><strong>Java 中如何实现多线程？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的垃圾回收机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的静态方法和实例方法有何区别？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的反射（Reflection）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的抽象类和接口有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 equals () 和 hashCode () 方法有何作用？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的异常处理机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的序列化是什么？如何实现对象的序列化和反序列化？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的泛型（Generics）是什么？有什么作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 Lambda 表达式是什么？有什么作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的重载和重写有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 String 和 StringBuffer（或 StringBuilder）有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的静态块（static block）有何作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常分类及继承关系是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的装箱和拆箱是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的枚举（Enum）是什么？有什么用途？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 finalize () 方法有何作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的注解是什么？有哪些内置注解？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的内部类有哪些类型？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 ClassLoader 是什么？有哪些类加载器？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 中的泛型（Generics）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的多态（Polymorphism）是什么？如何实现多态？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的集合框架（Collections Framework）包括哪些主要接口和类？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的序列化（Serialization）是什么？如何实现对象的序列化和反序列化？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常处理机制是怎样的？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的线程安全是什么？如何实现线程安全？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的反射（Reflection）是什么？如何使用反射获取类的信息和调用方法？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 JVM（Java 虚拟机）是什么？它的作用是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 Lambda 表达式是什么？它的作用是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的数据类型有哪些？基本数据类型和引用数据类型有什么区别？</strong></p>\n</li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "JavaSE",
                "Java开发面试题"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/",
            "url": "http://scottalive.github.io/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/",
            "title": "接口限流",
            "date_published": "2023-04-15T03:07:40.000Z",
            "content_html": "<h2 id=\"接口限流\"><a class=\"anchor\" href=\"#接口限流\">#</a> 接口限流</h2>\n<p>​\t\t接口限流是一种常见的应用程序设计模式，它的目的是为了防止系统超载，保持系统的可用性。在应用程序中，特别是在大规模分布式系统中，限制流量可以有效地控制系统负载，并避免由于高负载而导致的系统崩溃。</p>\n<p>​\t\t限流通常是通过对请求进行计数并根据规则拒绝过多的请求来实现的。一些常见的限流策略包括： <code>固定窗口限流</code> 、 <code>滑动窗口限流</code> 、 <code>令牌桶限流</code> 、 <code>漏桶限流</code> 等。这些策略可以根据应用程序的实际需求和性能要求进行调整和组合使用。</p>\n<p>​\t\t在实现接口限流时，需要考虑一些因素，如：最大请求速率、平均请求速率、请求处理时间、负载均衡等。一些常见的限流工具和框架，如 <code>Guava RateLimiter</code> 、 <code>Redis</code> 、 <code>Nginx</code>  等可以帮助实现接口限流。</p>\n<p>​\t\t当我们的应用程序需要处理大量请求时，为了保证系统的稳定性和性能，我们可以使用接口限流技术来控制请求的流量，避免系统过载。以下是一些接口限流的解决方案：</p>\n<ol>\n<li><code>计数器算法</code> ：计数器算法是一种简单的限流算法，它基于一个计数器，每当有一个请求进来时就增加计数器的值。当计数器的值超过了设定的阈值时，就拒绝请求。这种算法的优点是简单易懂，但是不适合处理突发流量。</li>\n<li><code>漏桶算法</code> ：漏桶算法是一种经典的限流算法，它模拟了一个水桶，请求就像水流一样，流进漏桶中，当漏桶已经满了时，就拒绝请求。漏桶算法可以有效地平滑请求的流量，避免系统过载。</li>\n<li><code>令牌桶算法</code> ：令牌桶算法也是一种流量控制算法，它基于一个令牌桶，每当有一个请求进来时就从令牌桶中获取一个令牌，如果令牌桶中没有令牌了，就拒绝请求。令牌桶算法可以平滑处理请求的流量，适用于高峰期的流量控制。</li>\n<li><code>基于时间窗口的限流</code> ：基于时间窗口的限流算法是一种常用的限流算法，它将时间分为多个窗口，每个窗口都有一个固定的限制值。当一个请求进来时，就检查当前时间窗口的请求数是否超过了限制值，如果超过了就拒绝请求。这种算法适用于处理大量请求的场景，可以有效地保护系统。</li>\n<li><code>基于并发数的限流</code> ：基于并发数的限流算法是一种简单的限流算法，它通过监控系统中的并发请求数来控制请求的流量，当并发请求数达到一定阈值时就拒绝请求。这种算法适用于处理大量并发请求的场景，可以有效地保护系统。</li>\n</ol>\n<p>​\t\t这些都是常见的接口限流解决方案，我们可以根据实际业务场景选择合适的算法来保证系统的稳定性和性能。</p>\n<h3 id=\"接口限流实现示例\"><a class=\"anchor\" href=\"#接口限流实现示例\">#</a> 接口限流实现示例</h3>\n<h4 id=\"1计数器算法\"><a class=\"anchor\" href=\"#1计数器算法\">#</a> 1. 计数器算法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastResetTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxRequestsPerSecond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> requestCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxRequestsPerSecond<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastResetTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxRequestsPerSecond <span class=\"token operator\">=</span> maxRequestsPerSecond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requestCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">allowRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">></span> lastResetTime <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 1 second has passed since last reset</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            lastResetTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            requestCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestCount <span class=\"token operator\">>=</span> maxRequestsPerSecond<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// limit reached</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            requestCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// request allowed</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个  <code>Counter</code>  类使用了一个  <code>lastResetTime</code>  变量来记录最后一次计数器清零的时间，以及一个  <code>requestCount</code>  变量来记录在这个时间段内已经发出的请求数量。在  <code>allowRequest()</code>  方法中，先判断是否已经过了 1 秒钟，如果是，则将计数器清零；然后再判断当前请求是否超过了每秒最大请求量，如果是，则返回  <code>false</code> ，否则将计数器加一，并返回  <code>true</code> 。可以根据实际需求来调整每秒最大请求量。</p>\n<h4 id=\"2漏桶算法\"><a class=\"anchor\" href=\"#2漏桶算法\">#</a> 2. 漏桶算法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeakyBucket</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxBucketSize<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 漏桶容量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> flowRate<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 水流出速度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> currentSize<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 当前桶内水量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastLeakTime<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 上次漏水时间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LeakyBucket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxBucketSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flowRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxBucketSize <span class=\"token operator\">=</span> maxBucketSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flowRate <span class=\"token operator\">=</span> flowRate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastLeakTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">allowRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 计算桶内水量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        currentSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currentSize <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lastLeakTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> flowRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        lastLeakTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 如果桶未满，且本次请求能被放入桶中，则放行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentSize <span class=\"token operator\">+</span> tokens <span class=\"token operator\">&lt;=</span> maxBucketSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            currentSize <span class=\"token operator\">+=</span> tokens<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 否则拒绝请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的示例中，我们通过  <code>maxBucketSize</code>  定义了漏桶的容量， <code>flowRate</code>  定义了漏桶的出水速度，也就是漏水的速度。 <code>currentSize</code>  记录当前漏桶中的水量， <code>lastLeakTime</code>  记录上次漏水时间。在  <code>allowRequest</code>  方法中，首先计算当前漏桶中的水量，然后判断本次请求是否能被放入漏桶中，如果能，则将请求放入漏桶中，并返回  <code>true</code> ，否则返回  <code>false</code> ，拒绝请求。</p>\n<h4 id=\"3令牌桶算法\"><a class=\"anchor\" href=\"#3令牌桶算法\">#</a> 3. 令牌桶算法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenBucket</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 桶的容量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 当前桶内令牌数量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> tokens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 每秒增加的令牌数量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 上一次令牌添加的时间戳</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastAddTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TokenBucket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastAddTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 添加令牌</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">addTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 判断桶内令牌数量是否足够</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 计算当前时间和上一次添加令牌的时间之间应该添加的令牌数量</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> addTokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lastAddTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span> <span class=\"token operator\">*</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 如果添加的令牌数量不足一个，则不添加</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addTokens <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 添加令牌</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>addTokens<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 更新上一次添加令牌的时间</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastAddTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码中， <code>TokenBucket </code> 类实现了令牌桶算法，使用了 <code> AtomicInteger</code>  类型的 tokens 属性保存桶内令牌数量。通过  <code>acquire(int tokens)</code>  方法尝试获取指定数量的令牌，如果令牌数量足够，则从桶内移除令牌，并返回 true；否则返回 false。同时，该类的 <code> addTokens()</code>  方法会根据当前时间和上一次添加令牌的时间计算出应该添加的令牌数量，并添加到桶内。</p>\n<h4 id=\"4基于时间窗口的限流\"><a class=\"anchor\" href=\"#4基于时间窗口的限流\">#</a> 4. 基于时间窗口的限流</h4>\n<p>当我们使用基于时间窗口的限流时，我们可以使用一个固定大小的数组来存储每个时间窗口内的请求数量。我们可以定义一个时间窗口的长度，例如每秒钟或每分钟一个时间窗口，然后根据这个时间窗口内的请求数量来判断是否允许该请求通过。</p>\n<p>下面是一个使用基于时间窗口的限流的 Java 代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeWindowRateLimiter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 限流阈值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> windowSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 时间窗口大小，单位为毫秒</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicIntegerArray</span> counters<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储每个时间窗口内的请求数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> scheduler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TimeWindowRateLimiter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> windowSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>windowSize <span class=\"token operator\">=</span> windowSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        counters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicIntegerArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>windowSize <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据时间窗口大小计算数组长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        scheduler <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">resetCounter</span><span class=\"token punctuation\">,</span> windowSize<span class=\"token punctuation\">,</span> windowSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定期清空计数器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">allowRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> currentCounterIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> counters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算当前时间窗口所在的数组下标</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> currentCount <span class=\"token operator\">=</span> counters<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span>currentCounterIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数器加一</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentCount <span class=\"token operator\">></span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断请求数量是否超过限流阈值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            counters<span class=\"token punctuation\">.</span><span class=\"token function\">decrementAndGet</span><span class=\"token punctuation\">(</span>currentCounterIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数器减一</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resetCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> counters<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            counters<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空计数器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t\t在上面的代码中，我们使用  <code>AtomicIntegerArray</code>  数组来存储每个时间窗口内的请求数量。每次有请求进来时，我们先获取当前时间并计算出当前时间所在的时间窗口所在的数组下标。然后将该数组下标对应的计数器加一，判断是否超过限流阈值，如果超过则将计数器减一并拒绝该请求。定期清空计数器以开始新的时间窗口。</p>\n<p>​\t\t基于并发数的限流一般采用信号量（ <code>Semaphore</code> ）实现，以下是一个简单的 Java 代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcurrentLimit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcurrentLimit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取信号量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t\t在上面的代码中，我们通过  <code>Semaphore </code> 来实现并发数的限制。在构造方法中传入限制的并发数，每次执行任务时先调用  <code>semaphore.acquire()</code>  来获取一个信号量，如果已经达到限制的并发数，就会被阻塞直到有一个信号量被释放。任务执行完后再调用  <code>semaphore.release()</code>  来释放信号量。</p>\n<p>​\t\t你可以在需要进行限流的地方使用  <code>ConcurrentLimit</code>  对象来包装需要执行的任务，以实现并发数限制。</p>\n<h3 id=\"接口防刷各算法运用场景\"><a class=\"anchor\" href=\"#接口防刷各算法运用场景\">#</a> 接口防刷各算法运用场景</h3>\n<p>接口防刷是指限制同一用户在短时间内对接口的访问次数，以保证系统的稳定和安全。下面是几种常见的接口防刷算法及其运用场景：</p>\n<ol>\n<li><code>计数器算法</code> ：适用于对 <code>API</code>  调用频率的轻量级限制。例如在小型应用中使用，当同一个用户在指定时间内达到一定请求次数时会返回错误信息，可以用于防止恶意刷接口行为。</li>\n<li><code>漏桶算法</code> ：适用于平滑请求流量，对突发流量进行限制。例如在 <code> CDN</code>  服务中可以利用漏桶算法对网络带宽进行限流，防止网络瘫痪。</li>\n<li><code>令牌桶算法</code> ：适用于在短时间内处理请求数量比较少的场景，可以平滑地处理请求流量。例如在 <code>Web</code>  应用中限制用户的请求数量，可以保护系统不被恶意攻击。</li>\n<li><code>基于时间窗口的限流</code> ：适用于对接口并发访问数的限制。例如在高并发访问场景下，使用时间窗口限制访问频率，避免了瞬时流量过大导致服务不可用的情况。</li>\n<li><code>基于并发数的限流</code> ：适用于对服务能力的控制，避免服务过载。例如在分布式系统中，使用基于并发数的限流算法，可以控制分布式服务间的调用数量，避免服务调用链条过长，导致服务过载。</li>\n</ol>\n<p>需要注意的是，不同的算法适用于不同的场景，选择适合自己的算法是非常重要的。同时，防刷算法只是防止恶意访问的一种手段，还需要通过其他安全措施来保证系统的安全性。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "开发规范",
                "编程笔记",
                "接口开发",
                "开发注意事项"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%98%B2%E5%88%B7/",
            "url": "http://scottalive.github.io/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%98%B2%E5%88%B7/",
            "title": "接口防刷",
            "date_published": "2023-04-13T03:17:40.000Z",
            "content_html": "<h2 id=\"接口防刷\"><a class=\"anchor\" href=\"#接口防刷\">#</a> 接口防刷</h2>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "开发规范",
                "编程笔记",
                "接口开发",
                "开发注意事项"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E6%80%A7/",
            "url": "http://scottalive.github.io/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E6%80%A7/",
            "title": "接口实现幂等性",
            "date_published": "2023-04-13T03:07:40.000Z",
            "content_html": "<h2 id=\"接口实现幂等性\"><a class=\"anchor\" href=\"#接口实现幂等性\">#</a> 接口实现幂等性</h2>\n<p>实现接口的幂等性是为了确保多次调用同一个接口请求不会对系统产生不一致的影响，即使请求被重复发送或执行多次，也应该具有相同的效果。在设计和实现接口时，可以采用以下一些方法来确保接口的幂等性：</p>\n<ol>\n<li><strong>唯一请求标识符（Request Identifier）</strong>：每个请求都应该携带一个唯一的标识符，服务器端可以使用这个标识符来识别请求是否已经被处理。如果已经处理过的请求再次到达，服务器可以忽略它，或者返回相同的响应。常见的方式是在请求头或请求参数中包含一个唯一的标识符。</li>\n<li><strong>幂等性检测</strong>：在服务器端，可以对每个请求进行幂等性检测。这通常需要记录已经处理的请求标识符，并在接收到请求时检查该标识符是否已经存在于记录中。如果存在，表示请求已经被处理，可以返回相同的响应。</li>\n<li><strong>使用 HTTP 方法</strong>：HTTP 方法本身具有幂等性。例如，GET、PUT、DELETE 等 HTTP 方法都是幂等的，因此在 RESTful API 设计中，可以合理地使用这些方法来实现接口的幂等性。</li>\n<li><strong>幂等性响应处理</strong>：客户端在接收到服务器的响应后，应该能够处理重复的响应。这意味着客户端需要能够处理重复请求的情况，例如，不重复执行同一个操作或合理地处理响应数据。</li>\n<li><strong>使用事务</strong>：如果接口涉及到数据库操作或其他需要事务支持的操作，可以使用数据库事务或分布式事务来确保幂等性。事务可以保证一系列操作的原子性和幂等性。</li>\n<li><strong>版本控制</strong>：在接口中引入版本控制，使得不同版本的接口可以共存。这样，即使客户端使用旧版本接口发送请求，新版本接口仍然能够正确处理请求，保证幂等性。</li>\n<li><strong>幂等性测试</strong>：在接口开发阶段，需要进行幂等性测试，模拟多次请求，检查接口的行为是否满足幂等性要求。</li>\n<li><strong>接口文档和规范</strong>：在接口文档中明确指出接口的幂等性行为，以便客户端开发者正确使用接口。</li>\n</ol>\n<p>综上所述，实现接口的幂等性需要在接口设计和开发阶段采取一系列策略和措施，以确保不同请求对系统的影响是可预测和一致的。这对于构建可靠的分布式系统和 API 非常重要。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "开发规范",
                "编程笔记",
                "接口开发",
                "开发注意事项"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/javase/Java%E9%9B%86%E5%90%88/",
            "url": "http://scottalive.github.io/computer-science/java/javase/Java%E9%9B%86%E5%90%88/",
            "title": "Java集合",
            "date_published": "2023-04-11T14:44:59.000Z",
            "content_html": "<h2 id=\"java集合\"><a class=\"anchor\" href=\"#java集合\">#</a> Java 集合</h2>\n<h3 id=\"arraylist\"><a class=\"anchor\" href=\"#arraylist\">#</a> ArrayList</h3>\n<h3 id=\"linkedlist\"><a class=\"anchor\" href=\"#linkedlist\">#</a> LinkedList</h3>\n<h3 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> Vector</h3>\n<h3 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h3>\n<h3 id=\"hashmap\"><a class=\"anchor\" href=\"#hashmap\">#</a> HashMap</h3>\n<h3 id=\"hashset\"><a class=\"anchor\" href=\"#hashset\">#</a> HashSet</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        },
        {
            "id": "http://scottalive.github.io/psychology/%E8%87%AA%E5%8D%91%E4%B8%8E%E8%B6%85%E8%B6%8A/%E5%BA%8F%E8%A8%80/",
            "url": "http://scottalive.github.io/psychology/%E8%87%AA%E5%8D%91%E4%B8%8E%E8%B6%85%E8%B6%8A/%E5%BA%8F%E8%A8%80/",
            "title": "序言",
            "date_published": "2023-04-06T13:58:00.000Z",
            "content_html": "<h2 id=\"自卑与超越\"><a class=\"anchor\" href=\"#自卑与超越\">#</a> 自卑与超越</h2>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "心理学",
                "自卑与超越",
                "心理学知识",
                "阿德勒心理学",
                "自卑与超越"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/python/basic/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/",
            "url": "http://scottalive.github.io/computer-science/python/basic/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/",
            "title": "语言元素",
            "date_published": "2023-04-06T09:51:49.000Z",
            "content_html": "<h2 id=\"语言元素\"><a class=\"anchor\" href=\"#语言元素\">#</a> 语言元素</h2>\n<h4 id=\"指令和程序\"><a class=\"anchor\" href=\"#指令和程序\">#</a> 指令和程序</h4>\n<p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JUFGJUMyJUI3JUU4JUFGJUJBJUU0JUJDJThBJUU2JTlCJUJDJUU3JUJCJTkzJUU2JTlFJTg0\"> “冯・诺依曼结构”</span> 的计算机。“冯・诺依曼结构” 有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种 “逢二进一” 的计数法，跟我们人类使用的 “逢十进一” 的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012 年是上一个所谓的 “太阳纪” 的最后一年，而 2013 年则是新的 “太阳纪” 的开始，后来这件事情被以讹传讹的方式误传为”2012 年是玛雅人预言的世界末日 “这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示 1，低电压表示 0），于是在 “冯・诺依曼结构” 的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJThDJUU4JUJGJTlCJUU1JTg4JUI2\">维基百科</span>或者<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20=\">百度百科</span>科普一下。</p>\n<blockquote>\n<p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018 年 6 月，Intel 宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019 年，IBM 和 Google 都推出了自己的量子计算机。</p>\n</blockquote>\n<h3 id=\"变量和类型\"><a class=\"anchor\" href=\"#变量和类型\">#</a> 变量和类型</h3>\n<p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python 中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p>\n<ul>\n<li>整型：Python 中可以处理任意大小的整数（Python 2.x 中有 <code>int</code>  和 <code>long</code>  两种类型的整数，但这种区分对 Python 来说意义不大，因此在 Python 3.x 中整数只有 int 这一种了），而且支持二进制（如 <code>0b100</code> ，换算成十进制是 4）、八进制（如 <code>0o100</code> ，换算成十进制是 64）、十进制（ <code>100</code> ）和十六进制（ <code>0x100</code> ，换算成十进制是 256）的表示法。</li>\n<li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如 <code>123.456</code> ）之外还支持科学计数法（如 <code>1.23456e2</code> ）。</li>\n<li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如 <code>'hello'</code>  和 <code>&quot;hello&quot;</code> , 字符串还有原始字符串表示法、字节字符串表示法、Unicode 字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li>\n<li>布尔型：布尔值只有 <code>True</code> 、 <code>False</code>  两种值，要么是 <code>True</code> ，要么是 <code>False</code> ，在 Python 中，可以直接用 <code>True</code> 、 <code>False</code>  表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如 <code>3 &lt; 5</code>  会产生布尔值 <code>True</code> ，而 <code>2 == 1</code>  会产生布尔值 <code>False</code> ）。</li>\n<li>复数型：形如 <code>3+5j</code> ，跟数学上的复数表示一样，唯一不同的是虚部的 <code>i</code>  换成了 <code>j</code> 。实际上，这个类型并不常用，大家了解一下就可以了。</li>\n</ul>\n<h4 id=\"变量命名\"><a class=\"anchor\" href=\"#变量命名\">#</a> 变量命名</h4>\n<p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在 Python 中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p>\n<ul>\n<li>硬性规则：\n<ul>\n<li>变量名由字母（广义的 Unicode 字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li>\n<li>大小写敏感（大写的 <code>a</code>  和小写的 <code>A</code>  是两个不同的变量）。</li>\n<li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li>\n</ul>\n</li>\n<li>PEP 8 要求：\n<ul>\n<li>用小写字母拼写，多个单词用下划线连接。</li>\n<li>受保护的实例属性用单个下划线开头（后面会讲到）。</li>\n<li>私有的实例属性用两个下划线开头（后面会讲到）。</li>\n</ul>\n</li>\n</ul>\n<p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p>\n<h4 id=\"变量的使用\"><a class=\"anchor\" href=\"#变量的使用\">#</a> 变量的使用</h4>\n<p>下面通过几个例子来说明变量的类型和变量使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用变量保存数据并进行加减乘除运算</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">321</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 333</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 309</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 3852</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 26.75</span></pre></td></tr></table></figure><p>在 Python 中可以使用 <code>type</code>  函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用type()检查变量的类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">12.345</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">5j</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token string\">'hello, world'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'int'></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'float'></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'complex'></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'str'></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'bool'></span></pre></td></tr></table></figure><p>可以使用 Python 中内置的函数对变量类型进行转换。</p>\n<ul>\n<li><code>int()</code> ：将一个数值或字符串转换成整数，可以指定进制。</li>\n<li><code>float()</code> ：将一个字符串转换成浮点数。</li>\n<li><code>str()</code> ：将指定的对象转换成字符串形式，可以指定编码。</li>\n<li><code>chr()</code> ：将整数转换成该编码对应的字符串（一个字符）。</li>\n<li><code>ord()</code> ：将字符串（一个字符）转换成对应的编码（整数）。</li>\n</ul>\n<p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用input()函数获取键盘输入(字符串)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>使用int()函数将输入的字符串转换成整数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>使用print()函数输出带占位符的字符串</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d + %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d - %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d * %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d / %d = %f'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d // %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">//</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d %% %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d ** %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">**</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：上面的 print 函数中输出的字符串使用了占位符语法，其中 <code>%d</code>  是整数的占位符， <code>%f</code>  是小数的占位符， <code>%%</code>  表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成 <code>%%</code> ），字符串之后的 <code>%</code>  后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p>\n</blockquote>\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<p>Python 支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code>   <code>[:]</code></td>\n<td>下标，切片</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数</td>\n</tr>\n<tr>\n<td><code>~</code>   <code>+</code>   <code>-</code></td>\n<td>按位取反，正负号</td>\n</tr>\n<tr>\n<td><code>*</code>   <code>/</code>   <code>%</code>   <code>//</code></td>\n<td>乘，除，模，整除</td>\n</tr>\n<tr>\n<td><code>+</code>   <code>-</code></td>\n<td>加，减</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code>   <code>&lt;&lt;</code></td>\n<td>右移，左移</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td><code>^</code>   <code>\\|</code></td>\n<td>按位异或，按位或</td>\n</tr>\n<tr>\n<td><code>&lt;=</code>   <code>&lt;</code>   <code>&gt;</code>   <code>&gt;=</code></td>\n<td>小于等于，小于，大于，大于等于</td>\n</tr>\n<tr>\n<td><code>==</code>   <code>!=</code></td>\n<td>等于，不等于</td>\n</tr>\n<tr>\n<td><code>is</code>    <code>is not</code></td>\n<td>身份运算符</td>\n</tr>\n<tr>\n<td><code>in</code>   <code>not in</code></td>\n<td>成员运算符</td>\n</tr>\n<tr>\n<td><code>not</code>   <code>or</code>   <code>and</code></td>\n<td>逻辑运算符</td>\n</tr>\n<tr>\n<td><code>=</code>   <code>+=</code>   <code>-=</code>   <code>*=</code>   <code>/=</code>   <code>%=</code>   <code>//=</code>   <code>**=</code>   <code>&amp;=</code>   <code>|=</code>   <code>^=</code>   <code>&gt;&gt;=</code>   <code>&lt;&lt;=</code></td>\n<td>（复合）赋值运算符</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p>\n</blockquote>\n<h4 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h4>\n<p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>赋值运算符和复合赋值运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a <span class=\"token operator\">+=</span> b        <span class=\"token comment\"># 相当于：a = a + b</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a <span class=\"token operator\">*=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2</span>    <span class=\"token comment\"># 相当于：a = a * (a + 2)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 算一下这里会输出什么</span></pre></td></tr></table></figure><h3 id=\"比较运算符和逻辑运算符\"><a class=\"anchor\" href=\"#比较运算符和逻辑运算符\">#</a> 比较运算符和逻辑运算符</h3>\n<p>比较运算符有的地方也称为关系运算符，包括 <code>==</code> 、 <code>!=</code> 、 <code>&lt;</code> 、 <code>&gt;</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code> ，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是 <code>==</code> ，请注意这个地方是两个等号，因为 <code>=</code>  是赋值运算符，我们在上面刚刚讲到过， <code>==</code>  才是比较相等的比较运算符。比较运算符会产生布尔值，要么是 <code>True</code>  要么是 <code>False</code> 。</p>\n<p>逻辑运算符有三个，分别是 <code>and</code> 、 <code>or</code>  和 <code>not</code> 。 <code>and</code>  字面意思是 “而且”，所以 <code>and</code>  运算符会连接两个布尔值，如果两个布尔值都是 <code>True</code> ，那么运算的结果就是 <code>True</code> ；左右两边的布尔值有一个是 <code>False</code> ，最终的运算结果就是 <code>False</code> 。相信大家已经想到了，如果 <code>and</code>  左边的布尔值是 <code>False</code> ，不管右边的布尔值是什么，最终的结果都是 <code>False</code> ，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在 <code>and</code>  运算符左边为 <code>False</code>  的情况下，右边的表达式根本不会执行。 <code>or</code>  字面意思是 “或者”，所以 <code>or</code>  运算符也会连接两个布尔值，如果两个布尔值有任意一个是 <code>True</code> ，那么最终的结果就是 <code>True</code> 。当然， <code>or</code>  运算符也是有短路功能的，在它左边的布尔值为 <code>True</code>  的情况下，右边的表达式根本不会执行。 <code>not</code>  运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是 <code>True</code>  运算结果就是 <code>False</code> ，而后面的布尔值如果是 <code>False</code>  则运算结果就是 <code>True</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比较运算符和逻辑运算符的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flag0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flag1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flag2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>flag3 <span class=\"token operator\">=</span> flag1 <span class=\"token keyword\">and</span> flag2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>flag4 <span class=\"token operator\">=</span> flag1 <span class=\"token keyword\">or</span> flag2</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>flag5 <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag0 ='</span><span class=\"token punctuation\">,</span> flag0<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag0 = True</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag1 ='</span><span class=\"token punctuation\">,</span> flag1<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag1 = True</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag2 ='</span><span class=\"token punctuation\">,</span> flag2<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag2 = False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag3 ='</span><span class=\"token punctuation\">,</span> flag3<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag3 = False</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag4 ='</span><span class=\"token punctuation\">,</span> flag4<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag4 = True</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag5 ='</span><span class=\"token punctuation\">,</span> flag5<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag5 = False</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以 <code>flag0 = 1 == 1</code>  先做 <code>1 == 1</code>  产生布尔值 <code>True</code> ，再将这个值赋值给变量 <code>flag0</code> 。 <code>print</code>  函数可以输出多个值，多个值之间可以用 <code>,</code>  进行分隔，输出的内容之间默认以空格分开。</p>\n</blockquote>\n<h3 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h3>\n<h4 id=\"练习1华氏温度转换为摄氏温度\"><a class=\"anchor\" href=\"#练习1华氏温度转换为摄氏温度\">#</a> 练习 1：华氏温度转换为摄氏温度。</h4>\n<blockquote>\n<p>提示：华氏温度到摄氏温度的转换公式为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mo>−</mo><mn>32</mn><mo stretchy=\"false\">)</mo><mo>÷</mo><mn>1.8</mn></mrow><annotation encoding=\"application/x-tex\">C=(F - 32) \\div 1.8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span></span>。</p>\n</blockquote>\n<p>参考答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>将华氏温度转换为摄氏温度</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入华氏温度: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1.8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.1f华氏度 = %.1f摄氏度'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：在使用 <code>print</code>  函数输出时，也可以对字符串内容进行格式化处理，上面 <code>print</code>  函数中的字符串 <code>%.1f</code>  是一个占位符，稍后会由一个 <code>float</code>  类型的变量值替换掉它。同理，如果字符串中有 <code>%d</code> ，后面可以用一个 <code>int</code>  类型的变量值替换掉它，而 <code>%s</code>  会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中 <code>&#123;f:.1f&#125;</code>  和 <code>&#123;c:.1f&#125;</code>  可以先看成是 <code>&#123;f&#125;</code>  和 <code>&#123;c&#125;</code> ，表示输出时会用变量 <code>f</code>  和变量 <code>c</code>  的值替换掉这两个占位符，后面的 <code>:.1f</code>  表示这是一个浮点数，小数点后保留 1 位有效数字。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">华氏度 = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">摄氏度'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h4 id=\"练习2输入圆的半径计算计算周长和面积\"><a class=\"anchor\" href=\"#练习2输入圆的半径计算计算周长和面积\">#</a> 练习 2：输入圆的半径计算计算周长和面积。</h4>\n<p>参考答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入半径计算圆的周长和面积</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>radius <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入圆的半径: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>perimeter <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.1416</span> <span class=\"token operator\">*</span> radius</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>area <span class=\"token operator\">=</span> <span class=\"token number\">3.1416</span> <span class=\"token operator\">*</span> radius <span class=\"token operator\">*</span> radius</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'周长: %.2f'</span> <span class=\"token operator\">%</span> perimeter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'面积: %.2f'</span> <span class=\"token operator\">%</span> area<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"练习3输入年份判断是不是闰年\"><a class=\"anchor\" href=\"#练习3输入年份判断是不是闰年\">#</a> 练习 3：输入年份判断是不是闰年。</h4>\n<p>参考答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入年份 如果是闰年输出True 否则输出False</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>year <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年份: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 如果代码太长写成一行不便于阅读 可以使用 \\ 对代码进行折行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>is_leap <span class=\"token operator\">=</span> year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>is_leap<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符 <code>and</code>  和 <code>or</code>  会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出 <code>True</code> ，平年输出 <code>False</code> 。</p>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Python",
                "Python基础",
                "编程笔记",
                "python"
            ]
        },
        {
            "id": "http://scottalive.github.io/computer-science/java/javase/String%E7%B1%BB/",
            "url": "http://scottalive.github.io/computer-science/java/javase/String%E7%B1%BB/",
            "title": "String类",
            "date_published": "2023-03-31T01:37:00.000Z",
            "content_html": "<h3 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a> String 类</h3>\n<p>​\t\t <code>String</code>  是 <code>Java</code>  中非常常用的一个类，它代表了一个字符串对象。在 <code>Java</code>  中，字符串是不可变的，也就是说，一旦一个字符串对象被创建，它的值就不能被改变。因此，每次对字符串进行修改，都会创建一个新的字符串对象。</p>\n<h3 id=\"string类为什么是不可变的\"><a class=\"anchor\" href=\"#string类为什么是不可变的\">#</a> String 类为什么是不可变的？</h3>\n<p>​\t\tString 类的不可变特性指的是 String 实例的值一旦被创建就不能被修改。这意味着对一个 String 对象进行操作时，如果需要修改其值，实际上是创建了一个新的 String 对象，并将新对象的引用赋给原对象。这种特性有助于提高程序的性能和安全性。</p>\n<p>​\t\t从源码层面来看，String 类中的不可变特性是通过使用 final 关键字和 private 修饰符来实现的。String 类中的每个方法都不会修改原有的 String 对象，而是返回一个新的 String 对象，以保持原有的 String 对象的不可变性。</p>\n<p>​\t\t例如，String 类中的 <code>concat</code>  方法可以将两个字符串连接起来，返回一个新的 String 对象，而不会修改原有的字符串：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新的 String 对象，值为 \"HelloWorld\"</span></pre></td></tr></table></figure><p>​\t\t另外，String 类还有一种常用的创建方式，即使用字符串字面值创建对象。这种方式在 Java 虚拟机中被优化，称为字符串常量池（String Pool）。当使用字符串字面值创建一个 String 对象时，Java 虚拟机会首先在字符串常量池中查找是否已存在该值的字符串对象，如果存在则返回该对象的引用，否则创建一个新的 String 对象并加入字符串常量池。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新的 String 对象并加入字符串常量池</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回字符串常量池中的引用，与 str1 引用同一个对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新的 String 对象，不在字符串常量池中</span></pre></td></tr></table></figure><p>​\t\t由于 String 的不可变特性和字符串常量池的存在，可以安全地共享字符串对象，从而提高程序的性能和安全性。</p>\n<h3 id=\"string类有很多实用的方法例如\"><a class=\"anchor\" href=\"#string类有很多实用的方法例如\">#</a> <strong>String 类有很多实用的方法，例如：</strong></h3>\n<ul>\n<li><code>length()</code> ：获取字符串的长度。</li>\n<li><code>charAt(int index)</code> ：获取指定索引位置的字符。</li>\n<li><code>substring(int beginIndex, int endIndex)</code> ：获取指定索引范围内的子字符串。</li>\n<li><code>concat(String str)</code> ：将指定字符串连接到此字符串的末尾。</li>\n<li><code>indexOf(String str)</code> ：返回指定子字符串第一次出现的索引。</li>\n<li><code>equals(Object anObject)</code> ：将此字符串与指定对象进行比较。</li>\n<li><code>toUpperCase()</code> ：将字符串中的所有字符转换为大写。</li>\n<li><code>toLowerCase()</code> ：将字符串中的所有字符转换为小写。</li>\n<li>...</li>\n</ul>\n<p><strong>以下是 String 类的常用方法的例子：</strong></p>\n<ol>\n<li><code>length()</code>  方法：获取字符串的长度。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// length = 12</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>charAt(int index)</code>  方法：获取指定位置的字符。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c = 'e'</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>substring(int beginIndex, int endIndex)</code>  方法：获取指定位置范围内的子字符串。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> subStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// subStr = \"Hello\"</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>indexOf(String str)</code>  方法：获取指定字符串在该字符串中第一次出现的位置。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// index = 6</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>lastIndexOf(String str)</code>  方法：获取指定字符串在该字符串中最后一次出现的位置。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// index = 9</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>equals(Object obj)</code>  方法：比较字符串是否相等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">boolean</span> isEqual <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isEqual = true</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>startsWith(String prefix)</code>  方法：判断字符串是否以指定字符串开头。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> startsWith <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// startsWith = true</span></pre></td></tr></table></figure><ol start=\"8\">\n<li><code>endsWith(String suffix)</code>  方法：判断字符串是否以指定字符串结尾。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> endsWith <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// endsWith = true</span></pre></td></tr></table></figure><ol start=\"9\">\n<li><code>replace(char oldChar, char newChar)</code>  方法：用指定字符替换字符串中的所有指定字符。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> newStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// newStr = \"Hell* W*rld!\"</span></pre></td></tr></table></figure><ol start=\"10\">\n<li><code>toLowerCase()</code>  方法和 <code>toUpperCase()</code>  方法：将字符串转换为小写或大写。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> lowerCaseStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lowerCaseStr = \"hello world!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> upperCaseStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// upperCaseStr = \"HELLO WORLD!\"</span></pre></td></tr></table></figure><h3 id=\"string类其他特性\"><a class=\"anchor\" href=\"#string类其他特性\">#</a> String 类其他特性</h3>\n<p>​\t\t <code>String</code>  类还支持字符串拼接操作。在 <code>Java 5</code>  之前，通常使用字符串拼接操作符 <code>+</code>  来实现字符串拼接，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t\t在 <code>Java 5</code>  及之后的版本中，还引入了 <code>StringBuilder</code>  和 <code>StringBuffer</code>  两个类来优化字符串拼接操作。这两个类可以动态地添加、修改和删除字符串中的字符，并且能够避免频繁创建新的字符串对象。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t\t当需要在多线程环境下使用字符串拼接操作时，应该使用 <code>StringBuffer</code>  类。如果在单线程环境下使用字符串拼接操作，或者需要更高的性能，应该使用 <code>StringBuilder</code>  类。</p>\n<p>​\t\t总之， <code>String</code>  类是 <code>Java</code>  中非常常用的一个类，它不仅支持字符串的基本操作，还提供了丰富的字符串处理方法，对于 <code>Java</code>  程序开发来说是一个必不可少的类。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        }
    ]
}