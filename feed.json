{
    "version": "https://jsonfeed.org/version/1",
    "title": "沉鱼的博客",
    "subtitle": "了解自我，超越自我",
    "icon": "http://www.luotao.shop/images/favicon.ico",
    "description": "编程笔记 & 资料分享",
    "home_page_url": "http://www.luotao.shop",
    "items": [
        {
            "id": "http://www.luotao.shop/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/",
            "url": "http://www.luotao.shop/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/",
            "title": "坏习惯",
            "date_published": "2023-09-17T11:36:00.000Z",
            "content_html": "<h3 id=\"九种弱者习惯\"><a class=\"anchor\" href=\"#九种弱者习惯\">#</a> 九种弱者习惯</h3>\n<p>一、九种弱者习惯，包括爱找借口、缺乏胆识、犹豫不决等，提醒读者要养成优秀的习惯，不断成长进步。</p>\n<ul>\n<li>习惯不好消耗生命，好习惯塑造自己</li>\n<li>摒弃消极的念头，主动调整一个个微小的行为</li>\n<li>去爱、攀山、追梦，去尝试，去尝试，去尝试</li>\n</ul>\n<p>二、犹豫、学习、拖延等现代职场中的常见问题，并给出了解决方案，鼓励人们积极行动，终身学习，克服拖延症。</p>\n<ul>\n<li>犹豫不决，害怕失败，浪费时间</li>\n<li>不懂得学习，抛弃旧技能，容易被取代</li>\n<li>拖延症会侵蚀人生，尝试 5 分钟定律</li>\n</ul>\n<p>三、避免生活和工作中的七种常见问题，如拖延症、缺乏恒心、害怕拒绝等，提出了解决方案，帮助人们更好地面对生活中的挑战。</p>\n<ul>\n<li>拖延会消耗生命，提前投入做事</li>\n<li>成功的人有恒心，不要半途而废</li>\n<li>人生的目标由自己定，不要习惯待在舒适区</li>\n</ul>\n<p>四、九种弱者习惯，包括懒惰、逃避现实等，并强调了积极面对生活的重要性，只有戒掉这些习惯才能迈向更好的未来。</p>\n<ul>\n<li>逃避现实会导致内心脆弱，生活也会加倍的报复回来</li>\n<li>不断拥抱新的挑战，熬过一次次痛苦的蜕变，才能向更好的生活靠近</li>\n<li>主动调整微小行为，改写自己的命运，把每一天过得充实而有意义</li>\n</ul>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtrNHkxUDdzby8/c3BtX2lkX2Zyb209MzMzLjEwMDcudGlhbm1hLjEtMS0xLmNsaWNrJmFtcDt2ZF9zb3VyY2U9ZjllZWRmOTgzNzhhYTc3ZWIzNTZkMzM0M2JiYmU2MDE=\">原文视频来源地址</span></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "生活习惯",
                "个人分享",
                "坏习惯"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/",
            "url": "http://www.luotao.shop/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/",
            "title": "初识Nacos",
            "date_published": "2023-09-01T01:17:00.000Z",
            "content_html": "<h2 id=\"初识nacos\"><a class=\"anchor\" href=\"#初识nacos\">#</a> 初识 Nacos</h2>\n<h3 id=\"nacos安装\"><a class=\"anchor\" href=\"#nacos安装\">#</a> Nacos 安装</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/javase/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "url": "http://www.luotao.shop/computer-science/java/javase/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/",
            "title": "排序算法",
            "date_published": "2023-08-30T03:07:00.000Z",
            "content_html": "<h2 id=\"排序算法\"><a class=\"anchor\" href=\"#排序算法\">#</a> 排序算法</h2>\n<h3 id=\"冒泡排序法\"><a class=\"anchor\" href=\"#冒泡排序法\">#</a> 冒泡排序法</h3>\n<h3 id=\"选择排序法\"><a class=\"anchor\" href=\"#选择排序法\">#</a> 选择排序法</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "url": "http://www.luotao.shop/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/",
            "title": "Ribbon负载均衡",
            "date_published": "2023-08-30T02:17:00.000Z",
            "content_html": "<h2 id=\"ribbon负载均衡\"><a class=\"anchor\" href=\"#ribbon负载均衡\">#</a> Ribbon 负载均衡</h2>\n<h3 id=\"负载均衡原理\"><a class=\"anchor\" href=\"#负载均衡原理\">#</a> 负载均衡原理</h3>\n<p>规则接口是<strong> IRule</strong><br />\n 默认实现是<strong> ZoneAvoidanceRule</strong>，根据<strong> zone</strong> 选择服务列表，然后轮询</p>\n<h3 id=\"负载均衡策略\"><a class=\"anchor\" href=\"#负载均衡策略\">#</a> 负载均衡策略</h3>\n<p>代码方式：配置灵活，但修改时需要重新打包布<br />\n配置方式：直观，方便，无需重新打包发布但是无法做全局配置</p>\n<h3 id=\"懒加载\"><a class=\"anchor\" href=\"#懒加载\">#</a> 懒加载</h3>\n<p>开启饥饿加载<br />\n指定饥饿加载的微服务名称</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/",
            "url": "http://www.luotao.shop/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/",
            "title": "Eureka注册中心",
            "date_published": "2023-08-30T01:17:00.000Z",
            "content_html": "<h2 id=\"eureka注册中心\"><a class=\"anchor\" href=\"#eureka注册中心\">#</a> Eureka 注册中心</h2>\n<h3 id=\"服务调用出现的问题\"><a class=\"anchor\" href=\"#服务调用出现的问题\">#</a> 服务调用出现的问题</h3>\n<ul>\n<li>服务消费者该如何获取服务提供这的地址信息？</li>\n<li>如果有多个服务提供者，消费者该如何选择？</li>\n<li>消费者如何得知服务提供这的健康状态？</li>\n</ul>\n<h3 id=\"eureka的作用\"><a class=\"anchor\" href=\"#eureka的作用\">#</a> Eureka 的作用</h3>\n<ul>\n<li>消费者该如何获取服务提供者的具体信息？\n<ul>\n<li>服务提供者启动时向 Eureka 注册自己的信息</li>\n<li>eureka 保存这些信息</li>\n<li>消费者根据服务名称向 eureka 拉取提供者信息</li>\n</ul>\n</li>\n<li>如果有多个服务提供者，消费者该如何选择？\n<ul>\n<li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li>\n</ul>\n</li>\n<li>消费者该如何感知服务提供者健康状态？\n<ul>\n<li>服务提供者会每 30 秒向 EurekaServer 发送心跳请求，报告健康状态</li>\n<li>eureka 会更新服务列表信息，心跳不正常会被剔除</li>\n<li>消费者就可以拉取到最新的信息</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"搭建eureka服务注册中心\"><a class=\"anchor\" href=\"#搭建eureka服务注册中心\">#</a> 搭建 Eureka 服务注册中心</h3>\n<ol>\n<li>\n<p>引入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>eureka<span class=\"token operator\">-</span>server<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写启动类，并在启动类添加 **@EnableEurekaServer** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaServer</span> <span class=\"token comment\">// 添加注解</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">EurekaApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EurekaApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件上添加 eureka 服务器地址信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka <span class=\"token comment\">#注册中心地址</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"搭建eureka客户端中心\"><a class=\"anchor\" href=\"#搭建eureka客户端中心\">#</a> 搭建 Eureka 客户端中心</h3>\n<ol>\n<li>\n<p>引入依赖</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>       <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>       <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>spring<span class=\"token operator\">-</span>cloud<span class=\"token operator\">-</span>starter<span class=\"token operator\">-</span>netflix<span class=\"token operator\">-</span>eureka<span class=\"token operator\">-</span>client<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>编写启动类，并在启动类上添加 **@EnableEurekaClient** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@MapperScan</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cn.itcast.user.mapper\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span> <span class=\"token comment\">// 添加注解开启服务注册</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UserApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">UserApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置文件上写明 Eureka 服务端的地址信息</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> userservice <span class=\"token comment\"># user 服务的名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">## eureka 服务中心</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">eureka</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token key atrule\">service-url</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token key atrule\">defaultZone</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//127.0.0.1<span class=\"token punctuation\">:</span>10086/eureka</pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"eureka服务发现拉取\"><a class=\"anchor\" href=\"#eureka服务发现拉取\">#</a> Eureka 服务发现 / 拉取</h3>\n<ol>\n<li>\n<p>前提：完成 Eureka 服务端和 Eureka 客户端的搭建，并且服务中心可以看到这些注册到 Eureka 的服务</p>\n</li>\n<li>\n<p>在原来<strong> RestTemplate</strong> 上加入 **@LoadBalanced** 注解</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">restTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将原来使用 RestTemplate 发送 http 请求时写入的 ip 地址替换成 eureka 服务端中的服务名，即 spring.application.name 字段的名称</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 2. 利用 restTemplate 发起 http 请求，查询用户 这里原来是 ip 地址，替换成服务名称</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"http://userservice/user/\"</span> <span class=\"token operator\">+</span> order<span class=\"token punctuation\">.</span><span class=\"token function\">getUserId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">User</span> user <span class=\"token operator\">=</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/",
            "url": "http://www.luotao.shop/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/",
            "title": "认识微服务",
            "date_published": "2023-08-30T00:04:00.000Z",
            "content_html": "<h2 id=\"认识微服务\"><a class=\"anchor\" href=\"#认识微服务\">#</a> 认识微服务</h2>\n<p>微服务是一种经过良好架构设计的<strong>分布式</strong>架构方案，微服务架构特征：</p>\n<ul>\n<li>单一职责：微服务拆分力度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发。</li>\n<li>面向服务：微服务对外暴露业务接口。</li>\n<li>自治：团队独立、技术独立、数据独立、部署独立。</li>\n<li>隔离性强：服务调用做好隔离、容错、降级、避免级联现象。</li>\n</ul>\n<h3 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题：</h3>\n<p>单体架构与分布式架构的区别？</p>\n<ul>\n<li>单体架构特点：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</li>\n<li>分布式架构特点：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东，淘宝。</li>\n</ul>\n<p>微服务：一种良好的分布式架构</p>\n<ul>\n<li>优点：拆分力度更小、服务更独立、耦合度更低</li>\n<li>缺点：架构非常复杂，运维、监控、部署难度提高</li>\n</ul>\n<h3 id=\"微服务结构\"><a class=\"anchor\" href=\"#微服务结构\">#</a> 微服务结构</h3>\n<p>微服务这种方案需要技术框架来落地，全球的互联网公司都在积极尝试自己的微服务落地技术。在国内最知名的就是 SpringCloud 和阿里巴巴的 Dubbo。</p>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8d49661c6c8e54729987.jpg\" alt=\"image-20230830082645810\" /></p>\n<h3 id=\"微服务技术对比\"><a class=\"anchor\" href=\"#微服务技术对比\">#</a> 微服务技术对比</h3>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8ec5661c6c8e547347d2.jpg%5B\" alt=\"\" /></p>\n<h3 id=\"企业需求\"><a class=\"anchor\" href=\"#企业需求\">#</a> 企业需求</h3>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee8f18661c6c8e5473504b.jpg\" alt=\"\" /></p>\n<h3 id=\"springcloud\"><a class=\"anchor\" href=\"#springcloud\">#</a> SpringCloud</h3>\n<ul>\n<li><strong>SpringCloud</strong> 是目前国内使用最广泛的微服务架构。官网地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3Vk\">Spring Cloud</span></li>\n<li><strong>SpringCloud</strong> 集成了各种微服务功能组件，并基于<strong> SpringBoot</strong> 实现了这些组件的自动装配，从而提供了良好的开箱即用体验：</li>\n</ul>\n<p><img data-src=\"https://pic.imgdb.cn/item/64ee90d0661c6c8e54740733.jpg\" alt=\"微服务技术体系\" /></p>\n<h3 id=\"服务拆分与远程调用\"><a class=\"anchor\" href=\"#服务拆分与远程调用\">#</a> 服务拆分与远程调用</h3>\n<p><strong>服务拆分注意事项</strong></p>\n<ol>\n<li>不同微服务，不要重复开发相同业务</li>\n<li>微服务数据独立，不要访问其他微服务的数据库</li>\n<li>微服务可以将自己的业务暴露为接口，供其他微服务调用</li>\n</ol>\n<h3 id=\"微服务远程调用\"><a class=\"anchor\" href=\"#微服务远程调用\">#</a> 微服务远程调用</h3>\n<p><strong>提供者与消费者</strong></p>\n<ul>\n<li>\n<p>服务提供者：一次业务中，被其他为服务调用的服务。（提供接口给其他微服务）</p>\n</li>\n<li>\n<p>服务消费者：一次业务中，调用其他为服务的服务。（调用其他微服务提供的接口）</p>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "微服务",
                "编程笔记",
                "微服务"
            ]
        },
        {
            "id": "http://www.luotao.shop/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/",
            "url": "http://www.luotao.shop/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/",
            "title": "操纵性理学",
            "date_published": "2023-07-06T14:17:00.000Z",
            "content_html": "<h2 id=\"操纵心理学\"><a class=\"anchor\" href=\"#操纵心理学\">#</a> 操纵心理学</h2>\n<p><strong>不要相信” 都是为你好 “，拒绝做软柿子</strong></p>\n<p><strong>修炼你的心，懂得爱人，也要懂得爱自己</strong></p>\n<p><strong>你的人生应该永远由你来选择</strong></p>\n<h3 id=\"\"><a class=\"anchor\" href=\"#\">#</a> </h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "心理学",
                "操纵心理学",
                "心理学知识"
            ]
        },
        {
            "id": "http://www.luotao.shop/introduction/%E5%8E%9F%E5%88%99/",
            "url": "http://www.luotao.shop/introduction/%E5%8E%9F%E5%88%99/",
            "title": "个人原则",
            "date_published": "2023-06-21T20:22:00.000Z",
            "content_html": "<h3 id=\"原则\"><a class=\"anchor\" href=\"#原则\">#</a> 原则</h3>\n<ul>\n<li>\n<p>生活态度</p>\n<ul>\n<li>\n<p>身体健康</p>\n<p><strong>身体健康乃是第一要素，所有的原则都要建立在身体健康上。</strong></p>\n<ol>\n<li>平时熬夜不得超过两点，保证睡眠充足。</li>\n<li>早上起床工作日在 8 点左右起来，休息日要在 10 点之前起来。</li>\n<li>平时加强锻炼，平时锻炼需要控制在 1 个小时左右，室内室外就行。</li>\n<li>饭菜不能过于重，需要合理膳食，荤素搭配，而且每天需要补充水果。</li>\n</ol>\n</li>\n<li>\n<p>心理健康</p>\n<p><strong>基于我经常内耗的情况，我需要适当性地进行心理上的培养</strong></p>\n<ol>\n<li>休息日必须要画上 2 个小时进行心理书籍阅读。</li>\n<li>工作日晚上睡觉时可以进行心理书籍阅读。</li>\n<li>内耗时必须要寻找事情做，听音乐和看视频。</li>\n<li>以正常合适的心态面对自己的各种情绪，不能因为某种情绪影响自己的状态就直接一刀切的忽视。</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p>人际关系</p>\n<ul>\n<li>\n<p>朋友关系</p>\n<p><strong>朋友关系是我一直以来十分重视的关系，但是自己却经常把它搞砸，来自于内心深处那喜欢责怪他人的怪异心理。</strong></p>\n<ol>\n<li>建立朋友关系前，需要了解他人的脾性，如果经常性对你沉默，忽略，必须要收住热情，不能再进行主动行为。</li>\n<li>由于建立的朋友关系大多是人走茶凉，所以，无论是对你多好的朋友，如果走后没有主动寻找过，都一律当做普通朋友，并以待之。</li>\n<li>当与朋友相处时，如果遇到三观不合的情况下，不可直接指出，一定要远离，但不可操之过急，需不引起注意远离。</li>\n<li>当与朋友相处时，如果遇到想做的事情可能遭受他的厌恶时，即当面骂人，无视风险，非他人所求就强行帮助（这点尤其注意），鉴于我的性格，我很容易在感到不适时，喜欢无视他人感受，无视所有风险，以个人感受为主要驱动来行动，我必须要改掉无视他人感受和风险，如果有这种想法，一定要旁敲侧击来询问他人建议，并非直接询问我的行为，而是表达情绪，即适当性抱怨他人忽略或者无视我的行为，适当表达出自己的不满，如果他人还是不管，3 次就可直接远离，切记不可摊牌翻脸，要循序渐进。</li>\n<li>与朋友相处时，遇到朋友嘲讽时，如果非常生气，不可以直接无视，将自己之前喜欢辩解，喜欢对喷的行为改为话语：烦死了、闭嘴、我想安静点。切勿真正动气来报复。</li>\n<li>不要主动窥探他人的生活，这点尤为重要，无论我多么寂寞，多么孤独，都不能主动地去窥探别人生活，或者主动性地进入别人生活。</li>\n<li>朋友心情低落时，如果自己想要帮助他人，将自己的行为看成普通帮助，不能将其当做自己的好，而且一定得面对面交流，即在尊重他人的情况下，再进行适当帮助。</li>\n</ol>\n</li>\n<li>\n<p>亲情关系</p>\n<ul>\n<li>\n<p>直系血缘关系（家人）</p>\n<ol>\n<li>关心家人必须建立在自己的状态良好的情况下，不能再将父母当做无话不说的对象，控制自己在父母面前抱怨的样子，收起自己遇到父母说话不符合自己三观的情况下驳斥，放下反驳的心态去面对家人，家人相处不是来辩论的，一切顺着他们来就行，听而不从，可以解决大部分问题。</li>\n<li>父亲是个十分强硬，执拗的人，一旦认定的观念就不可能改变，所以他说的话全可以当做他个人不得志的倾述，我只需要当个附和的旁人即可，无需去跟他辩解，反驳他的话，改变别人不是我的人生课题，一定要原谅别人的无知，别人的愚蠢，别人的冒犯，因为为别人的问题生气和纠正别人不是自己的课题。</li>\n<li>母亲是一个个性软弱，喜欢隐忍自己感受的人，她的性别十分恶劣，某种程度上，我的母亲带给我的影响大于父亲，所以遇到母亲在我面前歇斯底里地骂我不孝的情况，一定不要慌张，也不要辩解，如果可以的话，尽量避免这种情况即可。</li>\n<li>妹妹被我伤害的最多，所以我需要做的是做好哥哥该干的事，不要再用之前的脾气面对她，也不能在他面前与父母对峙，吵架，平时有时间就联系一下她也可以。</li>\n</ol>\n</li>\n<li>\n<p>嫡系血缘关系（亲戚）</p>\n</li>\n</ul>\n</li>\n<li>\n<p>爱情关系</p>\n</li>\n<li>\n<p>同事关系</p>\n</li>\n</ul>\n</li>\n<li>\n<p>责任</p>\n<ul>\n<li>\n<p>个人责任</p>\n</li>\n<li>\n<p>家庭责任</p>\n</li>\n<li>\n<p>岗位责任</p>\n</li>\n</ul>\n</li>\n<li>\n<p>能力</p>\n<ul>\n<li>\n<p>工作能力</p>\n</li>\n<li>\n<p>生活能力</p>\n</li>\n<li>\n<p>学习能力</p>\n</li>\n</ul>\n</li>\n</ul>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "个人简介",
                "原则",
                "个人详情",
                "个人分享"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "url": "http://www.luotao.shop/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/",
            "title": "Java基础面试题",
            "date_published": "2023-05-03T16:28:00.000Z",
            "content_html": "<h2 id=\"java基础面试题\"><a class=\"anchor\" href=\"#java基础面试题\">#</a> Java 基础面试题</h2>\n<ol>\n<li>\n<p><strong>什么是 Java？它有哪些特点？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的四种访问修饰符是什么？</strong></p>\n</li>\n<li>\n<p><strong>什么是面向对象编程（OOP）？</strong></p>\n</li>\n<li>\n<p><strong>什么是多态性（Polymorphism）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常处理机制是什么？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的自动装箱和拆箱？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的集合框架？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 线程？如何创建和启动线程？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的同步机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 final 关键字有什么用途？</strong></p>\n</li>\n<li>\n<p><strong>Java 中如何实现多线程？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的垃圾回收机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的静态方法和实例方法有何区别？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的反射（Reflection）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的抽象类和接口有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 equals () 和 hashCode () 方法有何作用？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 的异常处理机制？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的序列化是什么？如何实现对象的序列化和反序列化？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的泛型（Generics）是什么？有什么作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 Lambda 表达式是什么？有什么作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的重载和重写有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 String 和 StringBuffer（或 StringBuilder）有何区别？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的静态块（static block）有何作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常分类及继承关系是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的装箱和拆箱是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的枚举（Enum）是什么？有什么用途？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 finalize () 方法有何作用？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的注解是什么？有哪些内置注解？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的内部类有哪些类型？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 ClassLoader 是什么？有哪些类加载器？</strong></p>\n</li>\n<li>\n<p><strong>什么是 Java 中的泛型（Generics）？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的多态（Polymorphism）是什么？如何实现多态？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的集合框架（Collections Framework）包括哪些主要接口和类？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的序列化（Serialization）是什么？如何实现对象的序列化和反序列化？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的异常处理机制是怎样的？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的线程安全是什么？如何实现线程安全？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的反射（Reflection）是什么？如何使用反射获取类的信息和调用方法？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 JVM（Java 虚拟机）是什么？它的作用是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的 Lambda 表达式是什么？它的作用是什么？</strong></p>\n</li>\n<li>\n<p><strong>Java 中的数据类型有哪些？基本数据类型和引用数据类型有什么区别？</strong></p>\n</li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "面试题",
                "JavaSE",
                "Java开发面试题"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/",
            "url": "http://www.luotao.shop/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/",
            "title": "接口限流",
            "date_published": "2023-04-15T03:07:40.000Z",
            "content_html": "<h2 id=\"接口限流\"><a class=\"anchor\" href=\"#接口限流\">#</a> 接口限流</h2>\n<p>​\t\t接口限流是一种常见的应用程序设计模式，它的目的是为了防止系统超载，保持系统的可用性。在应用程序中，特别是在大规模分布式系统中，限制流量可以有效地控制系统负载，并避免由于高负载而导致的系统崩溃。</p>\n<p>​\t\t限流通常是通过对请求进行计数并根据规则拒绝过多的请求来实现的。一些常见的限流策略包括： <code>固定窗口限流</code> 、 <code>滑动窗口限流</code> 、 <code>令牌桶限流</code> 、 <code>漏桶限流</code> 等。这些策略可以根据应用程序的实际需求和性能要求进行调整和组合使用。</p>\n<p>​\t\t在实现接口限流时，需要考虑一些因素，如：最大请求速率、平均请求速率、请求处理时间、负载均衡等。一些常见的限流工具和框架，如 <code>Guava RateLimiter</code> 、 <code>Redis</code> 、 <code>Nginx</code>  等可以帮助实现接口限流。</p>\n<p>​\t\t当我们的应用程序需要处理大量请求时，为了保证系统的稳定性和性能，我们可以使用接口限流技术来控制请求的流量，避免系统过载。以下是一些接口限流的解决方案：</p>\n<ol>\n<li><code>计数器算法</code> ：计数器算法是一种简单的限流算法，它基于一个计数器，每当有一个请求进来时就增加计数器的值。当计数器的值超过了设定的阈值时，就拒绝请求。这种算法的优点是简单易懂，但是不适合处理突发流量。</li>\n<li><code>漏桶算法</code> ：漏桶算法是一种经典的限流算法，它模拟了一个水桶，请求就像水流一样，流进漏桶中，当漏桶已经满了时，就拒绝请求。漏桶算法可以有效地平滑请求的流量，避免系统过载。</li>\n<li><code>令牌桶算法</code> ：令牌桶算法也是一种流量控制算法，它基于一个令牌桶，每当有一个请求进来时就从令牌桶中获取一个令牌，如果令牌桶中没有令牌了，就拒绝请求。令牌桶算法可以平滑处理请求的流量，适用于高峰期的流量控制。</li>\n<li><code>基于时间窗口的限流</code> ：基于时间窗口的限流算法是一种常用的限流算法，它将时间分为多个窗口，每个窗口都有一个固定的限制值。当一个请求进来时，就检查当前时间窗口的请求数是否超过了限制值，如果超过了就拒绝请求。这种算法适用于处理大量请求的场景，可以有效地保护系统。</li>\n<li><code>基于并发数的限流</code> ：基于并发数的限流算法是一种简单的限流算法，它通过监控系统中的并发请求数来控制请求的流量，当并发请求数达到一定阈值时就拒绝请求。这种算法适用于处理大量并发请求的场景，可以有效地保护系统。</li>\n</ol>\n<p>​\t\t这些都是常见的接口限流解决方案，我们可以根据实际业务场景选择合适的算法来保证系统的稳定性和性能。</p>\n<h3 id=\"接口限流实现示例\"><a class=\"anchor\" href=\"#接口限流实现示例\">#</a> 接口限流实现示例</h3>\n<h4 id=\"1计数器算法\"><a class=\"anchor\" href=\"#1计数器算法\">#</a> 1. 计数器算法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Counter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastResetTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxRequestsPerSecond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> requestCount<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Counter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxRequestsPerSecond<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastResetTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxRequestsPerSecond <span class=\"token operator\">=</span> maxRequestsPerSecond<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>requestCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">allowRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">></span> lastResetTime <span class=\"token operator\">+</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 1 second has passed since last reset</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            lastResetTime <span class=\"token operator\">=</span> currentTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            requestCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>requestCount <span class=\"token operator\">>=</span> maxRequestsPerSecond<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// limit reached</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            requestCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// request allowed</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这个  <code>Counter</code>  类使用了一个  <code>lastResetTime</code>  变量来记录最后一次计数器清零的时间，以及一个  <code>requestCount</code>  变量来记录在这个时间段内已经发出的请求数量。在  <code>allowRequest()</code>  方法中，先判断是否已经过了 1 秒钟，如果是，则将计数器清零；然后再判断当前请求是否超过了每秒最大请求量，如果是，则返回  <code>false</code> ，否则将计数器加一，并返回  <code>true</code> 。可以根据实际需求来调整每秒最大请求量。</p>\n<h4 id=\"2漏桶算法\"><a class=\"anchor\" href=\"#2漏桶算法\">#</a> 2. 漏桶算法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LeakyBucket</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> maxBucketSize<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 漏桶容量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> flowRate<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 水流出速度</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> currentSize<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 当前桶内水量</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastLeakTime<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 上次漏水时间</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">LeakyBucket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> maxBucketSize<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> flowRate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>maxBucketSize <span class=\"token operator\">=</span> maxBucketSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>flowRate <span class=\"token operator\">=</span> flowRate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>currentSize <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastLeakTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">synchronized</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">allowRequest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">// 计算桶内水量</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        currentSize <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> currentSize <span class=\"token operator\">-</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lastLeakTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000</span> <span class=\"token operator\">*</span> flowRate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        lastLeakTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 如果桶未满，且本次请求能被放入桶中，则放行</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentSize <span class=\"token operator\">+</span> tokens <span class=\"token operator\">&lt;=</span> maxBucketSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            currentSize <span class=\"token operator\">+=</span> tokens<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token comment\">// 否则拒绝请求</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>在上面的示例中，我们通过  <code>maxBucketSize</code>  定义了漏桶的容量， <code>flowRate</code>  定义了漏桶的出水速度，也就是漏水的速度。 <code>currentSize</code>  记录当前漏桶中的水量， <code>lastLeakTime</code>  记录上次漏水时间。在  <code>allowRequest</code>  方法中，首先计算当前漏桶中的水量，然后判断本次请求是否能被放入漏桶中，如果能，则将请求放入漏桶中，并返回  <code>true</code> ，否则返回  <code>false</code> ，拒绝请求。</p>\n<h4 id=\"3令牌桶算法\"><a class=\"anchor\" href=\"#3令牌桶算法\">#</a> 3. 令牌桶算法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span>atomic<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">AtomicInteger</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TokenBucket</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 桶的容量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 当前桶内令牌数量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> tokens <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 每秒增加的令牌数量</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 上一次令牌添加的时间戳</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">long</span> lastAddTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TokenBucket</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> rate<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>capacity <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>rate <span class=\"token operator\">=</span> rate<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastAddTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 添加令牌</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token function\">addTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token comment\">// 判断桶内令牌数量是否足够</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> tokens<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">addTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 计算当前时间和上一次添加令牌的时间之间应该添加的令牌数量</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token keyword\">int</span> addTokens <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> lastAddTime<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1000.0</span> <span class=\"token operator\">*</span> rate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token comment\">// 如果添加的令牌数量不足一个，则不添加</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addTokens <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token comment\">// 添加令牌</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tokens<span class=\"token punctuation\">.</span><span class=\"token function\">addAndGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>addTokens<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token comment\">// 更新上一次添加令牌的时间</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lastAddTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上代码中， <code>TokenBucket </code> 类实现了令牌桶算法，使用了 <code> AtomicInteger</code>  类型的 tokens 属性保存桶内令牌数量。通过  <code>acquire(int tokens)</code>  方法尝试获取指定数量的令牌，如果令牌数量足够，则从桶内移除令牌，并返回 true；否则返回 false。同时，该类的 <code> addTokens()</code>  方法会根据当前时间和上一次添加令牌的时间计算出应该添加的令牌数量，并添加到桶内。</p>\n<h4 id=\"4基于时间窗口的限流\"><a class=\"anchor\" href=\"#4基于时间窗口的限流\">#</a> 4. 基于时间窗口的限流</h4>\n<p>当我们使用基于时间窗口的限流时，我们可以使用一个固定大小的数组来存储每个时间窗口内的请求数量。我们可以定义一个时间窗口的长度，例如每秒钟或每分钟一个时间窗口，然后根据这个时间窗口内的请求数量来判断是否允许该请求通过。</p>\n<p>下面是一个使用基于时间窗口的限流的 Java 代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TimeWindowRateLimiter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 限流阈值</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">long</span> windowSize<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 时间窗口大小，单位为毫秒</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">AtomicIntegerArray</span> counters<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 存储每个时间窗口内的请求数量</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ScheduledExecutorService</span> scheduler<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">TimeWindowRateLimiter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> windowSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>limit <span class=\"token operator\">=</span> limit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>windowSize <span class=\"token operator\">=</span> windowSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        counters <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicIntegerArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>windowSize <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 根据时间窗口大小计算数组长度</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        scheduler <span class=\"token operator\">=</span> <span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newScheduledThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        scheduler<span class=\"token punctuation\">.</span><span class=\"token function\">scheduleAtFixedRate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">::</span><span class=\"token function\">resetCounter</span><span class=\"token punctuation\">,</span> windowSize<span class=\"token punctuation\">,</span> windowSize<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span><span class=\"token constant\">MILLISECONDS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定期清空计数器</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">allowRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">int</span> currentCounterIndex <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">/</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> counters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算当前时间窗口所在的数组下标</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">int</span> currentCount <span class=\"token operator\">=</span> counters<span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGet</span><span class=\"token punctuation\">(</span>currentCounterIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数器加一</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentCount <span class=\"token operator\">></span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断请求数量是否超过限流阈值</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            counters<span class=\"token punctuation\">.</span><span class=\"token function\">decrementAndGet</span><span class=\"token punctuation\">(</span>currentCounterIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计数器减一</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">resetCounter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> counters<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>            counters<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清空计数器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t\t在上面的代码中，我们使用  <code>AtomicIntegerArray</code>  数组来存储每个时间窗口内的请求数量。每次有请求进来时，我们先获取当前时间并计算出当前时间所在的时间窗口所在的数组下标。然后将该数组下标对应的计数器加一，判断是否超过限流阈值，如果超过则将计数器减一并拒绝该请求。定期清空计数器以开始新的时间窗口。</p>\n<p>​\t\t基于并发数的限流一般采用信号量（ <code>Semaphore</code> ）实现，以下是一个简单的 Java 代码示例：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Semaphore</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ConcurrentLimit</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Semaphore</span> semaphore<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ConcurrentLimit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> limit<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        semaphore <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Semaphore</span><span class=\"token punctuation\">(</span>limit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runnable</span> task<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 获取信号量</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            task<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 释放信号量</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​\t\t在上面的代码中，我们通过  <code>Semaphore </code> 来实现并发数的限制。在构造方法中传入限制的并发数，每次执行任务时先调用  <code>semaphore.acquire()</code>  来获取一个信号量，如果已经达到限制的并发数，就会被阻塞直到有一个信号量被释放。任务执行完后再调用  <code>semaphore.release()</code>  来释放信号量。</p>\n<p>​\t\t你可以在需要进行限流的地方使用  <code>ConcurrentLimit</code>  对象来包装需要执行的任务，以实现并发数限制。</p>\n<h3 id=\"接口防刷各算法运用场景\"><a class=\"anchor\" href=\"#接口防刷各算法运用场景\">#</a> 接口防刷各算法运用场景</h3>\n<p>接口防刷是指限制同一用户在短时间内对接口的访问次数，以保证系统的稳定和安全。下面是几种常见的接口防刷算法及其运用场景：</p>\n<ol>\n<li><code>计数器算法</code> ：适用于对 <code>API</code>  调用频率的轻量级限制。例如在小型应用中使用，当同一个用户在指定时间内达到一定请求次数时会返回错误信息，可以用于防止恶意刷接口行为。</li>\n<li><code>漏桶算法</code> ：适用于平滑请求流量，对突发流量进行限制。例如在 <code> CDN</code>  服务中可以利用漏桶算法对网络带宽进行限流，防止网络瘫痪。</li>\n<li><code>令牌桶算法</code> ：适用于在短时间内处理请求数量比较少的场景，可以平滑地处理请求流量。例如在 <code>Web</code>  应用中限制用户的请求数量，可以保护系统不被恶意攻击。</li>\n<li><code>基于时间窗口的限流</code> ：适用于对接口并发访问数的限制。例如在高并发访问场景下，使用时间窗口限制访问频率，避免了瞬时流量过大导致服务不可用的情况。</li>\n<li><code>基于并发数的限流</code> ：适用于对服务能力的控制，避免服务过载。例如在分布式系统中，使用基于并发数的限流算法，可以控制分布式服务间的调用数量，避免服务调用链条过长，导致服务过载。</li>\n</ol>\n<p>需要注意的是，不同的算法适用于不同的场景，选择适合自己的算法是非常重要的。同时，防刷算法只是防止恶意访问的一种手段，还需要通过其他安全措施来保证系统的安全性。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "开发规范",
                "编程笔记",
                "接口开发",
                "开发注意事项"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%98%B2%E5%88%B7/",
            "url": "http://www.luotao.shop/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%98%B2%E5%88%B7/",
            "title": "接口防刷",
            "date_published": "2023-04-13T03:17:40.000Z",
            "content_html": "<h2 id=\"接口防刷\"><a class=\"anchor\" href=\"#接口防刷\">#</a> 接口防刷</h2>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "开发规范",
                "编程笔记",
                "接口开发",
                "开发注意事项"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E6%80%A7/",
            "url": "http://www.luotao.shop/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E6%80%A7/",
            "title": "接口实现幂等性",
            "date_published": "2023-04-13T03:07:40.000Z",
            "content_html": "<h2 id=\"接口实现幂等性\"><a class=\"anchor\" href=\"#接口实现幂等性\">#</a> 接口实现幂等性</h2>\n<p>实现接口的幂等性是为了确保多次调用同一个接口请求不会对系统产生不一致的影响，即使请求被重复发送或执行多次，也应该具有相同的效果。在设计和实现接口时，可以采用以下一些方法来确保接口的幂等性：</p>\n<ol>\n<li><strong>唯一请求标识符（Request Identifier）</strong>：每个请求都应该携带一个唯一的标识符，服务器端可以使用这个标识符来识别请求是否已经被处理。如果已经处理过的请求再次到达，服务器可以忽略它，或者返回相同的响应。常见的方式是在请求头或请求参数中包含一个唯一的标识符。</li>\n<li><strong>幂等性检测</strong>：在服务器端，可以对每个请求进行幂等性检测。这通常需要记录已经处理的请求标识符，并在接收到请求时检查该标识符是否已经存在于记录中。如果存在，表示请求已经被处理，可以返回相同的响应。</li>\n<li><strong>使用 HTTP 方法</strong>：HTTP 方法本身具有幂等性。例如，GET、PUT、DELETE 等 HTTP 方法都是幂等的，因此在 RESTful API 设计中，可以合理地使用这些方法来实现接口的幂等性。</li>\n<li><strong>幂等性响应处理</strong>：客户端在接收到服务器的响应后，应该能够处理重复的响应。这意味着客户端需要能够处理重复请求的情况，例如，不重复执行同一个操作或合理地处理响应数据。</li>\n<li><strong>使用事务</strong>：如果接口涉及到数据库操作或其他需要事务支持的操作，可以使用数据库事务或分布式事务来确保幂等性。事务可以保证一系列操作的原子性和幂等性。</li>\n<li><strong>版本控制</strong>：在接口中引入版本控制，使得不同版本的接口可以共存。这样，即使客户端使用旧版本接口发送请求，新版本接口仍然能够正确处理请求，保证幂等性。</li>\n<li><strong>幂等性测试</strong>：在接口开发阶段，需要进行幂等性测试，模拟多次请求，检查接口的行为是否满足幂等性要求。</li>\n<li><strong>接口文档和规范</strong>：在接口文档中明确指出接口的幂等性行为，以便客户端开发者正确使用接口。</li>\n</ol>\n<p>综上所述，实现接口的幂等性需要在接口设计和开发阶段采取一系列策略和措施，以确保不同请求对系统的影响是可预测和一致的。这对于构建可靠的分布式系统和 API 非常重要。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "开发规范",
                "编程笔记",
                "接口开发",
                "开发注意事项"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/javase/Java%E9%9B%86%E5%90%88/",
            "url": "http://www.luotao.shop/computer-science/java/javase/Java%E9%9B%86%E5%90%88/",
            "title": "Java集合",
            "date_published": "2023-04-11T14:44:59.000Z",
            "content_html": "<h2 id=\"java集合\"><a class=\"anchor\" href=\"#java集合\">#</a> Java 集合</h2>\n<h3 id=\"arraylist\"><a class=\"anchor\" href=\"#arraylist\">#</a> ArrayList</h3>\n<h3 id=\"linkedlist\"><a class=\"anchor\" href=\"#linkedlist\">#</a> LinkedList</h3>\n<h3 id=\"vector\"><a class=\"anchor\" href=\"#vector\">#</a> Vector</h3>\n<h3 id=\"set\"><a class=\"anchor\" href=\"#set\">#</a> Set</h3>\n<h3 id=\"hashmap\"><a class=\"anchor\" href=\"#hashmap\">#</a> HashMap</h3>\n<h3 id=\"hashset\"><a class=\"anchor\" href=\"#hashset\">#</a> HashSet</h3>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        },
        {
            "id": "http://www.luotao.shop/psychology/%E8%87%AA%E5%8D%91%E4%B8%8E%E8%B6%85%E8%B6%8A/%E5%BA%8F%E8%A8%80/",
            "url": "http://www.luotao.shop/psychology/%E8%87%AA%E5%8D%91%E4%B8%8E%E8%B6%85%E8%B6%8A/%E5%BA%8F%E8%A8%80/",
            "title": "序言",
            "date_published": "2023-04-06T13:58:00.000Z",
            "content_html": "<h2 id=\"自卑与超越\"><a class=\"anchor\" href=\"#自卑与超越\">#</a> 自卑与超越</h2>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "心理学",
                "自卑与超越",
                "心理学知识",
                "阿德勒心理学",
                "自卑与超越"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/python/basic/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/",
            "url": "http://www.luotao.shop/computer-science/python/basic/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/",
            "title": "语言元素",
            "date_published": "2023-04-06T09:51:49.000Z",
            "content_html": "<h2 id=\"语言元素\"><a class=\"anchor\" href=\"#语言元素\">#</a> 语言元素</h2>\n<h4 id=\"指令和程序\"><a class=\"anchor\" href=\"#指令和程序\">#</a> 指令和程序</h4>\n<p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JUFGJUMyJUI3JUU4JUFGJUJBJUU0JUJDJThBJUU2JTlCJUJDJUU3JUJCJTkzJUU2JTlFJTg0\"> “冯・诺依曼结构”</span> 的计算机。“冯・诺依曼结构” 有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种 “逢二进一” 的计数法，跟我们人类使用的 “逢十进一” 的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012 年是上一个所谓的 “太阳纪” 的最后一年，而 2013 年则是新的 “太阳纪” 的开始，后来这件事情被以讹传讹的方式误传为”2012 年是玛雅人预言的世界末日 “这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示 1，低电压表示 0），于是在 “冯・诺依曼结构” 的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJThDJUU4JUJGJTlCJUU1JTg4JUI2\">维基百科</span>或者<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20=\">百度百科</span>科普一下。</p>\n<blockquote>\n<p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018 年 6 月，Intel 宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019 年，IBM 和 Google 都推出了自己的量子计算机。</p>\n</blockquote>\n<h3 id=\"变量和类型\"><a class=\"anchor\" href=\"#变量和类型\">#</a> 变量和类型</h3>\n<p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python 中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p>\n<ul>\n<li>整型：Python 中可以处理任意大小的整数（Python 2.x 中有 <code>int</code>  和 <code>long</code>  两种类型的整数，但这种区分对 Python 来说意义不大，因此在 Python 3.x 中整数只有 int 这一种了），而且支持二进制（如 <code>0b100</code> ，换算成十进制是 4）、八进制（如 <code>0o100</code> ，换算成十进制是 64）、十进制（ <code>100</code> ）和十六进制（ <code>0x100</code> ，换算成十进制是 256）的表示法。</li>\n<li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如 <code>123.456</code> ）之外还支持科学计数法（如 <code>1.23456e2</code> ）。</li>\n<li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如 <code>'hello'</code>  和 <code>&quot;hello&quot;</code> , 字符串还有原始字符串表示法、字节字符串表示法、Unicode 字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li>\n<li>布尔型：布尔值只有 <code>True</code> 、 <code>False</code>  两种值，要么是 <code>True</code> ，要么是 <code>False</code> ，在 Python 中，可以直接用 <code>True</code> 、 <code>False</code>  表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如 <code>3 &lt; 5</code>  会产生布尔值 <code>True</code> ，而 <code>2 == 1</code>  会产生布尔值 <code>False</code> ）。</li>\n<li>复数型：形如 <code>3+5j</code> ，跟数学上的复数表示一样，唯一不同的是虚部的 <code>i</code>  换成了 <code>j</code> 。实际上，这个类型并不常用，大家了解一下就可以了。</li>\n</ul>\n<h4 id=\"变量命名\"><a class=\"anchor\" href=\"#变量命名\">#</a> 变量命名</h4>\n<p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在 Python 中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p>\n<ul>\n<li>硬性规则：\n<ul>\n<li>变量名由字母（广义的 Unicode 字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li>\n<li>大小写敏感（大写的 <code>a</code>  和小写的 <code>A</code>  是两个不同的变量）。</li>\n<li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li>\n</ul>\n</li>\n<li>PEP 8 要求：\n<ul>\n<li>用小写字母拼写，多个单词用下划线连接。</li>\n<li>受保护的实例属性用单个下划线开头（后面会讲到）。</li>\n<li>私有的实例属性用两个下划线开头（后面会讲到）。</li>\n</ul>\n</li>\n</ul>\n<p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p>\n<h4 id=\"变量的使用\"><a class=\"anchor\" href=\"#变量的使用\">#</a> 变量的使用</h4>\n<p>下面通过几个例子来说明变量的类型和变量使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用变量保存数据并进行加减乘除运算</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">321</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">12</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 333</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 309</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 3852</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># 26.75</span></pre></td></tr></table></figure><p>在 Python 中可以使用 <code>type</code>  函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用type()检查变量的类型</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">12.345</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">5j</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>d <span class=\"token operator\">=</span> <span class=\"token string\">'hello, world'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>e <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'int'></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'float'></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'complex'></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'str'></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">type</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\"># &lt;class 'bool'></span></pre></td></tr></table></figure><p>可以使用 Python 中内置的函数对变量类型进行转换。</p>\n<ul>\n<li><code>int()</code> ：将一个数值或字符串转换成整数，可以指定进制。</li>\n<li><code>float()</code> ：将一个字符串转换成浮点数。</li>\n<li><code>str()</code> ：将指定的对象转换成字符串形式，可以指定编码。</li>\n<li><code>chr()</code> ：将整数转换成该编码对应的字符串（一个字符）。</li>\n<li><code>ord()</code> ：将字符串（一个字符）转换成对应的编码（整数）。</li>\n</ul>\n<p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>使用input()函数获取键盘输入(字符串)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>使用int()函数将输入的字符串转换成整数</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>使用print()函数输出带占位符的字符串</pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'b = '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d + %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d - %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d * %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d / %d = %f'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d // %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">//</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d %% %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%d ** %d = %d'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> a <span class=\"token operator\">**</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：上面的 print 函数中输出的字符串使用了占位符语法，其中 <code>%d</code>  是整数的占位符， <code>%f</code>  是小数的占位符， <code>%%</code>  表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成 <code>%%</code> ），字符串之后的 <code>%</code>  后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p>\n</blockquote>\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<p>Python 支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code>   <code>[:]</code></td>\n<td>下标，切片</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数</td>\n</tr>\n<tr>\n<td><code>~</code>   <code>+</code>   <code>-</code></td>\n<td>按位取反，正负号</td>\n</tr>\n<tr>\n<td><code>*</code>   <code>/</code>   <code>%</code>   <code>//</code></td>\n<td>乘，除，模，整除</td>\n</tr>\n<tr>\n<td><code>+</code>   <code>-</code></td>\n<td>加，减</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code>   <code>&lt;&lt;</code></td>\n<td>右移，左移</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td><code>^</code>   <code>\\|</code></td>\n<td>按位异或，按位或</td>\n</tr>\n<tr>\n<td><code>&lt;=</code>   <code>&lt;</code>   <code>&gt;</code>   <code>&gt;=</code></td>\n<td>小于等于，小于，大于，大于等于</td>\n</tr>\n<tr>\n<td><code>==</code>   <code>!=</code></td>\n<td>等于，不等于</td>\n</tr>\n<tr>\n<td><code>is</code>    <code>is not</code></td>\n<td>身份运算符</td>\n</tr>\n<tr>\n<td><code>in</code>   <code>not in</code></td>\n<td>成员运算符</td>\n</tr>\n<tr>\n<td><code>not</code>   <code>or</code>   <code>and</code></td>\n<td>逻辑运算符</td>\n</tr>\n<tr>\n<td><code>=</code>   <code>+=</code>   <code>-=</code>   <code>*=</code>   <code>/=</code>   <code>%=</code>   <code>//=</code>   <code>**=</code>   <code>&amp;=</code>   <code>|=</code>   <code>^=</code>   <code>&gt;&gt;=</code>   <code>&lt;&lt;=</code></td>\n<td>（复合）赋值运算符</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p>\n</blockquote>\n<h4 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h4>\n<p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>赋值运算符和复合赋值运算符</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>b <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>a <span class=\"token operator\">+=</span> b        <span class=\"token comment\"># 相当于：a = a + b</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>a <span class=\"token operator\">*=</span> a <span class=\"token operator\">+</span> <span class=\"token number\">2</span>    <span class=\"token comment\"># 相当于：a = a * (a + 2)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>      <span class=\"token comment\"># 算一下这里会输出什么</span></pre></td></tr></table></figure><h3 id=\"比较运算符和逻辑运算符\"><a class=\"anchor\" href=\"#比较运算符和逻辑运算符\">#</a> 比较运算符和逻辑运算符</h3>\n<p>比较运算符有的地方也称为关系运算符，包括 <code>==</code> 、 <code>!=</code> 、 <code>&lt;</code> 、 <code>&gt;</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code> ，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是 <code>==</code> ，请注意这个地方是两个等号，因为 <code>=</code>  是赋值运算符，我们在上面刚刚讲到过， <code>==</code>  才是比较相等的比较运算符。比较运算符会产生布尔值，要么是 <code>True</code>  要么是 <code>False</code> 。</p>\n<p>逻辑运算符有三个，分别是 <code>and</code> 、 <code>or</code>  和 <code>not</code> 。 <code>and</code>  字面意思是 “而且”，所以 <code>and</code>  运算符会连接两个布尔值，如果两个布尔值都是 <code>True</code> ，那么运算的结果就是 <code>True</code> ；左右两边的布尔值有一个是 <code>False</code> ，最终的运算结果就是 <code>False</code> 。相信大家已经想到了，如果 <code>and</code>  左边的布尔值是 <code>False</code> ，不管右边的布尔值是什么，最终的结果都是 <code>False</code> ，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在 <code>and</code>  运算符左边为 <code>False</code>  的情况下，右边的表达式根本不会执行。 <code>or</code>  字面意思是 “或者”，所以 <code>or</code>  运算符也会连接两个布尔值，如果两个布尔值有任意一个是 <code>True</code> ，那么最终的结果就是 <code>True</code> 。当然， <code>or</code>  运算符也是有短路功能的，在它左边的布尔值为 <code>True</code>  的情况下，右边的表达式根本不会执行。 <code>not</code>  运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是 <code>True</code>  运算结果就是 <code>False</code> ，而后面的布尔值如果是 <code>False</code>  则运算结果就是 <code>True</code> 。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>比较运算符和逻辑运算符的使用</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>flag0 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>flag1 <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">></span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>flag2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>flag3 <span class=\"token operator\">=</span> flag1 <span class=\"token keyword\">and</span> flag2</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>flag4 <span class=\"token operator\">=</span> flag1 <span class=\"token keyword\">or</span> flag2</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>flag5 <span class=\"token operator\">=</span> <span class=\"token keyword\">not</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag0 ='</span><span class=\"token punctuation\">,</span> flag0<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag0 = True</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag1 ='</span><span class=\"token punctuation\">,</span> flag1<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag1 = True</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag2 ='</span><span class=\"token punctuation\">,</span> flag2<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag2 = False</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag3 ='</span><span class=\"token punctuation\">,</span> flag3<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag3 = False</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag4 ='</span><span class=\"token punctuation\">,</span> flag4<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag4 = True</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'flag5 ='</span><span class=\"token punctuation\">,</span> flag5<span class=\"token punctuation\">)</span>    <span class=\"token comment\"># flag5 = False</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以 <code>flag0 = 1 == 1</code>  先做 <code>1 == 1</code>  产生布尔值 <code>True</code> ，再将这个值赋值给变量 <code>flag0</code> 。 <code>print</code>  函数可以输出多个值，多个值之间可以用 <code>,</code>  进行分隔，输出的内容之间默认以空格分开。</p>\n</blockquote>\n<h3 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h3>\n<h4 id=\"练习1华氏温度转换为摄氏温度\"><a class=\"anchor\" href=\"#练习1华氏温度转换为摄氏温度\">#</a> 练习 1：华氏温度转换为摄氏温度。</h4>\n<blockquote>\n<p>提示：华氏温度到摄氏温度的转换公式为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mo>−</mo><mn>32</mn><mo stretchy=\"false\">)</mo><mo>÷</mo><mn>1.8</mn></mrow><annotation encoding=\"application/x-tex\">C=(F - 32) \\div 1.8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span></span>。</p>\n</blockquote>\n<p>参考答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>将华氏温度转换为摄氏温度</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>f <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入华氏温度: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">-</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">1.8</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'%.1f华氏度 = %.1f摄氏度'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：在使用 <code>print</code>  函数输出时，也可以对字符串内容进行格式化处理，上面 <code>print</code>  函数中的字符串 <code>%.1f</code>  是一个占位符，稍后会由一个 <code>float</code>  类型的变量值替换掉它。同理，如果字符串中有 <code>%d</code> ，后面可以用一个 <code>int</code>  类型的变量值替换掉它，而 <code>%s</code>  会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中 <code>&#123;f:.1f&#125;</code>  和 <code>&#123;c:.1f&#125;</code>  可以先看成是 <code>&#123;f&#125;</code>  和 <code>&#123;c&#125;</code> ，表示输出时会用变量 <code>f</code>  和变量 <code>c</code>  的值替换掉这两个占位符，后面的 <code>:.1f</code>  表示这是一个浮点数，小数点后保留 1 位有效数字。</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-interpolation\"><span class=\"token string\">f'</span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>f<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">华氏度 = </span><span class=\"token interpolation\"><span class=\"token punctuation\">&#123;</span>c<span class=\"token punctuation\">:</span><span class=\"token format-spec\">.1f</span><span class=\"token punctuation\">&#125;</span></span><span class=\"token string\">摄氏度'</span></span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></blockquote>\n<h4 id=\"练习2输入圆的半径计算计算周长和面积\"><a class=\"anchor\" href=\"#练习2输入圆的半径计算计算周长和面积\">#</a> 练习 2：输入圆的半径计算计算周长和面积。</h4>\n<p>参考答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入半径计算圆的周长和面积</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>radius <span class=\"token operator\">=</span> <span class=\"token builtin\">float</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入圆的半径: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>perimeter <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> <span class=\"token number\">3.1416</span> <span class=\"token operator\">*</span> radius</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>area <span class=\"token operator\">=</span> <span class=\"token number\">3.1416</span> <span class=\"token operator\">*</span> radius <span class=\"token operator\">*</span> radius</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'周长: %.2f'</span> <span class=\"token operator\">%</span> perimeter<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'面积: %.2f'</span> <span class=\"token operator\">%</span> area<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"练习3输入年份判断是不是闰年\"><a class=\"anchor\" href=\"#练习3输入年份判断是不是闰年\">#</a> 练习 3：输入年份判断是不是闰年。</h4>\n<p>参考答案：</p>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token triple-quoted-string string\">\"\"\"</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>输入年份 如果是闰年输出True 否则输出False</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\"\"\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>year <span class=\"token operator\">=</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">input</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入年份: '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 如果代码太长写成一行不便于阅读 可以使用 \\ 对代码进行折行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>is_leap <span class=\"token operator\">=</span> year <span class=\"token operator\">%</span> <span class=\"token number\">4</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token keyword\">and</span> year <span class=\"token operator\">%</span> <span class=\"token number\">100</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token keyword\">or</span> \\</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>          year <span class=\"token operator\">%</span> <span class=\"token number\">400</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>is_leap<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><blockquote>\n<p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符 <code>and</code>  和 <code>or</code>  会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出 <code>True</code> ，平年输出 <code>False</code> 。</p>\n</blockquote>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Python",
                "Python基础",
                "编程笔记",
                "python"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/javase/String%E7%B1%BB/",
            "url": "http://www.luotao.shop/computer-science/java/javase/String%E7%B1%BB/",
            "title": "String类",
            "date_published": "2023-03-31T01:37:00.000Z",
            "content_html": "<h3 id=\"string类\"><a class=\"anchor\" href=\"#string类\">#</a> String 类</h3>\n<p>​\t\t <code>String</code>  是 <code>Java</code>  中非常常用的一个类，它代表了一个字符串对象。在 <code>Java</code>  中，字符串是不可变的，也就是说，一旦一个字符串对象被创建，它的值就不能被改变。因此，每次对字符串进行修改，都会创建一个新的字符串对象。</p>\n<h3 id=\"string类为什么是不可变的\"><a class=\"anchor\" href=\"#string类为什么是不可变的\">#</a> String 类为什么是不可变的？</h3>\n<p>​\t\tString 类的不可变特性指的是 String 实例的值一旦被创建就不能被修改。这意味着对一个 String 对象进行操作时，如果需要修改其值，实际上是创建了一个新的 String 对象，并将新对象的引用赋给原对象。这种特性有助于提高程序的性能和安全性。</p>\n<p>​\t\t从源码层面来看，String 类中的不可变特性是通过使用 final 关键字和 private 修饰符来实现的。String 类中的每个方法都不会修改原有的 String 对象，而是返回一个新的 String 对象，以保持原有的 String 对象的不可变性。</p>\n<p>​\t\t例如，String 类中的 <code>concat</code>  方法可以将两个字符串连接起来，返回一个新的 String 对象，而不会修改原有的字符串：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"World\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新的 String 对象，值为 \"HelloWorld\"</span></pre></td></tr></table></figure><p>​\t\t另外，String 类还有一种常用的创建方式，即使用字符串字面值创建对象。这种方式在 Java 虚拟机中被优化，称为字符串常量池（String Pool）。当使用字符串字面值创建一个 String 对象时，Java 虚拟机会首先在字符串常量池中查找是否已存在该值的字符串对象，如果存在则返回该对象的引用，否则创建一个新的 String 对象并加入字符串常量池。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新的 String 对象并加入字符串常量池</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接返回字符串常量池中的引用，与 str1 引用同一个对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> str3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建新的 String 对象，不在字符串常量池中</span></pre></td></tr></table></figure><p>​\t\t由于 String 的不可变特性和字符串常量池的存在，可以安全地共享字符串对象，从而提高程序的性能和安全性。</p>\n<h3 id=\"string类有很多实用的方法例如\"><a class=\"anchor\" href=\"#string类有很多实用的方法例如\">#</a> <strong>String 类有很多实用的方法，例如：</strong></h3>\n<ul>\n<li><code>length()</code> ：获取字符串的长度。</li>\n<li><code>charAt(int index)</code> ：获取指定索引位置的字符。</li>\n<li><code>substring(int beginIndex, int endIndex)</code> ：获取指定索引范围内的子字符串。</li>\n<li><code>concat(String str)</code> ：将指定字符串连接到此字符串的末尾。</li>\n<li><code>indexOf(String str)</code> ：返回指定子字符串第一次出现的索引。</li>\n<li><code>equals(Object anObject)</code> ：将此字符串与指定对象进行比较。</li>\n<li><code>toUpperCase()</code> ：将字符串中的所有字符转换为大写。</li>\n<li><code>toLowerCase()</code> ：将字符串中的所有字符转换为小写。</li>\n<li>...</li>\n</ul>\n<p><strong>以下是 String 类的常用方法的例子：</strong></p>\n<ol>\n<li><code>length()</code>  方法：获取字符串的长度。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// length = 12</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>charAt(int index)</code>  方法：获取指定位置的字符。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">char</span> c <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// c = 'e'</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>substring(int beginIndex, int endIndex)</code>  方法：获取指定位置范围内的子字符串。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> subStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// subStr = \"Hello\"</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>indexOf(String str)</code>  方法：获取指定字符串在该字符串中第一次出现的位置。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// index = 6</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>lastIndexOf(String str)</code>  方法：获取指定字符串在该字符串中最后一次出现的位置。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// index = 9</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>equals(Object obj)</code>  方法：比较字符串是否相等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str1 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">boolean</span> isEqual <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// isEqual = true</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>startsWith(String prefix)</code>  方法：判断字符串是否以指定字符串开头。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> startsWith <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// startsWith = true</span></pre></td></tr></table></figure><ol start=\"8\">\n<li><code>endsWith(String suffix)</code>  方法：判断字符串是否以指定字符串结尾。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> endsWith <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"World!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// endsWith = true</span></pre></td></tr></table></figure><ol start=\"9\">\n<li><code>replace(char oldChar, char newChar)</code>  方法：用指定字符替换字符串中的所有指定字符。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> newStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token char\">'o'</span><span class=\"token punctuation\">,</span> <span class=\"token char\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// newStr = \"Hell* W*rld!\"</span></pre></td></tr></table></figure><ol start=\"10\">\n<li><code>toLowerCase()</code>  方法和 <code>toUpperCase()</code>  方法：将字符串转换为小写或大写。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello World!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> lowerCaseStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// lowerCaseStr = \"hello world!\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">String</span> upperCaseStr <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">toUpperCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// upperCaseStr = \"HELLO WORLD!\"</span></pre></td></tr></table></figure><h3 id=\"string类其他特性\"><a class=\"anchor\" href=\"#string类其他特性\">#</a> String 类其他特性</h3>\n<p>​\t\t <code>String</code>  类还支持字符串拼接操作。在 <code>Java 5</code>  之前，通常使用字符串拼接操作符 <code>+</code>  来实现字符串拼接，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t\t在 <code>Java 5</code>  及之后的版本中，还引入了 <code>StringBuilder</code>  和 <code>StringBuffer</code>  两个类来优化字符串拼接操作。这两个类可以动态地添加、修改和删除字符串中的字符，并且能够避免频繁创建新的字符串对象。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t\t当需要在多线程环境下使用字符串拼接操作时，应该使用 <code>StringBuffer</code>  类。如果在单线程环境下使用字符串拼接操作，或者需要更高的性能，应该使用 <code>StringBuilder</code>  类。</p>\n<p>​\t\t总之， <code>String</code>  类是 <code>Java</code>  中非常常用的一个类，它不仅支持字符串的基本操作，还提供了丰富的字符串处理方法，对于 <code>Java</code>  程序开发来说是一个必不可少的类。</p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/javase/%E6%97%A5%E6%9C%9F%E7%B1%BB/",
            "url": "http://www.luotao.shop/computer-science/java/javase/%E6%97%A5%E6%9C%9F%E7%B1%BB/",
            "title": "日期类",
            "date_published": "2023-03-31T01:37:00.000Z",
            "content_html": "<h2 id=\"java日期类\"><a class=\"anchor\" href=\"#java日期类\">#</a> Java 日期类</h2>\n<p>​\t\t <code>Java</code>  日期类主要包括 <code>java.util.Date</code> 、 <code>java.util.Calendar</code>  和 <code>java.time</code>  包下的类。</p>\n<p>​\t\t <code>java.util.Date</code>  类是 <code>Java</code>  提供的最早的日期类，它表示自 1970 年 1 月 1 日 0 时 0 分 0 秒 (GMT) 起的毫秒数。但是它的设计存在缺陷，所以在 <code>Java 8</code>  之后，推荐使用 java.time 包下的日期类。</p>\n<p>​\t\t <code>java.util.Calendar</code>  类是一个抽象类，提供了一些基本的日期操作，比如获取某一时间的年、月、日、时、分、秒等。但是该类使用起来比较繁琐。</p>\n<p>​\t\t <code>Java 8</code>  之后推出了全新的日期时间 <code>API</code> ， <code>java.time</code>  包下的类，包括 <code>LocalDate</code> 、 <code>LocalTime</code> 、 <code>LocalDateTime</code> 、 <code>ZonedDateTime</code>  等，这些类提供了更简单易用的方法和更好的可读性，能够更方便地进行日期和时间的计算和格式化。</p>\n<p>下面是一些常用的 Java 日期类的方法：</p>\n<h3 id=\"date\"><a class=\"anchor\" href=\"#date\">#</a> Date</h3>\n<ul>\n<li><code>Date()</code> ：创建一个表示当前时间的 Date 对象。</li>\n<li><code>getTime()</code> ：返回自 1970 年 1 月 1 日 0 时 0 分 0 秒 (GMT) 起的毫秒数。</li>\n<li><code>toString()</code> ：返回一个 String 类型的表示形式，格式为 <code>EEE MMM dd HH:mm:ss zzz yyyy</code> 。</li>\n</ul>\n<h3 id=\"calender\"><a class=\"anchor\" href=\"#calender\">#</a> Calender</h3>\n<ul>\n<li><code>getInstance()</code> ：返回一个 Calendar 对象，表示当前时间。</li>\n<li><code>get(int field)</code> ：获取指定的日期字段值，如 <code>Calendar.YEAR</code> 、 <code>Calendar.MONTH</code> 、 <code>Calendar.DAY_OF_MONTH</code>  等。</li>\n<li><code>set(int field, int value)</code> ：设置指定的日期字段值。</li>\n<li><code>getTime()</code> ：返回一个 Date 对象，表示当前时间。</li>\n</ul>\n<h2 id=\"jdk8新增的日期类\"><a class=\"anchor\" href=\"#jdk8新增的日期类\">#</a> JDK8 新增的日期类</h2>\n<p>​\t\tJava 8 中引入了  <code>java.time</code>  包，该包提供了一组全新的日期和时间 API，其中包括  <code>LocalDate</code> 、 <code>LocalDateTime</code> 、 <code>ZonedDateTime</code>  等类，它们比旧的  <code>java.util.Date</code>  和  <code>java.util.Calendar</code>  更加方便易用，同时也更加安全和健壮。</p>\n<p>以下是  <code>LocalDate</code> 、 <code>LocalDateTime</code>  的详细介绍：</p>\n<h3 id=\"localdate\"><a class=\"anchor\" href=\"#localdate\">#</a> LocalDate</h3>\n<p><code>LocalDate</code>  表示一个日期，不包含时间和时区信息。它可以用来表示一个生日、节日、合同签订日期等等。</p>\n<p>创建  <code>LocalDate</code>  对象有多种方式，比如使用  <code>now()</code>  方法获取当前日期，或者使用  <code>of()</code>  方法指定年、月、日：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> today <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2023</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以通过  <code>getYear()</code> 、 <code>getMonth()</code> 、 <code>getDayOfMonth()</code>  等方法获取日期的年、月、日等信息：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>LocalDate</code>  还提供了很多方法，比如  <code>plusDays()</code> 、 <code>minusMonths()</code>  等，用于对日期进行加减操作。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> tomorrow <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span> previousMonthSameDay <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">minusMonths</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>LocalDate</code>  也支持一些常用的比较方法，比如  <code>isBefore()</code> 、 <code>isAfter()</code> 、 <code>isEqual()</code> ，用于比较两个日期的先后顺序：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> isBefore <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span>tomorrow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> isAfter <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>previousMonthSameDay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">boolean</span> isEqual <span class=\"token operator\">=</span> today<span class=\"token punctuation\">.</span><span class=\"token function\">isEqual</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"localdatetime\"><a class=\"anchor\" href=\"#localdatetime\">#</a> LocalDateTime</h3>\n<p><code>LocalDateTime</code>  表示一个日期时间，不包含时区信息。它可以用来表示一个会议时间、发布时间、交易时间等等。</p>\n<p>创建  <code>LocalDateTime</code>  对象有多种方式，比如使用  <code>now()</code>  方法获取当前日期时间，或者使用  <code>of()</code>  方法指定年、月、日、时、分、秒等：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2023</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>我们可以通过  <code>getYear()</code> 、 <code>getMonth()</code> 、 <code>getDayOfMonth()</code> 、 <code>getHour()</code> 、 <code>getMinute()</code> 、 <code>getSecond()</code>  等方法获取日期时间的年、月、日、时、分、秒等信息：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> month <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getMonthValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> day <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getHour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getMinute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>LocalDateTime</code>  类是 Java 8 中的日期时间类，表示日期和时间，不带时区信息。下面是 <code>LocalDateTime</code>  类中常用的一些方法：</p>\n<ol>\n<li><code>now()</code> ：获取当前日期时间。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>of()</code> ：根据指定的年、月、日、时、分、秒、毫秒等参数创建一个 <code>LocalDateTime</code>  实例。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">2022</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>plusXxx()</code> ：在当前 <code>LocalDateTime</code>  的基础上增加指定的时间量，其中 Xxx 可以是 <code>Years、Months、Weeks、Days、Hours、Minutes、Seconds</code>  等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> plusOneDay <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>minusXxx()</code> ：在当前 <code>LocalDateTime</code>  的基础上减少指定的时间量，其中 Xxx 可以是 <code>Years、Months、Weeks、Days、Hours、Minutes、Seconds</code>  等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> minusOneHour <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">minusHours</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>getXxx()</code> ：获取 <code>LocalDateTime</code>  的指定部分，其中 Xxx 可以是 <code>Year、Month、DayOfMonth、DayOfWeek、DayOfYear、Hour、Minute、Second、NanoOfSecond</code>  等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">int</span> year <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Month</span> month <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">int</span> dayOfMonth <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">DayOfWeek</span> dayOfWeek <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getDayOfWeek</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">int</span> hour <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getHour</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">int</span> minute <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getMinute</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">int</span> second <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">int</span> nano <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">getNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>withXxx()</code> ：设置 <code>LocalDateTime</code>  的指定部分，其中 Xxx 可以是 <code>Year、Month、DayOfMonth、DayOfWeek、DayOfYear、Hour、Minute、Second、NanoOfSecond</code>  等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> withYear2023 <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">withYear</span><span class=\"token punctuation\">(</span><span class=\"token number\">2023</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>isXxx()</code> ：判断 <code>LocalDateTime</code>  的指定部分是否满足某个条件，其中 Xxx 可以是 <code>LeapYear、After、Before</code>  等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">boolean</span> isLeapYear <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isLeapYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li><code>toXxx()</code> ：将 <code>LocalDateTime</code>  转换为其他日期时间类，其中 Xxx 可以是 <code>LocalDate</code> 、 <code>LocalTime</code> 、 <code>Instant</code>  等。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span> date <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalTime</span> time <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toLocalTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> dateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span><span class=\"token constant\">UTC</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这些是 <code>LocalDateTime</code>  类中比较常用的方法，可以方便地对日期时间进行操作和计算。</p>\n<h3 id=\"instant\"><a class=\"anchor\" href=\"#instant\">#</a> Instant</h3>\n<p>Java 的 <code>Instant</code>  类是用来表示时刻的类，可以精确到纳秒级别。它是不可变的，线程安全的。 <code>Instant</code>  类是在 Java 8 中引入的，它提供了与时区无关的机制来处理日期和时间。</p>\n<p><code>Instant</code>  类的实例可以从时钟获取当前时间，也可以从另一个 <code>Instant</code>  实例中创建，或者通过解析表示 ISO-8601 格式的字符串来创建。 <code>Instant</code>  类的 API 提供了许多方法来操作 <code>Instant</code>  实例，以下是一些常用方法：</p>\n<ol>\n<li><code>now()</code> ：获取当前时间戳的 <code>Instant</code>  实例。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Instant</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><code>ofEpochSecond()</code> ：根据秒数创建 <code>Instant</code>  实例。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochSecond</span><span class=\"token punctuation\">(</span><span class=\"token number\">1614305156</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><code>ofEpochMilli()</code> ：根据毫秒数创建 <code>Instant</code>  实例。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofEpochMilli</span><span class=\"token punctuation\">(</span><span class=\"token number\">1614305156000L</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"4\">\n<li><code>getEpochSecond()</code> ：获取秒数。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">long</span> epochSecond <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">getEpochSecond</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li><code>getNano()</code> ：获取纳秒数。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> nano <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">getNano</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"6\">\n<li><code>plusSeconds()</code> ：添加指定的秒数。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Instant</span> newInstant <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">plusSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"7\">\n<li><code>minusSeconds()</code> ：减去指定的秒数。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Instant</span> newInstant <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">minusSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"8\">\n<li><code>isAfter()</code> ：判断是否在指定的 Instant 实例之后。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> isAfter <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">isAfter</span><span class=\"token punctuation\">(</span>anotherInstant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"9\">\n<li><code>isBefore()</code> ：判断是否在指定的 <code>Instant</code>  实例之前。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">boolean</span> isBefore <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">isBefore</span><span class=\"token punctuation\">(</span>anotherInstant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"10\">\n<li><code>toString()</code> ：将 <code>Instant</code>  实例转换为字符串。</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总之， <code>Instant</code>  类提供了一种简单而灵活的方式来处理日期和时间，它适用于需要精确处理时间戳的应用程序。</p>\n<h3 id=\"timestamp\"><a class=\"anchor\" href=\"#timestamp\">#</a> Timestamp</h3>\n<p>Java 中的 <code>Timestamp</code>  类是用于处理数据库中日期时间类型的类，继承自 <code>java.util.Date</code>  类，但是它的精度要高于 <code>Date</code>  类，可以精确到纳秒级别。 <code>Timestamp</code>  类在 <code>JDBC</code>  程序中很常用，它可以表示精确到秒的时间戳。</p>\n<p><code>Timestamp</code>  类的构造方法有以下几种：</p>\n<ol>\n<li><code>Timestamp(long time)</code> ：根据指定的时间创建一个 <code>Timestamp</code>  对象。</li>\n<li><code>Timestamp(String s)</code> ：根据字符串表示的时间创建一个 <code>Timestamp</code>  对象。</li>\n<li><code>Timestamp(int year, int month, int date, int hour, int minute, int second, int nano)</code> ：根据指定的年、月、日、时、分、秒和纳秒数创建一个 <code>Timestamp</code>  对象。</li>\n</ol>\n<p><code>Timestamp</code>  类中的常用方法包括：</p>\n<ol>\n<li><code>getTime()</code> ：返回以毫秒表示的 <code>Timestamp</code>  值。</li>\n<li><code>valueOf(String s)</code> ：将指定的字符串转换为 <code>Timestamp</code>  类型。</li>\n<li><code>valueOf(LocalDateTime dateTime)</code> ：将指定的 <code>LocalDateTime</code>  转换为 <code>Timestamp</code>  类型。</li>\n<li><code>toLocalDateTime()</code> ：将 <code>Timestamp</code>  对象转换为 <code>LocalDateTime</code>  对象。</li>\n<li><code>compareTo(Timestamp ts)</code> ：比较两个 <code>Timestamp</code>  对象的大小。</li>\n<li><code>equals(Object ts)</code> ：判断当前 <code>Timestamp</code>  对象是否与指定对象相等。</li>\n<li><code>toString()</code> ：将 <code>Timestamp</code>  对象转换为字符串表示。</li>\n<li><code>setNanos(int n)</code> ：设置 <code>Timestamp</code>  对象的纳秒数。</li>\n<li><code>setYear(int year)</code> ：设置 <code>Timestamp</code>  对象的年份。</li>\n<li><code>setMonth(int month)</code> ：设置 <code>Timestamp</code>  对象的月份。</li>\n<li><code>setDate(int date)</code> ：设置 <code>Timestamp</code>  对象的日期。</li>\n<li><code>setHours(int hours)</code> ：设置 <code>Timestamp</code>  对象的小时。</li>\n<li><code>setMinutes(int minutes)</code> ：设置 <code>Timestamp</code>  对象的分钟。</li>\n<li><code>setSeconds(int seconds)</code> ：设置 <code>Timestamp</code>  对象的秒数。</li>\n</ol>\n<p>总之， <code>Timestamp</code>  类是 Java 中处理时间戳的一个重要类，它可以很方便地将时间戳转换为日期时间类型，或者将日期时间类型转换为时间戳。在开发中，我们通常会使用 <code>Timestamp</code>  来操作数据库中的时间类型数据。</p>\n<h3 id=\"locale\"><a class=\"anchor\" href=\"#locale\">#</a> Locale</h3>\n<p>Java 中的 <code>Locale</code>  类表示了特定地理、政治或文化区域的信息，比如国家、语言、货币等。通过 <code>Locale</code>  类，Java 程序可以获取与地区相关的信息，例如日期和时间格式、货币符号、语言环境等。 <code>Locale</code>  类的实例表示一个特定的地理、政治或文化区域，由语言代码和国家（或地区）代码组成，例如 “en_US” 表示美国英语环境。</p>\n<p><code>Locale</code>  类提供了多个构造函数和静态方法，用于创建和获取特定的地理、政治或文化区域。常用的构造函数和方法包括：</p>\n<ol>\n<li><code>Locale(String language) </code> 通过指定的语言代码创建一个 <code>Locale</code>  实例，国家代码默认为 &quot;&quot;。</li>\n<li><code>Locale(String language, String country)</code>  通过指定的语言代码和国家代码创建一个 <code>Locale</code>  实例。</li>\n<li><code>Locale(String language, String country, String variant)</code>  通过指定的语言代码、国家代码和变量创建一个 <code>Locale</code>  实例。</li>\n<li><code>Locale.getDefault() </code> 获取当前默认的 <code>Locale</code>  实例。</li>\n<li><code>Locale.getAvailableLocales()</code>  获取所有可用的 <code>Locale</code>  实例。</li>\n<li><code>getCountry()</code>  获取 <code>Locale</code>  实例的国家代码。</li>\n<li><code>getLanguage() </code> 获取 <code>Locale</code>  实例的语言代码。</li>\n<li><code>getDisplayName() </code> 获取 <code>Locale</code>  实例的显示名称。</li>\n<li><code>getDisplayName(Locale inLocale) </code> 获取在指定 Locale 环境下的 <code>Locale</code>  实例的显示名称。</li>\n</ol>\n<p><code>Locale</code>  类的应用场景包括但不限于以下几种：</p>\n<ol>\n<li>本地化日期、时间、货币等格式</li>\n<li>国际化应用程序的开发</li>\n<li>区域性数据的处理</li>\n<li>多语言文本的翻译和处理</li>\n</ol>\n<h3 id=\"zone相关的类\"><a class=\"anchor\" href=\"#zone相关的类\">#</a> Zone 相关的类</h3>\n<p>在 Java 中，关于时区的相关操作主要是通过  <code>java.time.Zone</code>  相关的类来完成的。</p>\n<p>首先， <code>ZoneId</code>  类表示了一个时区标识符，可以使用  <code>ZoneId.of()</code>  方法来获取。比如，以下代码可以获取表示 &quot;Asia/Shanghai&quot; 时区的  <code>ZoneId</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ZoneId</span> zoneId <span class=\"token operator\">=</span> <span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Shanghai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ZoneOffset</code>  类表示了一个以秒为单位的时间偏移量，可以使用  <code>ZoneOffset.ofTotalSeconds()</code>  方法来获取。比如，以下代码可以获取表示东八区的  <code>ZoneOffset</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ZoneOffset</span> offset <span class=\"token operator\">=</span> <span class=\"token class-name\">ZoneOffset</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofTotalSeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span> <span class=\"token operator\">*</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>ZonedDateTime</code>  类表示了一个带时区的日期和时间。可以使用  <code>ZonedDateTime.of()</code>  方法来创建一个  <code>ZonedDateTime</code>  对象。比如，以下代码可以创建表示当前时间在东八区的  <code>ZonedDateTime</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">ZonedDateTime</span> zonedDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">ZonedDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Shanghai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>另外，Java 还提供了一些方便的方法来进行时区转换。比如， <code>LocalDateTime</code>  可以使用  <code>atZone()</code>  方法将其转换为  <code>ZonedDateTime</code> ，然后使用  <code>withZoneSameInstant()</code>  方法将其转换为另一个时区的  <code>ZonedDateTime</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ZonedDateTime</span> shanghaiTime <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Shanghai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">ZonedDateTime</span> newYorkTime <span class=\"token operator\">=</span> shanghaiTime<span class=\"token punctuation\">.</span><span class=\"token function\">withZoneSameInstant</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"America/New_York\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>类似的， <code>Instant</code>  可以使用  <code>atZone()</code>  方法将其转换为  <code>ZonedDateTime</code> ，然后使用  <code>toInstant()</code>  方法将其转换为  <code>Instant</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">ZonedDateTime</span> zonedDateTime <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Asia/Shanghai\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Instant</span> newYorkTime <span class=\"token operator\">=</span> zonedDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后，需要注意的是，在处理时区相关的操作时，一定要注意时间的格式化和解析。比如，在使用  <code>SimpleDateFormat</code>  进行时间格式化时，应该使用带时区的格式化器来避免时区转换时的问题。</p>\n<h3 id=\"日期格式化\"><a class=\"anchor\" href=\"#日期格式化\">#</a> 日期格式化</h3>\n<p>在 Java 中，可以使用格式化来将日期对象格式化为字符串。Java 提供了两种格式化方式：</p>\n<ol>\n<li>使用 <code>java.text.SimpleDateFormat</code>  类，该类可以根据指定的格式将日期格式化为字符串。</li>\n</ol>\n<p>例如，下面的代码将 <code>Date</code>  对象格式化为字符串：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SimpleDateFormat</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Date</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateFormatExample</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">Date</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">SimpleDateFormat</span> dateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> strDate <span class=\"token operator\">=</span> dateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>strDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2022<span class=\"token punctuation\">-</span>08<span class=\"token punctuation\">-</span>22 16<span class=\"token punctuation\">:</span><span class=\"token datetime number\">32:11</span></pre></td></tr></table></figure><ol>\n<li>使用 <code>java.time.format.DateTimeFormatter</code>  类，该类是 Java 8 新引入的日期时间格式化类，使用方式类似于 <code>SimpleDateFormat</code> 。</li>\n</ol>\n<p>例如，下面的代码将 <code>LocalDateTime</code>  对象格式化为字符串：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">LocalDateTime</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>time<span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">DateTimeFormatter</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DateTimeFormatterExample</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">LocalDateTime</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">String</span> strDate <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>strDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>输出结果：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>2022<span class=\"token punctuation\">-</span>08<span class=\"token punctuation\">-</span>22 16<span class=\"token punctuation\">:</span><span class=\"token datetime number\">32:11</span></pre></td></tr></table></figure><p>需要注意的是，在使用 <code>DateTimeFormatter</code>  格式化 <code>java.time</code>  包中的日期时间类时，要使用对应的格式化模式，例如年份用大写的 <code>yyyy</code>  表示，月份用小写的 <code>mm</code>  表示等。</p>\n<p>另外，如果需要将字符串转换为日期对象，可以使用 <code>SimpleDateFormat</code>  或 <code>DateTimeFormatter</code>  中的 <code>parse</code>  方法，例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> strDate <span class=\"token operator\">=</span> <span class=\"token string\">\"2022-08-22 16:32:11\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">SimpleDateFormat</span> dateFormat <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SimpleDateFormat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Date</span> date <span class=\"token operator\">=</span> dateFormat<span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>strDate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或者</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> strDate <span class=\"token operator\">=</span> <span class=\"token string\">\"2022-08-22 16:32:11\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">DateTimeFormatter</span> formatter <span class=\"token operator\">=</span> <span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> dateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>strDate<span class=\"token punctuation\">,</span> formatter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>需要注意的是，在使用 <code>SimpleDateFormat</code>  解析日期字符串时，要使用与格式化模式相同的模式进行解析。而使用 <code>DateTimeFormatter</code>  时，可以根据需要指定格式化模式。</p>\n<h3 id=\"日期类的相互转化\"><a class=\"anchor\" href=\"#日期类的相互转化\">#</a> 日期类的相互转化</h3>\n<p>​\t在 Java 中，我们可以使用各种日期类进行日期的操作。这些日期类包括  <code>java.util.Date</code> 、 <code>java.sql.Date</code> 、 <code>java.util.Calendar</code> 、 <code>java.time.LocalDate</code> 、 <code>java.time.LocalDateTime</code> 、 <code>java.time.Instant</code>  等。为了进行不同日期类之间的相互转化，Java 提供了一些方法。</p>\n<p>下面是一些常见的日期类之间的转化方法：</p>\n<ol>\n<li>\n<p><code>java.util.Date</code>  和  <code>java.sql.Date</code>  的转化</p>\n<ul>\n<li>\n<p>将  <code>java.util.Date</code>  转换成  <code>java.sql.Date</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span> sqlDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将  <code>java.sql.Date</code>  转换成  <code>java.util.Date</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span> sqlDate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>sql<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span>sqlDate<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>java.util.Date</code>  和  <code>java.time.LocalDateTime</code>  的转化</p>\n<ul>\n<li>\n<p>将  <code>java.util.Date</code>  转换成  <code>java.time.LocalDateTime</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> instant<span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDateTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将  <code>java.time.LocalDateTime</code>  转换成  <code>java.util.Date</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>java.util.Calendar</code>  和  <code>java.time.LocalDateTime</code>  的转化</p>\n<ul>\n<li>\n<p>将  <code>java.util.Calendar</code>  转换成  <code>java.time.LocalDateTime</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofInstant</span><span class=\"token punctuation\">(</span>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> calendar<span class=\"token punctuation\">.</span><span class=\"token function\">getTimeZone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toZoneId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将  <code>java.time.LocalDateTime</code>  转换成  <code>java.util.Calendar</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDateTime</span> localDateTime <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Calendar</span> calendar <span class=\"token operator\">=</span> <span class=\"token class-name\">Calendar</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>calendar<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeInMillis</span><span class=\"token punctuation\">(</span>localDateTime<span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEpochMilli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>java.util.Date</code>  和  <code>java.time.Instant</code>  的转化</p>\n<ul>\n<li>\n<p>将  <code>java.util.Date</code>  转换成  <code>java.time.Instant</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将  <code>java.time.Instant</code>  转换成  <code>java.util.Date</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> <span class=\"token class-name\">Instant</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>java.util.Date</code>  和  <code>java.time.LocalDate</code>  的转化</p>\n<ul>\n<li>\n<p>将  <code>java.util.Date</code>  转换成  <code>java.time.LocalDate</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">LocalDate</span> localDate <span class=\"token operator\">=</span> date<span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocalDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>将  <code>java.time.LocalDate</code>  转换成  <code>java.util.Date</code> ：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">LocalDate</span> localDate <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Instant</span> instant <span class=\"token operator\">=</span> localDate<span class=\"token punctuation\">.</span><span class=\"token function\">atStartOfDay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">atZone</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ZoneId</span><span class=\"token punctuation\">.</span><span class=\"token function\">systemDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toInstant</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span> date <span class=\"token operator\">=</span> <span class=\"token class-name\"><span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span>Date</span><span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>instant<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/javase/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "url": "http://www.luotao.shop/computer-science/java/javase/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/",
            "title": "Java基本数据类型",
            "date_published": "2023-03-30T16:00:01.000Z",
            "content_html": "<h2 id=\"java八大基本数据类型\"><a class=\"anchor\" href=\"#java八大基本数据类型\">#</a> Java 八大基本数据类型</h2>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>大小</th>\n<th>默认值</th>\n<th>取值范围</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>1 字节</td>\n<td>0</td>\n<td>-128 到 127</td>\n<td>有符号整数</td>\n</tr>\n<tr>\n<td>short</td>\n<td>2 字节</td>\n<td>0</td>\n<td>-32,768 到 32,767</td>\n<td>有符号整数</td>\n</tr>\n<tr>\n<td>int</td>\n<td>4 字节</td>\n<td>0</td>\n<td>-2,147,483,648 到 2,147,483,647</td>\n<td>有符号整数</td>\n</tr>\n<tr>\n<td>long</td>\n<td>8 字节</td>\n<td>0L</td>\n<td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td>\n<td>有符号整数</td>\n</tr>\n<tr>\n<td>float</td>\n<td>4 字节</td>\n<td>0.0f</td>\n<td>1.4E-45 到 3.4028235E38</td>\n<td>浮点数</td>\n</tr>\n<tr>\n<td>double</td>\n<td>8 字节</td>\n<td>0.0d</td>\n<td>4.9E-324 到 1.7976931348623157E308</td>\n<td>双精度浮点数</td>\n</tr>\n<tr>\n<td>char</td>\n<td>2 字节</td>\n<td>'\\u0000'</td>\n<td>'\\u0000' 到 '\\uffff' (0 到 65,535)</td>\n<td>Unicode 字符</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>没有固定大小</td>\n<td>false</td>\n<td>true 或 false</td>\n<td>true 或 false 值</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"java基本数据类型对应的包装类\"><a class=\"anchor\" href=\"#java基本数据类型对应的包装类\">#</a> Java 基本数据类型对应的包装类</h3>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>对应包装类</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"包装类常用方法和特别设计\"><a class=\"anchor\" href=\"#包装类常用方法和特别设计\">#</a> 包装类常用方法和特别设计</h3>\n<ul>\n<li><code>Byte</code>\n<ul>\n<li>常用方法：valueOf (byte b)、byteValue ()、compareTo (Byte anotherByte)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：缓存了 - 128~127 之间的所有 Byte 对象，可以使用 Byte.valueOf (byte b) 方法直接返回缓存的对象，避免重复创建对象</li>\n</ul>\n</li>\n<li><code>Short</code>\n<ul>\n<li>常用方法：valueOf (short s)、shortValue ()、compareTo (Short anotherShort)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：缓存了 - 128~127 之间的所有 Short 对象，可以使用 Short.valueOf (short s) 方法直接返回缓存的对象，避免重复创建对象</li>\n</ul>\n</li>\n<li><code>Integer</code>\n<ul>\n<li>常用方法：valueOf (int i)、intValue ()、compareTo (Integer anotherInteger)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：缓存了 - 128~127 之间的所有 Integer 对象，可以使用 Integer.valueOf (int i) 方法直接返回缓存的对象，避免重复创建对象</li>\n</ul>\n</li>\n<li><code>Long</code>\n<ul>\n<li>常用方法：valueOf (long l)、longValue ()、compareTo (Long anotherLong)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：缓存了 - 128~127 之间的所有 Long 对象，可以使用 Long.valueOf (long l) 方法直接返回缓存的对象，避免重复创建对象</li>\n</ul>\n</li>\n<li><code>Float</code>\n<ul>\n<li>常用方法：valueOf (float f)、floatValue ()、compareTo (Float anotherFloat)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：没有特别设计</li>\n</ul>\n</li>\n<li><code>Double</code>\n<ul>\n<li>常用方法：valueOf (double d)、doubleValue ()、compareTo (Double anotherDouble)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：没有特别设计</li>\n</ul>\n</li>\n<li><code>Character</code>\n<ul>\n<li>常用方法：valueOf (char c)、charValue ()、compareTo (Character anotherCharacter)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：缓存了 0~127 之间的所有 Character 对象，可以使用 Character.valueOf (char c) 方法直接返回缓存的对象，避免重复创建对象</li>\n</ul>\n</li>\n<li><code>Boolean</code>\n<ul>\n<li>常用方法：valueOf (boolean b)、booleanValue ()、compareTo (Boolean anotherBoolean)、equals (Object obj)、toString ()、hashCode ()</li>\n<li>特别设计：缓存了 Boolean 类型的 TRUE 和 FALSE 两个对象</li>\n</ul>\n</li>\n</ul>\n<p>​\t\t当 Java 自动装箱时，会重用对象，将一些常见的包装类对象缓存起来以提高性能和降低内存占用。下面是几个常用的包装类缓存示例：</p>\n<h3 id=\"包装类缓存示例\"><a class=\"anchor\" href=\"#包装类缓存示例\">#</a> 包装类缓存示例</h3>\n<ol>\n<li><strong>Integer 类的缓存示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> b <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 10 在缓存范围内</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Integer</span> c <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Integer</span> d <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false，因为 128 不在缓存范围内</span></pre></td></tr></table></figure><p>​\t\t<strong>解释</strong>：在 Integer 类中，缓存了 -128 到 127 的 Integer 对象。因此，当值为在这个范围内时，自动装箱后的对象会直接从缓存中获取，而不是新建一个对象。因此，a 和 b 的值都是 10，因为它们共享了同一个对象，所以比较时结果为 true。而 c 和 d 的值都是 128，但由于它们不在缓存范围内，所以自动装箱后会新建两个对象，所以比较时结果为 false。</p>\n<ol>\n<li><strong>Boolean 类的缓存示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Boolean</span> a <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> b <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 true 和 false 都有缓存</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Boolean</span> c <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Boolean</span> d <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 true 和 false 都有缓存</span></pre></td></tr></table></figure><p>​\t\t<strong>解释</strong>：在 Boolean 类中，缓存了 true 和 false 两个对象。因此，当自动装箱时，这两个对象会直接从缓存中获取，而不是新建对象。因此，a 和 b 都是 true，且共享了同一个对象，所以比较时结果为 true。而 c 和 d 都是 false，且共享了同一个对象，所以比较时结果为 true。</p>\n<ol>\n<li><strong>Character 类的缓存示例：</strong></li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Character</span> a <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Character</span> b <span class=\"token operator\">=</span> <span class=\"token char\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true，因为 a 在缓存范围内</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Character</span> c <span class=\"token operator\">=</span> <span class=\"token char\">'中'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Character</span> d <span class=\"token operator\">=</span> <span class=\"token char\">'中'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false，因为 ' 中 ' 不在缓存范围内</span></pre></td></tr></table></figure><p>​\t\t<strong>解释</strong>：在 Character 类中，缓存了 Unicode 编码从 0 到 127 的字符。因此，当自动装箱时，这些字符会直接从缓存中获取，而不是新建对象。因此，a 和 b 的值都是 'a'，且共享了同一个对象，所以比较时结果为 true。而 c 和 d 的值都是 ' 中 '，但由于它们不在缓存范围内，所以自动装箱后会新建两个对象，所以比较时结果为 false。</p>\n<p>​\t\t需要注意的是，虽然自动装箱时会重用对象，但如果使用构造函数手动创建对象，则不会使用缓存，每次都会新建一个对象。</p>\n<h3 id=\"包装类对象的相互转化\"><a class=\"anchor\" href=\"#包装类对象的相互转化\">#</a> 包装类对象的相互转化</h3>\n<p>​\t\t当我们需要在基本数据类型和包装类之间进行转换时，可以使用 Java 中提供的自动装箱和自动拆箱机制，也可以手动调用包装类提供的转换方法。以下是一些常见的基本数据类型和包装类之间的转换示例：</p>\n<ol>\n<li>基本数据类型转换成对应的包装类：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> numWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>包装类转换成对应的基本数据类型：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Double</span> doubleWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Double</span><span class=\"token punctuation\">(</span><span class=\"token number\">3.14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">double</span> num <span class=\"token operator\">=</span> doubleWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">doubleValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用自动装箱和自动拆箱：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> numWrapper <span class=\"token operator\">=</span> num<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 自动装箱</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">int</span> newNum <span class=\"token operator\">=</span> numWrapper<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 自动拆箱</span></pre></td></tr></table></figure><ol start=\"4\">\n<li>字符串转换成包装类：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> numWrapper <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"5\">\n<li>包装类转换成字符串：</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Integer</span> numWrapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> numWrapper<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>​\t\t需要注意的是，在进行基本数据类型和字符串之间的转换时，也可以使用  <code>parseInt()</code>  和  <code>valueOf()</code>  等方法。例如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">int</span> num <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"自动装箱和自动拆箱\"><a class=\"anchor\" href=\"#自动装箱和自动拆箱\">#</a> 自动装箱和自动拆箱</h3>\n<p>​\t\t在 Java 中，自动装箱和自动拆箱是指基本数据类型与其对应的包装类之间的自动转换，使得它们在使用上可以互相替换，从而使代码更加简洁和易读。</p>\n<p>​\t\t具体来说，自动装箱是指将基本数据类型自动转换为对应的包装类，而自动拆箱则是指将包装类自动转换为对应的基本数据类型。这样一来，程序员在使用时就无需手动进行类型转换，编译器会自动帮助完成。</p>\n<p>​\t\t下面是自动装箱和自动拆箱的示例代码：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 自动装箱</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Integer</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 相当于 Integer i = Integer.valueOf (10);</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 自动拆箱</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 相当于 int j = i.intValue ();</span></pre></td></tr></table></figure><p>​\t\t从上面的示例代码可以看出，自动装箱和自动拆箱让代码更加简洁，减少了程序员的工作量，提高了代码的可读性和可维护性。</p>\n<p>​\t\t其原理是编译器自动在编译时将代码进行转换。对于自动装箱，编译器会将基本数据类型转换为对应的包装类类型，调用相应的 valueOf 方法进行装箱；对于自动拆箱，编译器会将包装类类型转换为对应的基本数据类型，调用相应的 xxxValue 方法进行拆箱。这样一来，程序员就可以像操作基本数据类型一样操作包装类类型了。</p>\n<p>​\t\t需要注意的是，自动装箱和自动拆箱虽然方便了编程，但是也会带来性能问题。在大量使用时，建议手动进行类型转换，以提高程序性能。</p>\n<h3 id=\"其他注意项\"><a class=\"anchor\" href=\"#其他注意项\">#</a> 其他注意项</h3>\n<ol>\n<li><strong>类型转换</strong>：Java 中的数据类型有不同的大小和精度，如果将一个大的数据类型转换为一个小的数据类型，会导致数据精度的丢失，这就需要进行类型转换。类型转换可以分为隐式类型转换和显式类型转换两种。</li>\n<li><strong>final 关键字</strong>：final 关键字可以用来修饰变量、方法和类。final 修饰的变量不能被修改，final 修饰的方法不能被覆盖，final 修饰的类不能被继承。对于基本数据类型，final 修饰的变量必须被初始化，一旦被初始化后就不能再次被修改。</li>\n<li><strong>枚举类型</strong>：Java 中的枚举类型可以列出一组常量，并为这些常量赋予特定的值。枚举类型可以用来取代常量，使代码更加可读和易于维护。枚举类型也是一种特殊的类，可以有构造函数、方法和字段。</li>\n<li><strong>变量作用域</strong>：在 Java 中，变量有不同的作用域，变量的作用域决定了变量在程序中可以被访问的范围。Java 中有四种作用域：类作用域、方法作用域、块作用域和局部作用域。</li>\n<li><strong>常量池</strong>：Java 中的常量池是指在编译时确定的、存储在.class 文件中的常量集合。常量池中可以包含字符串、数字、类名、方法名等常量。Java 的数据类型也有对应的常量池，例如 Integer 类型的常量池中包含了 - 128~127 之间的整数。常量池可以提高程序的运行效率，减少内存的占用。</li>\n</ol>\n<p><strong>这些内容也是 Java 数据类型中比较重要的一些方面，需要开发者在日常的开发中注意。</strong></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/javase/Java%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/",
            "url": "http://www.luotao.shop/computer-science/java/javase/Java%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/",
            "title": "Java发展历程",
            "date_published": "2023-03-30T03:43:30.000Z",
            "content_html": "<h3 id=\"为什么叫java\"><a class=\"anchor\" href=\"#为什么叫java\">#</a> 为什么叫 Java？</h3>\n<p>​\t\t\tJava 平台和语言最开始只是 SUN 公司在 1990 年 12 月开始研究的一个内部项目。SUN 公司的一个叫做帕特里克・诺顿的工程师被自己开发的 C 和 C 语言编译器搞得焦头烂额，因为其中的 API 极其难用。帕特里克决定改用 NeXT，同时他也获得了研究公司的一个叫做 “Stealth 计划” 的项目的机会。<br />\n   “Stealth 计划” 后来改名为 “Green 计划”，JGosling (詹姆斯・高斯林）和麦克・舍林丹也加入了帕特里克的工作小组。他们和其他几个工程师一起在加利福尼亚州门罗帕克市沙丘路的一个小工作室里面研究开发新技术，瞄准下一代智能家电（如微波炉）的程序设计，SUN 公司预料未来科技将在家用电器领域大显身手。团队最初考虑使用 C 语言，但是很多成员包括 SUN 的首席科学家比尔・乔伊，发现 C 和可用的 API 在某些方面存在很大问题。<br />\n   工作小组使用的是内嵌类型平台，可以用的资源极其有限。很多成员发现 C 太复杂以至很多开发者经常错误使用。他们发现 C 缺少垃圾回收系统，还有可移植的安全性、分布程序设计、和多线程功能。最后，他们想要一种易于移植到各种设备上的平台。<br />\n   根据可用的资金，比尔・乔伊决定开发一种集 C 语言和 Mesa 语言搭成的新语言，在一份报告上，乔伊把它叫做 “未来”，他提议 SUN 公司的工程师应该在 C 的基础上，开发一种面向对象的环境。最初，高斯林试图修改和扩展 C 的功能，他自己称这种新语言为 C –，但是后来他放弃了。他将要创造出一种全新的语言，被他命名为 “Oak”（橡树），以他的办公室外的树而命名。<br />\n就像很多开发新技术的秘密的工程一样，工作小组没日没夜地工作到了 1992 年的夏天，他们能够演示新平台的一部分了，包括 Green 操作系统，Oak 的程序设计语言，类库，和其硬件。最初的尝试是面向一种类 PDA 设备，被命名为 Star7，这种设备有鲜艳的图形界面和被称为 “Duke” 的智能代理来帮助用户。1992 年 12 月 3 日，这台设备进行了展示。<br />\n   同年 11 月，Green 计划被转化成了 “FirstPerson 有限公司”，一个 SUN 公司的全资子公司，团队也被重新安排到了帕洛阿尔托。FirstPerson 团队对建造一种高度互动的设备感兴趣，当时代华纳发布了一个关于电视机顶盒的征求提议书时（Request for proposal），FirstPerson 改变了他们的目标，作为对征求意见书的响应，提出了一个机顶盒平台的提议。但是有线电视业界觉得 FirstPerson 的平台给予用户过多地控制权，因此 FirstPerson 的投标败给了 SGI。与 3DO 公司的另外一笔关于机顶盒的交易也没有成功，由于他们的平台不能在电视工业产生任何效益，公司再并回 SUN 公司。<br />\n   JAVA 应用 1994 年 6、7 月间，在经历了一场历时三天的头脑风暴的讨论之后，约翰・盖吉、詹姆斯・高斯林、比尔・乔伊、帕特里克・诺顿、韦恩・罗斯因和埃里克・斯库米，团队决定再一次改变了努力的目标，这次他们决定将该技术应用于万维网。他们认为随着 Mosaic 浏览器的到来，因特网正在向同样的高度互动的远景演变，而这一远景正是他们在有线电视网中看到的。作为原型，帕特里克・诺顿写了一个小型万维网浏览器，WebRunner，后来改名为 HotJava。同年，Oak 改名为 Java。商标搜索显示，Oak 已被一家显卡制造商注册，因此团队找到了一个新名字。这个名字是在很多成员常去的本地咖啡馆中杜撰出来的。名字是不是首字母缩写还不清楚，很大程度上来说不是。虽然有人声称是开发人员名字的组合：James Gosling（詹姆斯・高斯林）Arthur Van Hoff（阿瑟・凡・霍夫）Andy Bechtolsheim（安迪・贝克托克姆），或 “Just Another Vague Acronym”（只是另外一个含糊的缩写）。还有一种比较可信的说法是这个名字是出于对咖啡的喜爱，所以以 Java 咖啡来命名。类文件的前四个字节如果用十六进制阅读的话，分别为 CA FE BA BE，就会拼出两个单词 “CAFE BABE”（咖啡宝贝）。<br />\n   1994 年 10 月，HotJava 和 Java 平台为公司高层进行演示。1994 年，Java 1.0a 版本已经可以提供下载，但是 Java 和 HotJava 浏览器的第一次公开发布却是在 1995 年 5 月 23 日 SunWorld 大会上进行的。SUN 公司的科学指导约翰・盖吉宣告 Java 技术。这个发布是与网景公司的执行副总裁马克・安德森的惊人发布一起进行的，宣布网景将在其浏览器中包含对 Java 的支持。1996 年 1 月，升阳公司成立了 Java 业务集团，专门开发 Java 技术。</p>\n<h3 id=\"jdk发展历程\"><a class=\"anchor\" href=\"#jdk发展历程\">#</a> JDK 发展历程</h3>\n<p>​\t\t1996 年 1 月，Sun 公司发布了 Java 的第一个开发工具包（JDK 1.0），这是 Java 发展历程中的重要里程碑，标志着 Java 成为一种独立的开发工具。9 月，约 8.3 万个网页应用了 Java 技术来制作。10 月，Sun 公司发布了 Java 平台的第一个即时（JIT）编译器。</p>\n<p>​\t\t1997 年 2 月，JDK 1.1 面世，在随后的 3 周时间里，达到了 22 万次的下载量。4 月 2 日，Java One 会议召开，参会者逾一万人，创当时全球同类会议规模之纪录。9 月，Java Developer Connection 社区成员超过 10 万。</p>\n<p>​\t\t1998 年 12 月 8 日，第二代 Java 平台的企业版 J2EE 发布。1999 年 6 月，Sun 公司发布了第二代 Java 平台（简称为 Java2）的 3 个版本：J2ME（Java2 Micro Edition，Java2 平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2 平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2 平台的企业版），应用于基于 Java 的应用服务器。Java 2 平台的发布，是 Java 发展过程中最重要的一个里程碑，标志着 Java 的应用开始普及。</p>\n<p>​\t\t1999 年 4 月 27 日，HotSpot 虚拟机发布。HotSpot 虚拟机发布时是作为 JDK 1.2 的附加程序提供的，后来它成为了 JDK 1.3 及之后所有版本的 Sun JDK 的默认虚拟机  。</p>\n<p>​\t\t2000 年 5 月，JDK1.3、JDK1.4 和 J2SE1.3 相继发布，几周后其获得了苹果公司 Mac OS X 的工业标准的支持。2001 年 9 月 24 日，J2EE1.3 发布。2002 年 2 月 26 日，J2SE1.4 发布。自此 Java 的计算能力有了大幅提升，与 J2SE1.3 相比，其多了近 62% 的类和接口。在这些新特性当中，还提供了广泛的 XML 支持、安全套接字（Socket）支持（通过 SSL 与 TLS 协议）、全新的 I/OAPI、正则表达式、日志与断言。2004 年 9 月 30 日，J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5 更名为 Java SE 5.0（内部版本号 1.5.0），代号为 “Tiger”，Tiger 包含了从 1996 年发布 1.0 版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、格式化 I/O 及可变参数。</p>\n<p>​\t\t2005 年 6 月，在 Java One 大会上，Sun 公司发布了 Java SE 6。此时，Java 的各种版本已经更名，已取消其中的数字 2，如 J2EE 更名为 JavaEE，J2SE 更名为 JavaSE，J2ME 更名为 JavaME。</p>\n<p>​\t\t2006 年 11 月 13 日，Java 技术的发明者 Sun 公司宣布，将 Java 技术作为免费软件对外发布。Sun 公司正式发布的有关 Java 平台标准版的第一批源代码，以及 Java 迷你版的可执行源代码。从 2007 年 3 月起，全世界所有的开发人员均可对 Java 源代码进行修改 。</p>\n<p>​\t\t2009 年，甲骨文公司宣布收购 Sun   。2010 年，Java 编程语言的共同创始人之一詹姆斯・高斯林从 Oracle 公司辞职。2011 年，甲骨文公司举行了全球性的活动，以庆祝 Java7 的推出，随后 Java7 正式发布。</p>\n<p>​\t\t2014 年，甲骨文公司发布了 Java8 正式版</p>\n<p>​\t\t2017 年，甲骨文公司发布了 Java9 正式版</p>\n<h3 id=\"java发展史上发生的大事件具体概括如下表\"><a class=\"anchor\" href=\"#java发展史上发生的大事件具体概括如下表\">#</a> Java 发展史上发生的大事件具体概括如下表</h3>\n<p>各版本 JDK 引入的主要新特性<br />\n JDK Version 1.0<br />\n 开发代号为 Oak（橡树），于 1996-01-23 发行。</p>\n<table>\n<thead>\n<tr>\n<th>时间</th>\n<th>事件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1996 年 1 月</td>\n<td>第一个 JDK-JDK1.0 诞生；</td>\n</tr>\n<tr>\n<td>1996 年 4 月</td>\n<td>10 个最主要的操作系统供应商申明将在其产品中嵌入 Java 技术；</td>\n</tr>\n<tr>\n<td>1996 年 9 月</td>\n<td>约 8.3 万个网页应用了 Java 技术来制作</td>\n</tr>\n<tr>\n<td>1997 年 2 月 18 日</td>\n<td>JDK1.1 发布</td>\n</tr>\n<tr>\n<td>1997 年 4 月 2 日</td>\n<td>JavaOne 会议召开，参与者逾一万人，创当时全球同类会议纪录</td>\n</tr>\n<tr>\n<td>1997 年 9 月</td>\n<td>JavaDeveloperConnection 社区成员超过十万</td>\n</tr>\n<tr>\n<td>1998 年 2 月</td>\n<td>JDK1.1 被下载超过 2,000,000 次</td>\n</tr>\n<tr>\n<td>1998 年 12 月 8 日</td>\n<td>Java 2 企业平台 J2EE 发布 (J2EE1.2)</td>\n</tr>\n<tr>\n<td>1999 年 6 月</td>\n<td>SUN 公司发布 Java 三个版本：标准版（J2SE）、企业版（J2EE）和微型版（J2ME）</td>\n</tr>\n<tr>\n<td>2000 年 5 月 8 日</td>\n<td>JDK1.3 发布</td>\n</tr>\n<tr>\n<td>2000 年 5 月 29 日</td>\n<td>JDK1.4 发布</td>\n</tr>\n<tr>\n<td>2001 年 6 月 5 日</td>\n<td>Nokia 宣布到 2003 年将出售 1 亿部支持 Java 的手机</td>\n</tr>\n<tr>\n<td>2001 年 9 月 24 日</td>\n<td>J2EE1.3 发布</td>\n</tr>\n<tr>\n<td>2002 年 2 月 26 日</td>\n<td>J2SE1.4 发布，此后 Java 的计算能力有了大幅提升</td>\n</tr>\n<tr>\n<td>2004 年 9 月 30 日</td>\n<td>J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5 更名为 Java SE 5.0；</td>\n</tr>\n<tr>\n<td>2005 年 6 月</td>\n<td>JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 “2”： J2ME 更名为 Java ME， J2SE 更名为 Java SE，J2EE 更名为 Java EE</td>\n</tr>\n<tr>\n<td>2006 年 12 月</td>\n<td>SUN 公司发布 JRE6.0</td>\n</tr>\n<tr>\n<td>2009 年 12 月</td>\n<td>SUN 公司发布 Java EE 6</td>\n</tr>\n<tr>\n<td>2010 年 11 月</td>\n<td>由于甲骨文对 Java 社区的不友善，因此 Apache 扬言将退出 JCP</td>\n</tr>\n<tr>\n<td>2011 年 7 月</td>\n<td>甲骨文发布 Java SE 7</td>\n</tr>\n<tr>\n<td>2014 年 3 月</td>\n<td>甲骨文发表 Java SE 8</td>\n</tr>\n<tr>\n<td>2017 年 9 月</td>\n<td>甲骨文发表 Java SE 9</td>\n</tr>\n<tr>\n<td>2018 年 3 月</td>\n<td>甲骨文发布 Java SE 10</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"j2se-version-12\"><a class=\"anchor\" href=\"#j2se-version-12\">#</a> J2SE Version 1.2</h3>\n<p>开发代号为 Playground（操场），于 1998-12-08 发行。<br />\n引入的新特性包括：</p>\n<ul>\n<li>引入集合（Collection）框架；</li>\n<li>对字符串常量做内存映射；</li>\n<li>引入 JIT（Just In Time）编译器；</li>\n<li>引入对打包的 Java 文件进行数字签名；</li>\n<li>引入控制授权访问系统资源的策略工具；</li>\n<li>引入 JFC（Java Foundation Classes），包括 Swing 1.0、拖放和 Java 2D 类库；</li>\n<li>引入 Java 插件；</li>\n<li>在 JDBC 中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；</li>\n<li>在 Applet 中添加声音支持。</li>\n</ul>\n<h3 id=\"j2se-version-13\"><a class=\"anchor\" href=\"#j2se-version-13\">#</a> J2SE Version 1.3</h3>\n<p>开发代号为 Kestrel（红隼），于 2000-05-08 发行。<br />\n引入的新特性包括：</p>\n<ul>\n<li>引入 Java Sound API；</li>\n<li>jar 文件索引；</li>\n<li>对 Java 的各个方面都做了大量优化和增强。</li>\n</ul>\n<h3 id=\"j2se-version-14\"><a class=\"anchor\" href=\"#j2se-version-14\">#</a> J2SE Version 1.4</h3>\n<p>开发代号为 Merlin（隼），于 2004-02-06 发行（首次在 JCP 下发行）。<br />\n引入的新特性包括:</p>\n<ul>\n<li>XML 处理；</li>\n<li>Java 打印服务；</li>\n<li>引入 Logging API；<br />\n引入 Java Web Start；</li>\n<li>引入 JDBC 3.0 API；</li>\n<li>引入断言；</li>\n<li>引入 Preferences API；</li>\n<li>引入链式异常处理；</li>\n<li>支持 IPv6；</li>\n<li>支持正则表达式；</li>\n<li>引入 Image I/O slot machine API。</li>\n</ul>\n<h3 id=\"java-version-se-50\"><a class=\"anchor\" href=\"#java-version-se-50\">#</a> Java Version SE 5.0</h3>\n<p>开发代号为 Tiger（老虎），于 2004-09-30 发行。<br />\n引入的新特性包括:</p>\n<ul>\n<li>引入泛型；</li>\n<li>增强循环，可以使用迭代方式；</li>\n<li>自动装箱与自动拆箱；</li>\n<li>类型安全的枚举；</li>\n<li>可变参数；</li>\n<li>静态引入；</li>\n<li>元数据（注解）；</li>\n<li>引入 Instrumentation。</li>\n</ul>\n<h3 id=\"java-version-se-6\"><a class=\"anchor\" href=\"#java-version-se-6\">#</a> Java Version SE 6</h3>\n<p>开发代号为 Mustang（野马），于 2006-12-11 发行。<br />\n引入的新特性包括：</p>\n<ul>\n<li>支持脚本语言；</li>\n<li>引入 JDBC 4.0 API；</li>\n<li>引入 Java Compiler API；</li>\n<li>可插拔注解；</li>\n<li>增加对 Native PKI (Public Key Infrastructure)、Java GSS (Generic Security Service)、Kerberos 和 LDAP (Lightweight Directory Access Protocol) 的支持；</li>\n<li>继承 Web Services；做了很多优化。</li>\n</ul>\n<h3 id=\"java-version-se-7\"><a class=\"anchor\" href=\"#java-version-se-7\">#</a> Java Version SE 7</h3>\n<p>开发代号是 Dolphin（海豚），于 2011-07-28 发行。<br />\n引入的新特性包括：</p>\n<ul>\n<li>switch 语句块中允许以字符串作为分支条件；</li>\n<li>在创建泛型对象时应用类型推断；</li>\n<li>在一个语句块中捕获多种异常；</li>\n<li>支持动态语言；</li>\n<li>支持 try-with-resources；</li>\n<li>引入 Java NIO.2 开发包；</li>\n<li>数值类型可以用 2 进制字符串表示，并且可以在字符串表示中添加下划线；</li>\n<li>钻石型语法；</li>\n<li>null 值的自动处理。</li>\n</ul>\n<h3 id=\"java-version-se-8\"><a class=\"anchor\" href=\"#java-version-se-8\">#</a> Java Version SE 8</h3>\n<p>开发代号是 Spider（蜘蛛），于 2014-03-18 发行。</p>\n<ul>\n<li>支持 lambda 支持；</li>\n<li>增强日期与时间 API 的功能；</li>\n<li>对垃圾回收的性能也进行了改进；</li>\n<li>并且移除了 permgen 区。</li>\n<li>Lambdas 表达式与 Functional 接口。</li>\n<li>接口的默认与静态方法。</li>\n<li>方法引用。</li>\n<li>重复注解。</li>\n<li>更好的类型推测机制。</li>\n<li>扩展注解的支持。</li>\n</ul>\n<h3 id=\"java-version-se-90\"><a class=\"anchor\" href=\"#java-version-se-90\">#</a> Java Version SE 9.0</h3>\n<ul>\n<li>Java 平台级模块系统。</li>\n<li>Linking。</li>\n<li>JShell : 交互式 Java REPL。</li>\n<li>改进的 Javadoc。</li>\n<li>集合工厂方法。</li>\n<li>改进的 Stream API。</li>\n<li>私有接口方法。</li>\n<li>HTTP/2。</li>\n<li>多版本兼容 JAR。</li>\n</ul>\n<h3 id=\"java-version-se-100\"><a class=\"anchor\" href=\"#java-version-se-100\">#</a> Java Version SE 10.0</h3>\n<p>​\t\t本地变量类型推断，可以使用本地变量的初始化去推荐对应变量的类型。提升了并行垃圾收集器 G1 的性能，降低了收集延时。应用优化了启动时刻的数据共享，已经存在的类更好的共享。一个试用的即时编译器 Grral，只支持 linux x64 平台能够感知到 docker 的存在，如果运行在 linux 平台，可以感知到是否运行在 docker 容器中，可以查询到操作系统给容器分配的 cpu 和内存等等物理资源信息.<br />\n 修复从主机 Java 线程连接到容器内 Java 线程的一个问题。更短的 jShell REPL tool 启动时间。提供了新接口，可以获取可变化的集合类，copyOf,Set.copyOf, 和 Map.copyOf 等方法创建一个新的集合对象，toUnmodifiableList, toUnmodifiableSet, 和 toUnmodifiableMap 获取不可修改对象，让 Stream 操作可以获取到不可变对象。<br />\n​\t\t本地变量类型推断。可以减少类型的生命，同时也保证了 static 类型的安全性。提供一个垃圾收集的接口去提供各个垃圾收集器隔离的能力，这样可以让内置的垃圾收集器正常运行，同时可以更容易向 hotspot 添加新的垃圾收集器。改进的并行的垃圾收集器 G1, 可以有效降低延迟。让 hotspot 支持寻找可用的任何内存，例如 NVDIMM 存储模块，用户可以去指定它，这也是为未来的异构内存提供支持。在 Linux/x64 平台提供一个实验性的即时编译器。让 jdk 使用单一仓库管理，现在分离在不同的仓库，这样给源码管理带来了一些困难。提升了内存的共享，减少了应用的启动时间。本地线程握手，可以在虚拟机的全局安全点暂停而不用等待其他的任何线程。为 openJDK 提供 Oracle 根认证，这样可以吸引更多的开发者使用 openJDK。</p>\n<p>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2doc2NhcmVjcm93L2FydGljbGUvZGV0YWlscy84MjMxODYzNg==\">https://blog.csdn.net/ghscarecrow/article/details/82318636</span></p>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        },
        {
            "id": "http://www.luotao.shop/computer-science/java/javase/Java8%E6%96%B0%E7%89%B9%E6%80%A7/",
            "url": "http://www.luotao.shop/computer-science/java/javase/Java8%E6%96%B0%E7%89%B9%E6%80%A7/",
            "title": "Java8新特性",
            "date_published": "2023-03-30T03:43:30.000Z",
            "content_html": "<h2 id=\"java8新特性\"><a class=\"anchor\" href=\"#java8新特性\">#</a> Java8 新特性</h2>\n<script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kity@2.0.4/dist/kity.min.js\"></script><script type=\"text&#x2F;javascript\" src=\"https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js\"></script><script defer=\"true\" type=\"text&#x2F;javascript\" src=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js\"></script><link rel=\"stylesheet\" type=\"text&#x2F;css\" href=\"https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css\">",
            "tags": [
                "计算机科学",
                "Java",
                "JavaSE",
                "JavaSE",
                "编程笔记"
            ]
        }
    ]
}