<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>力扣算法题-3-整数反转</title>
      <link href="/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-%E4%B8%AD%E7%AD%89/"/>
      <url>/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC-%E4%B8%AD%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h2 id="整数反转"><a class="anchor" href="#整数反转">#</a> 整数反转</h2><p>给你一个 32 位的有符号整数  <code>x</code>  ，返回将  <code>x</code>  中的数字部分反转后的结果。</p><p>如果反转后整数超过 32 位的有符号整数的范围  <code>[−231, 231 − 1]</code>  ，就返回 0。</p><p><strong>假设环境不允许存储 64 位整数（有符号或无符号）。</strong></p><p><strong>示例 1：</strong></p><pre><code>输入：x = 123输出：321</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：x = -123输出：-321</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：x = 120输出：21</code></pre><p><strong>示例 4：</strong></p><pre><code>输入：x = 0输出：0</code></pre><p><strong>提示：</strong></p><ul><li><code>-231 &lt;= x &lt;= 231 - 1</code></li></ul><p><strong>思路</strong>：<br />首先我们想一下，怎么去反转一个整数？<br />用栈？<br />或者把整数变成字符串，再去反转这个字符串？<br />这两种方式是可以，但并不好。实际上我们只要能拿到这个整数的 末尾数字 就可以了。<br />以 12345 为例，先拿到 5，再拿到 4，之后是 3，2，1，我们按这样的顺序就可以反向拼接处一个数字了，也就能达到 反转 的效果。<br />怎么拿末尾数字呢？好办，用取模运算就可以了</p><p><img data-src="https://pic.leetcode-cn.com/be35cb60bec9a9ae794abad671e6618abb5664780bc7ee30ca93ca423884a666-1.jpg" alt="1.jpg" /></p><p>1、将 12345 % 10 得到 5，之后将 12345 / 10<br />2、将 1234 % 10 得到 4，再将 1234 / 10<br />3、将 123 % 10 得到 3，再将 123 / 10<br />4、将 12 % 10 得到 2，再将 12 / 10<br />5、将 1 % 10 得到 1，再将 1 / 10</p><p>这么看起来，一个循环就搞定了，循环的判断条件是 x&gt;0<br /> 但这样不对，因为忽略了 负数<br />循环的判断条件应该是 while (x!=0)，无论正数还是负数，按照上面不断的 / 10 这样的操作，最后都会变成 0，所以判断终止条件就是！=0<br /> 有了取模和除法操作，对于像 12300 这样的数字，也可以完美的解决掉了。</p><p>看起来这道题就这么解决了，但请注意，题目上还有这么一句</p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。</p><p>也就是说我们不能用 long 存储最终结果，而且有些数字可能是合法范围内的数字，但是反转过来就超过范围了。<br />假设有 1147483649 这个数字，它是小于最大的 32 位整数 2147483647 的，但是将这个数字反转过来后就变成了 9463847411，这就比最大的 32 位整数还要大了，这样的数字是没法存到 int 里面的，所以肯定要返回 0 (溢出了)。 甚至，我们还需要提前判断</p><p><img data-src="https://pic.leetcode-cn.com/42c736510f4914af169907d61b22d1a39bd5a16bbd7eca0466d90350e2763164-2.jpg" alt="2.jpg" /></p><p>上图中，绿色的是最大 32 位整数<br />第二排数字中，橘子的是 5，它是大于上面同位置的 4，这就意味着 5 后跟任何数字，都会比最大 32 为整数都大。<br />所以，我们到【最大数的 1/10】时，就要开始判断了<br />如果某个数字大于 214748364 那后面就不用再判断了，肯定溢出了。<br />如果某个数字等于 214748364 呢，这对应到上图中第三、第四、第五排的数字，需要要跟最大数的末尾数字比较，如果这个数字比 7 还大，说明溢出了。</p><p>对于负数也是一样的</p><p><img data-src="https://pic.leetcode-cn.com/525aa75c19702e57b780c91a7ebb990359b14e96acc09b6327d9e1f0a5b3a16a-3.jpg" alt="3.jpg" /></p><p>上图中绿色部分是最小的 32 位整数，同样是在【最小数的 1/10】时开始判断<br />如果某个数字小于 -214748364 说明溢出了<br />如果某个数字等于 -214748364，还需要跟最小数的末尾比较，即看它是否小于 8</p><p><strong>代码实现</strong>：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token comment">// 每次取末尾数字</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token comment">// 判断是否 大于 最大 32 位整数</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">></span><span class="token number">214748364</span> <span class="token operator">||</span> <span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token number">214748364</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">></span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token comment">// 判断是否 小于 最小 32 位整数</span></pre></td></tr><tr><td data-num="12"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">214748364</span> <span class="token operator">||</span> <span class="token punctuation">(</span>res<span class="token operator">==</span><span class="token operator">-</span><span class="token number">214748364</span> <span class="token operator">&amp;&amp;</span> tmp<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            res <span class="token operator">=</span> res<span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> tmp<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">return</span> res<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="20"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣算法题 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>查找算法</title>
      <link href="/computer-science/java/arithmetic/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
      <url>/computer-science/java/arithmetic/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="二分查找法"><a class="anchor" href="#二分查找法">#</a> 二分查找法</h3><p><code>思路：</code> 先将列表中间的元素与要查找的元素比较，如果相等直接返回，如果大了，将中间元素后面的列表元素排除，再在列表开始到列表中间元素之间进行相同操作，直到查找到匹配的元素。</p><p>时间复杂度：O (log2 n)</p><p><code>代码：</code></p><p>java:</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 方法一：递归</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">,</span><span class="token keyword">int</span> low<span class="token punctuation">,</span><span class="token keyword">int</span> high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token keyword">return</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">return</span> high<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">return</span> mid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>target<span class="token punctuation">,</span>low<span class="token punctuation">,</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">return</span> <span class="token function">binarySearch</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>target<span class="token punctuation">,</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>high<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token comment">// 方法二：循环</span></pre></td></tr><tr><td data-num="22"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">binarySearch2</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">while</span> <span class="token punctuation">(</span>low<span class="token operator">&lt;=</span>high<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                <span class="token keyword">return</span> low<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>                <span class="token keyword">return</span> high<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>                <span class="token keyword">return</span> mid<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>                high <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>                low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>python:</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 二分查找中，数组必须是有序的</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 方法一：采用递归的方式</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> target<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment"># 如果 start 索引下的元素就是目标元素，直接返回</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">return</span> start</pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token comment"># 如果 end 索引下的元素就是目标元素，直接返回</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">return</span> end</pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment"># 取中间的元素 为什么是 (end + start) / 2？因为当 start>0 时，中间的索引必须是 (end - start) / 2 + start = (end + start) / 2，必须要加上 start, 否则递归会溢出，无限递归下去。</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    mid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">+</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token comment"># 如果中间的元素是目标元素则直接返回</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">return</span> mid</pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment"># 如果中间元素大于目标元素，则递归调用，将 end 设置成中间索引减 1，即 mid - 1</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">return</span> binary_search<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment"># 如果中间元素小于目标元素，则递归调用，将 start 设置成中间索引加 1，即 mid+ 1</span></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">if</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">return</span> binary_search<span class="token punctuation">(</span>arr<span class="token punctuation">,</span> target<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="21"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">None</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre><span class="token comment"># 方法二：采用循环的方式</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token keyword">def</span> <span class="token function">binary_search_2</span><span class="token punctuation">(</span>arr<span class="token punctuation">:</span><span class="token builtin">list</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>    low <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    high <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">while</span> low <span class="token operator">&lt;=</span> high<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token keyword">return</span> low</pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="31"></td><td><pre>            <span class="token keyword">return</span> high</pre></td></tr><tr><td data-num="32"></td><td><pre>        mid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        guess <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token keyword">if</span> guess <span class="token operator">==</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="35"></td><td><pre>            <span class="token keyword">return</span> mid</pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">if</span> guess <span class="token operator">></span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="37"></td><td><pre>            low <span class="token operator">=</span> low <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token keyword">if</span> guess <span class="token operator">&lt;</span> target<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="39"></td><td><pre>            high <span class="token operator">=</span> high <span class="token operator">+</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre>    <span class="token keyword">return</span> <span class="token boolean">None</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣算法题-3-无重复字符的最长子串</title>
      <link href="/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/"/>
      <url>/computer-science/java/arithmetic/3-%E5%8A%9B%E6%89%A3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2-%E4%B8%AD%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h2 id="无重复字符的最长子串"><a class="anchor" href="#无重复字符的最长子串">#</a> 无重复字符的最长子串</h2><p>给定一个字符串  <code>s</code>  ，请你找出其中不含有重复字符的 <strong>最长子串</strong> 的长度。</p><p><strong>示例 1:</strong></p><pre><code>输入: s = &quot;abcabcbb&quot;输出: 3 解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</code></pre><p><strong>示例 2:</strong></p><pre><code>输入: s = &quot;bbbbb&quot;输出: 1解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</code></pre><p><strong>示例 3:</strong></p><pre><code>输入: s = &quot;pwwkew&quot;输出: 3解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</code></pre><p><strong>提示：</strong></p><ul><li><code>0 &lt;= s.length &lt;= 5 * 104</code></li><li><code>s</code>  由英文字母、数字、符号和空格组成</li></ul><p><strong>解法</strong></p><p><strong>思路：</strong><br />这道题主要用到思路是：滑动窗口</p><p>什么是滑动窗口？</p><p>其实就是一个队列，比如例题中的 abcabcbb，进入这个队列（窗口）为 abc 满足题目要求，当再进入 a，队列变成了 abca，这时候不满足要求。所以，我们要移动这个队列！</p><p>如何移动？</p><p>我们只要把队列的左边的元素移出就行了，直到满足题目要求！</p><p>一直维持这样的队列，找出队列出现最长的长度时候，求出解！</p><p>时间复杂度：O (n)</p><h2 id="代码"><a class="anchor" href="#代码">#</a> 代码：</h2><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                left <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span>i<span class="token operator">-</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣算法题-2-两数相加</title>
      <link href="/computer-science/java/arithmetic/2-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-%E4%B8%AD%E7%AD%89/"/>
      <url>/computer-science/java/arithmetic/2-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0-%E4%B8%AD%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<h2 id="力扣算法题-2-两数相加"><a class="anchor" href="#力扣算法题-2-两数相加">#</a> 力扣算法题 - 2 - 两数相加</h2><p>给你两个 <strong>非空</strong> 的链表，表示两个非负的整数。它们每位数字都是按照 <strong>逆序</strong> 的方式存储的，并且每个节点只能存储 <strong>一位</strong> 数字。</p><p>请你将两个数相加，并以相同形式返回一个表示和的链表。</p><p>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p><p><strong>示例 1：</strong></p><p><img data-src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/01/02/addtwonumber1.jpg" alt="img" /></p><pre><code>输入：l1 = [2,4,3], l2 = [5,6,4]输出：[7,0,8]解释：342 + 465 = 807.</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：l1 = [0], l2 = [0]输出：[0]</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]输出：[8,9,9,9,0,0,0,1]</code></pre><p><strong>提示：</strong></p><ul><li>每个链表中的节点数在范围  <code>[1, 100]</code>  内</li><li><code>0 &lt;= Node.val &lt;= 9</code></li><li>题目数据保证列表表示的数字不含前导零</li></ul><p>解法：</p><p><strong>思路</strong></p><ul><li>标签：链表</li><li>将两个链表看成是相同长度的进行遍历，如果一个链表较短则在前面补 000，比如 987 + 23 = 987 + 023 = 1010</li><li>每一位计算的同时需要考虑上一位的进位问题，而当前位计算结束后同样需要更新进位值<br />如果两个链表全部遍历完毕后，进位值为 111，则在新链表最前方添加节点 1</li><li>小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点 head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。</li></ul><p><strong>代码</strong></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre> * Definition for singly-linked list.</pre></td></tr><tr><td data-num="3"></td><td><pre> * public class ListNode &#123;</pre></td></tr><tr><td data-num="4"></td><td><pre> *     int val;</pre></td></tr><tr><td data-num="5"></td><td><pre> *     ListNode next;</pre></td></tr><tr><td data-num="6"></td><td><pre> *     ListNode(int x) &#123; val = x; &#125;</pre></td></tr><tr><td data-num="7"></td><td><pre> * &#125;</pre></td></tr><tr><td data-num="8"></td><td><pre> */</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">ListNode</span> cur <span class="token operator">=</span> pre<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">while</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            <span class="token keyword">int</span> x <span class="token operator">=</span> l1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l1<span class="token punctuation">.</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token keyword">int</span> y <span class="token operator">=</span> l2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> l2<span class="token punctuation">.</span>val<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">int</span> sum <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> carry<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            </pre></td></tr><tr><td data-num="19"></td><td><pre>            carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            sum <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>            cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>l1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="25"></td><td><pre>                l1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">if</span><span class="token punctuation">(</span>l2 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="27"></td><td><pre>                l2 <span class="token operator">=</span> l2<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>            cur<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token keyword">return</span> pre<span class="token punctuation">.</span>next<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="34"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>力扣算法题-1-两数之和</title>
      <link href="/computer-science/java/arithmetic/1-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E7%AE%80%E5%8D%95/"/>
      <url>/computer-science/java/arithmetic/1-%E5%8A%9B%E6%89%A3-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C-%E7%AE%80%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h2 id="两数之和"><a class="anchor" href="#两数之和">#</a> 两数之和</h2><h3 id="两数之和-2"><a class="anchor" href="#两数之和-2">#</a> 两数之和</h3><p>给定一个整数数组  <code>nums</code>  和一个整数目标值  <code>target</code> ，请你在该数组中找出 <strong>和为目标值</strong> <em> <code>target</code> </em> 的那 <strong>两个</strong> 整数，并返回它们的数组下标。</p><p>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。</p><p>你可以按任意顺序返回答案。</p><p><strong>示例 1：</strong></p><pre><code>输入：nums = [2,7,11,15], target = 9输出：[0,1]解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。</code></pre><p><strong>示例 2：</strong></p><pre><code>输入：nums = [3,2,4], target = 6输出：[1,2]</code></pre><p><strong>示例 3：</strong></p><pre><code>输入：nums = [3,3], target = 6输出：[0,1]</code></pre><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>只会存在一个有效答案</strong></li></ul><p>** 进阶：** 你可以想出一个时间复杂度小于  <code>O(n2)</code>  的算法吗？</p><p><strong>解法：</strong></p><p>方法一：暴力枚举<br />思路及算法</p><p>最容易想到的方法是枚举数组中的每一个数 x，寻找数组中是否存在 target - x。</p><p>当我们使用遍历整个数组的方式寻找 target - x 时，需要注意到每一个位于 x 之前的元素都已经和 x 匹配过，因此不需要再进行匹配。而每一个元素不能被使用两次，所以我们只需要在 x 后面的元素中寻找 target - x。</p><p>代码</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>                    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">,</span> j<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>                <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O (N2)，其中 N 是数组中的元素数量。最坏情况下数组中任意两个数都要被匹配一次。</p><p>空间复杂度：O (1)。</p><p>方法二：哈希表<br />思路及算法</p><p>注意到方法一的时间复杂度较高的原因是寻找 target - x 的时间复杂度过高。因此，我们需要一种更优秀的方法，能够快速寻找数组中是否存在目标元素。如果存在，我们需要找出它的索引。</p><p>使用哈希表，可以将寻找 target - x 的时间复杂度降低到从 O (N) 降低到 O (1)。</p><p>这样我们创建一个哈希表，对于每一个 x，我们首先查询哈希表中是否存在 target - x，然后将 x 插入到哈希表中，即可保证不会让 x 和自己匹配。</p><p>代码</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">twoSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> hashtable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hashtable<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>hashtable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> i<span class="token punctuation">&#125;</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            hashtable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>复杂度分析</p><p>时间复杂度：O (N)，其中 N 是数组中的元素数量。对于每一个元素 x，我们可以 O (1) 地寻找 target - x。</p><p>空间复杂度：O (N)，其中 N 是数组中的元素数量。主要为哈希表的开销。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 力扣算法题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>坏习惯</title>
      <link href="/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/"/>
      <url>/introduction/%E5%9D%8F%E4%B9%A0%E6%83%AF/</url>
      
        <content type="html"><![CDATA[<h3 id="九种弱者习惯"><a class="anchor" href="#九种弱者习惯">#</a> 九种弱者习惯</h3><p>一、九种弱者习惯，包括爱找借口、缺乏胆识、犹豫不决等，提醒读者要养成优秀的习惯，不断成长进步。</p><ul><li>习惯不好消耗生命，好习惯塑造自己</li><li>摒弃消极的念头，主动调整一个个微小的行为</li><li>去爱、攀山、追梦，去尝试，去尝试，去尝试</li></ul><p>二、犹豫、学习、拖延等现代职场中的常见问题，并给出了解决方案，鼓励人们积极行动，终身学习，克服拖延症。</p><ul><li>犹豫不决，害怕失败，浪费时间</li><li>不懂得学习，抛弃旧技能，容易被取代</li><li>拖延症会侵蚀人生，尝试 5 分钟定律</li></ul><p>三、避免生活和工作中的七种常见问题，如拖延症、缺乏恒心、害怕拒绝等，提出了解决方案，帮助人们更好地面对生活中的挑战。</p><ul><li>拖延会消耗生命，提前投入做事</li><li>成功的人有恒心，不要半途而废</li><li>人生的目标由自己定，不要习惯待在舒适区</li></ul><p>四、九种弱者习惯，包括懒惰、逃避现实等，并强调了积极面对生活的重要性，只有戒掉这些习惯才能迈向更好的未来。</p><ul><li>逃避现实会导致内心脆弱，生活也会加倍的报复回来</li><li>不断拥抱新的挑战，熬过一次次痛苦的蜕变，才能向更好的生活靠近</li><li>主动调整微小行为，改写自己的命运，把每一天过得充实而有意义</li></ul><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtrNHkxUDdzby8/c3BtX2lkX2Zyb209MzMzLjEwMDcudGlhbm1hLjEtMS0xLmNsaWNrJmFtcDt2ZF9zb3VyY2U9ZjllZWRmOTgzNzhhYTc3ZWIzNTZkMzM0M2JiYmU2MDE=">原文视频来源地址</span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 生活习惯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 个人分享 </tag>
            
            <tag> 坏习惯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Nacos</title>
      <link href="/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/"/>
      <url>/computer-science/java/springcloud/%E5%88%9D%E8%AF%86Nacos/</url>
      
        <content type="html"><![CDATA[<h2 id="初识nacos"><a class="anchor" href="#初识nacos">#</a> 初识 Nacos</h2><h3 id="nacos安装"><a class="anchor" href="#nacos安装">#</a> Nacos 安装</h3><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法</title>
      <link href="/computer-science/java/arithmetic/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
      <url>/computer-science/java/arithmetic/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="排序算法"><a class="anchor" href="#排序算法">#</a> 排序算法</h2><h3 id="冒泡排序法"><a class="anchor" href="#冒泡排序法">#</a> 冒泡排序法</h3><h3 id="选择排序法"><a class="anchor" href="#选择排序法">#</a> 选择排序法</h3><p><code>思路：</code> 选择一个元素作为最小元素（一般是第一个），然后将这个元素与数组其他元素进行比较，如果比它还小则将其最小元素赋值给它，比较完一轮后，将这个最小元素放入到新数组（排序好的数组）并从原数组剔除出去，如此反复操作 n 轮</p><p>** 时间复杂度:**O (n²)</p><p><code>代码：</code></p><p><code>java</code> :</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">/**</pre></td></tr><tr><td data-num="2"></td><td><pre>     * 寻找最小元素</pre></td></tr><tr><td data-num="3"></td><td><pre>     * @param arr 数组</pre></td></tr><tr><td data-num="4"></td><td><pre>     * @return 最小元素索引</pre></td></tr><tr><td data-num="5"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">int</span> smallest <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">int</span> smallest_index <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> smallest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>                smallest <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                smallest_index <span class="token operator">=</span> i <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">return</span> smallest_index<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="19"></td><td><pre>     * 返回去除元素的新数组</pre></td></tr><tr><td data-num="20"></td><td><pre>     * @param arr 原数组</pre></td></tr><tr><td data-num="21"></td><td><pre>     * @param element_index 最小元素索引</pre></td></tr><tr><td data-num="22"></td><td><pre>     * @return 新数组</pre></td></tr><tr><td data-num="23"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">int</span> element_index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span>j <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">!=</span>element_index<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>                array<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>        <span class="token keyword">return</span> array<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="33"></td><td><pre></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="35"></td><td><pre>     * 选择排序算法</pre></td></tr><tr><td data-num="36"></td><td><pre>     * @param arr 原数组</pre></td></tr><tr><td data-num="37"></td><td><pre>     * @return 排序好的新数组</pre></td></tr><tr><td data-num="38"></td><td><pre>     */</span></pre></td></tr><tr><td data-num="39"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">chooseSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>newArr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>        <span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="44"></td><td><pre>            <span class="token keyword">int</span> smallest_index <span class="token operator">=</span> <span class="token function">findSmallest</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="45"></td><td><pre>            newArr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>smallest_index<span class="token punctuation">]</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="46"></td><td><pre>            arr <span class="token operator">=</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>smallest_index<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="47"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="48"></td><td><pre>        <span class="token keyword">return</span> newArr<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="49"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><code>python</code> :</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 寻找最小元素，并返回最小元素索引</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">def</span> <span class="token function">find_smallest</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    smallest <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    smallest_index <span class="token operator">=</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> smallest<span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            smallest <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            smallest_index <span class="token operator">=</span> i</pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">return</span> smallest_index</pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token comment"># 选择排序法</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">def</span> <span class="token function">choose_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    sort_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        smallest_index <span class="token operator">=</span> find_smallest<span class="token punctuation">(</span>arr<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        sort_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>arr<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>smallest_index<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="18"></td><td><pre>    <span class="token keyword">return</span> sort_list</pre></td></tr></table></figure><h3 id="快速排序法"><a class="anchor" href="#快速排序法">#</a> 快速排序法</h3><p>** 思路:** 选择数组中的一个元素作为基准元素，然后将其他元素与其比较，如果小的放入左边一个数组，如果大的放入右边的数组，反复操作，直至子数组只有 0 个或者 1 个元素为止。</p><p><strong>时间复杂度</strong>：O (nlogn)</p><p><code>python</code> :</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># 快速排序法</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token comment"># 思路：选择数组中的一个元素作为基准元素，然后将其他元素与其比较，如果小的放入左边一个数组，如果大的放入右边的数组，反复操作，直至子数组只有 0 个或者 1 个元素为止</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token comment"># 这种思路可以使用递归的方式来做，将数组只有 0 个或者 1 个元素作为递归终止条件，后面再做归纳 --- 选择基准元素和子数组递归。</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment"># 快速排序法</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment"># 如果数组长度小于 2，则直接返回数组</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">return</span> arr</pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token comment"># 将数组第一个元素作为基准元素</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token comment"># 生成小于等于基准元素的子数组</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    less <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">&lt;=</span> pivot<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token comment"># 生成大于基准元素的子数组</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    right <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> i <span class="token operator">></span> pivot<span class="token punctuation">]</span></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token comment"># 合并数组</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>less<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>quick_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ribbon负载均衡</title>
      <link href="/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>/computer-science/java/springcloud/Ribbon%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="ribbon负载均衡"><a class="anchor" href="#ribbon负载均衡">#</a> Ribbon 负载均衡</h2><h3 id="负载均衡原理"><a class="anchor" href="#负载均衡原理">#</a> 负载均衡原理</h3><p>规则接口是<strong> IRule</strong><br /> 默认实现是<strong> ZoneAvoidanceRule</strong>，根据<strong> zone</strong> 选择服务列表，然后轮询</p><h3 id="负载均衡策略"><a class="anchor" href="#负载均衡策略">#</a> 负载均衡策略</h3><p>代码方式：配置灵活，但修改时需要重新打包布<br />配置方式：直观，方便，无需重新打包发布但是无法做全局配置</p><h3 id="懒加载"><a class="anchor" href="#懒加载">#</a> 懒加载</h3><p>开启饥饿加载<br />指定饥饿加载的微服务名称</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eureka注册中心</title>
      <link href="/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/"/>
      <url>/computer-science/java/springcloud/Eureka%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h2 id="eureka注册中心"><a class="anchor" href="#eureka注册中心">#</a> Eureka 注册中心</h2><h3 id="服务调用出现的问题"><a class="anchor" href="#服务调用出现的问题">#</a> 服务调用出现的问题</h3><ul><li>服务消费者该如何获取服务提供这的地址信息？</li><li>如果有多个服务提供者，消费者该如何选择？</li><li>消费者如何得知服务提供这的健康状态？</li></ul><h3 id="eureka的作用"><a class="anchor" href="#eureka的作用">#</a> Eureka 的作用</h3><ul><li>消费者该如何获取服务提供者的具体信息？<ul><li>服务提供者启动时向 Eureka 注册自己的信息</li><li>eureka 保存这些信息</li><li>消费者根据服务名称向 eureka 拉取提供者信息</li></ul></li><li>如果有多个服务提供者，消费者该如何选择？<ul><li>服务消费者利用负载均衡算法，从服务列表中挑选一个</li></ul></li><li>消费者该如何感知服务提供者健康状态？<ul><li>服务提供者会每 30 秒向 EurekaServer 发送心跳请求，报告健康状态</li><li>eureka 会更新服务列表信息，心跳不正常会被剔除</li><li>消费者就可以拉取到最新的信息</li></ul></li></ul><h3 id="搭建eureka服务注册中心"><a class="anchor" href="#搭建eureka服务注册中心">#</a> 搭建 Eureka 服务注册中心</h3><ol><li><p>引入依赖</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>     <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre>     <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>server<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></pre></td></tr></table></figure></li><li><p>编写启动类，并在启动类添加 **@EnableEurekaServer** 注解</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@SpringBootApplication</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@EnableEurekaServer</span> <span class="token comment">// 添加注解</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EurekaApplication</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">EurekaApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>配置文件上添加 eureka 服务器地址信息</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">eureka</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre>  <span class="token key atrule">client</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span> </pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka <span class="token comment">#注册中心地址</span></pre></td></tr></table></figure></li></ol><h3 id="搭建eureka客户端中心"><a class="anchor" href="#搭建eureka客户端中心">#</a> 搭建 Eureka 客户端中心</h3><ol><li><p>引入依赖</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span></pre></td></tr><tr><td data-num="2"></td><td><pre>       <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span></pre></td></tr><tr><td data-num="3"></td><td><pre>       <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>spring<span class="token operator">-</span>cloud<span class="token operator">-</span>starter<span class="token operator">-</span>netflix<span class="token operator">-</span>eureka<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span></pre></td></tr><tr><td data-num="4"></td><td><pre> <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></pre></td></tr></table></figure></li><li><p>编写启动类，并在启动类上添加 **@EnableEurekaClient** 注解</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span><span class="token string">"cn.itcast.user.mapper"</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@SpringBootApplication</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token annotation punctuation">@EnableEurekaClient</span> <span class="token comment">// 添加注解开启服务注册</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserApplication</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">UserApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>配置文件上写明 Eureka 服务端的地址信息</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token key atrule">spring</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="2"></td><td><pre> <span class="token key atrule">application</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token key atrule">name</span><span class="token punctuation">:</span> userservice <span class="token comment"># user 服务的名称</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">## eureka 服务中心</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token key atrule">eureka</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>  <span class="token key atrule">client</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//127.0.0.1<span class="token punctuation">:</span>10086/eureka</pre></td></tr></table></figure></li></ol><h3 id="eureka服务发现拉取"><a class="anchor" href="#eureka服务发现拉取">#</a> Eureka 服务发现 / 拉取</h3><ol><li><p>前提：完成 Eureka 服务端和 Eureka 客户端的搭建，并且服务中心可以看到这些注册到 Eureka 的服务</p></li><li><p>在原来<strong> RestTemplate</strong> 上加入 **@LoadBalanced** 注解</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token annotation punctuation">@Bean</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token annotation punctuation">@LoadBalanced</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token class-name">RestTemplate</span> <span class="token function">restTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p>将原来使用 RestTemplate 发送 http 请求时写入的 ip 地址替换成 eureka 服务端中的服务名，即 spring.application.name 字段的名称</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 2. 利用 restTemplate 发起 http 请求，查询用户 这里原来是 ip 地址，替换成服务名称</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> url <span class="token operator">=</span> <span class="token string">"http://userservice/user/"</span> <span class="token operator">+</span> order<span class="token punctuation">.</span><span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">User</span> user <span class="token operator">=</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>认识微服务</title>
      <link href="/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/computer-science/java/springcloud/%E8%AE%A4%E8%AF%86%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="认识微服务"><a class="anchor" href="#认识微服务">#</a> 认识微服务</h2><p>微服务是一种经过良好架构设计的<strong>分布式</strong>架构方案，微服务架构特征：</p><ul><li>单一职责：微服务拆分力度更小，每一个服务都对应唯一的业务能力，做到单一职责，避免重复业务开发。</li><li>面向服务：微服务对外暴露业务接口。</li><li>自治：团队独立、技术独立、数据独立、部署独立。</li><li>隔离性强：服务调用做好隔离、容错、降级、避免级联现象。</li></ul><h3 id="面试题"><a class="anchor" href="#面试题">#</a> 面试题：</h3><p>单体架构与分布式架构的区别？</p><ul><li>单体架构特点：简单方便，高度耦合，扩展性差，适合小型项目。例如：学生管理系统</li><li>分布式架构特点：松耦合，扩展性好，但架构复杂，难度大。适合大型互联网项目，例如：京东，淘宝。</li></ul><p>微服务：一种良好的分布式架构</p><ul><li>优点：拆分力度更小、服务更独立、耦合度更低</li><li>缺点：架构非常复杂，运维、监控、部署难度提高</li></ul><h3 id="微服务结构"><a class="anchor" href="#微服务结构">#</a> 微服务结构</h3><p>微服务这种方案需要技术框架来落地，全球的互联网公司都在积极尝试自己的微服务落地技术。在国内最知名的就是 SpringCloud 和阿里巴巴的 Dubbo。</p><p><img data-src="https://pic.imgdb.cn/item/64ee8d49661c6c8e54729987.jpg" alt="image-20230830082645810" /></p><h3 id="微服务技术对比"><a class="anchor" href="#微服务技术对比">#</a> 微服务技术对比</h3><p><img data-src="https://pic.imgdb.cn/item/64ee8ec5661c6c8e547347d2.jpg%5B" alt="" /></p><h3 id="企业需求"><a class="anchor" href="#企业需求">#</a> 企业需求</h3><p><img data-src="https://pic.imgdb.cn/item/64ee8f18661c6c8e5473504b.jpg" alt="" /></p><h3 id="springcloud"><a class="anchor" href="#springcloud">#</a> SpringCloud</h3><ul><li><strong>SpringCloud</strong> 是目前国内使用最广泛的微服务架构。官网地址：<span class="exturl" data-url="aHR0cHM6Ly9zcHJpbmcuaW8vcHJvamVjdHMvc3ByaW5nLWNsb3Vk">Spring Cloud</span></li><li><strong>SpringCloud</strong> 集成了各种微服务功能组件，并基于<strong> SpringBoot</strong> 实现了这些组件的自动装配，从而提供了良好的开箱即用体验：</li></ul><p><img data-src="https://pic.imgdb.cn/item/64ee90d0661c6c8e54740733.jpg" alt="微服务技术体系" /></p><h3 id="服务拆分与远程调用"><a class="anchor" href="#服务拆分与远程调用">#</a> 服务拆分与远程调用</h3><p><strong>服务拆分注意事项</strong></p><ol><li>不同微服务，不要重复开发相同业务</li><li>微服务数据独立，不要访问其他微服务的数据库</li><li>微服务可以将自己的业务暴露为接口，供其他微服务调用</li></ol><h3 id="微服务远程调用"><a class="anchor" href="#微服务远程调用">#</a> 微服务远程调用</h3><p><strong>提供者与消费者</strong></p><ul><li><p>服务提供者：一次业务中，被其他为服务调用的服务。（提供接口给其他微服务）</p></li><li><p>服务消费者：一次业务中，调用其他为服务的服务。（调用其他微服务提供的接口）</p></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 微服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操纵性理学</title>
      <link href="/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/"/>
      <url>/psychology/%E6%93%8D%E7%BA%B5%E5%BF%83%E7%90%86%E5%AD%A6/%E6%93%8D%E7%BA%B5%E6%80%A7%E7%90%86%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="操纵心理学"><a class="anchor" href="#操纵心理学">#</a> 操纵心理学</h2><p><strong>不要相信” 都是为你好 “，拒绝做软柿子</strong></p><p><strong>修炼你的心，懂得爱人，也要懂得爱自己</strong></p><p><strong>你的人生应该永远由你来选择</strong></p><h3 id=""><a class="anchor" href="#">#</a> </h3><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 心理学 </category>
          
          <category> 操纵心理学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人原则</title>
      <link href="/introduction/%E5%8E%9F%E5%88%99/"/>
      <url>/introduction/%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h3 id="原则"><a class="anchor" href="#原则">#</a> 原则</h3><ul><li><p>生活态度</p><ul><li><p>身体健康</p><p><strong>身体健康乃是第一要素，所有的原则都要建立在身体健康上。</strong></p><ol><li>平时熬夜不得超过两点，保证睡眠充足。</li><li>早上起床工作日在 8 点左右起来，休息日要在 10 点之前起来。</li><li>平时加强锻炼，平时锻炼需要控制在 1 个小时左右，室内室外就行。</li><li>饭菜不能过于重，需要合理膳食，荤素搭配，而且每天需要补充水果。</li></ol></li><li><p>心理健康</p><p><strong>基于我经常内耗的情况，我需要适当性地进行心理上的培养</strong></p><ol><li>休息日必须要画上 2 个小时进行心理书籍阅读。</li><li>工作日晚上睡觉时可以进行心理书籍阅读。</li><li>内耗时必须要寻找事情做，听音乐和看视频。</li><li>以正常合适的心态面对自己的各种情绪，不能因为某种情绪影响自己的状态就直接一刀切的忽视。</li></ol></li></ul></li><li><p>人际关系</p><ul><li><p>朋友关系</p><p><strong>朋友关系是我一直以来十分重视的关系，但是自己却经常把它搞砸，来自于内心深处那喜欢责怪他人的怪异心理。</strong></p><ol><li>建立朋友关系前，需要了解他人的脾性，如果经常性对你沉默，忽略，必须要收住热情，不能再进行主动行为。</li><li>由于建立的朋友关系大多是人走茶凉，所以，无论是对你多好的朋友，如果走后没有主动寻找过，都一律当做普通朋友，并以待之。</li><li>当与朋友相处时，如果遇到三观不合的情况下，不可直接指出，一定要远离，但不可操之过急，需不引起注意远离。</li><li>当与朋友相处时，如果遇到想做的事情可能遭受他的厌恶时，即当面骂人，无视风险，非他人所求就强行帮助（这点尤其注意），鉴于我的性格，我很容易在感到不适时，喜欢无视他人感受，无视所有风险，以个人感受为主要驱动来行动，我必须要改掉无视他人感受和风险，如果有这种想法，一定要旁敲侧击来询问他人建议，并非直接询问我的行为，而是表达情绪，即适当性抱怨他人忽略或者无视我的行为，适当表达出自己的不满，如果他人还是不管，3 次就可直接远离，切记不可摊牌翻脸，要循序渐进。</li><li>与朋友相处时，遇到朋友嘲讽时，如果非常生气，不可以直接无视，将自己之前喜欢辩解，喜欢对喷的行为改为话语：烦死了、闭嘴、我想安静点。切勿真正动气来报复。</li><li>不要主动窥探他人的生活，这点尤为重要，无论我多么寂寞，多么孤独，都不能主动地去窥探别人生活，或者主动性地进入别人生活。</li><li>朋友心情低落时，如果自己想要帮助他人，将自己的行为看成普通帮助，不能将其当做自己的好，而且一定得面对面交流，即在尊重他人的情况下，再进行适当帮助。</li></ol></li><li><p>亲情关系</p><ul><li><p>直系血缘关系（家人）</p><ol><li>关心家人必须建立在自己的状态良好的情况下，不能再将父母当做无话不说的对象，控制自己在父母面前抱怨的样子，收起自己遇到父母说话不符合自己三观的情况下驳斥，放下反驳的心态去面对家人，家人相处不是来辩论的，一切顺着他们来就行，听而不从，可以解决大部分问题。</li><li>父亲是个十分强硬，执拗的人，一旦认定的观念就不可能改变，所以他说的话全可以当做他个人不得志的倾述，我只需要当个附和的旁人即可，无需去跟他辩解，反驳他的话，改变别人不是我的人生课题，一定要原谅别人的无知，别人的愚蠢，别人的冒犯，因为为别人的问题生气和纠正别人不是自己的课题。</li><li>母亲是一个个性软弱，喜欢隐忍自己感受的人，她的性别十分恶劣，某种程度上，我的母亲带给我的影响大于父亲，所以遇到母亲在我面前歇斯底里地骂我不孝的情况，一定不要慌张，也不要辩解，如果可以的话，尽量避免这种情况即可。</li><li>妹妹被我伤害的最多，所以我需要做的是做好哥哥该干的事，不要再用之前的脾气面对她，也不能在他面前与父母对峙，吵架，平时有时间就联系一下她也可以。</li></ol></li><li><p>嫡系血缘关系（亲戚）</p><ol><li>好好对待自己的亲戚，但是不能以自己为第一个大学生的身份来教导别人，记住，永远不要轻易地去教导别人，千万不要轻易地去扶别人，这是我这 20 多年来犯的最大的一个错，我必须要纠正自己好为人师的性格，觉得自己比别人更懂某些道理，其实懂不懂从当前的境遇就可以看出来一个人是否是强人，那种别人口中厉害的人，我没有必要去强行地倾述自己的见解。只要不是自己悟出来的，别人强行灌输的道理我都不认，这辈子我只认我自己亲身悟出来的道理。</li><li>我并不是一个孝顺的好孩子，但是很多情况下，我不能得势并不是因为别人给我的个个理由，而是由于我自己的心境不如别人，我看了太多的人生大道，经历了很多低谷期，也抑郁过，自己也堕落过，但我还是那个我，我并不是希望别人来拯救的人，所以，我不会允许也不会求助于别人，尤其是亲戚，我不会抖露出自己的志向，也不会向任何人倾述我的烦恼和自己的计划。言多必失，这是我十分惨重的教训。</li></ol></li></ul></li><li><p>爱情关系</p><ol><li>我不确定自己是否需要爱情，但是如若真的遇到了自己喜爱的女孩，我一定会尽力地去爱她，不主动寻找是我对爱情的谨慎，因为有我父母娃娃亲的教训，我出生在一个并不和睦的家庭，这一切都是由于父母之间长期的内斗，窝里横让我对于爱情有了恐惧，这种恐惧是刻在骨子里的，我并不排斥这种情感，就像父母之间的矛盾一样，我只是对爱情有了更高的要求，我更倾向于寻找一个各方面都符合自己的，更愿意与我一同的爱情关系，而不是那种喜欢窝里斗，时常吵架的家庭。</li></ol></li><li><p>同事关系</p><ol><li>同事永远不是朋友，之前的我可以为任何人做任何事，现在的我以为，职场中我这种人首要做的就是藏拙，并且示弱，并请教别人，这是我第一段事业的教训，由于我的傲慢和好为人师，喜欢关注别人的成长，让我一直以来其实都是没有成长。我必须竭尽所能地关注自己的成长，我必须要以自己的事情为主，别人发生了什么事，我都无需去主动指教，我真的，这种喜欢教导别人的性格真的是十分阻碍我。</li><li>同事可以亲近，但是不能过度亲近，永远不能给自己的同事暴露自己的家事，自己的状态，自己的私事，这点尤为重要，别人的微信，别人的消息，不能恶心地去留意，上级的要求，要主动跟上级交代和沟通好细节，否则不要轻易地动手。</li><li>自己的事情不能让别人做，别人的事情，自己不轻易地做，如果上级再次要求自己的一些无理的要求，需要明确自己的态度，就算妥协也要表现出自己是被胁迫且是非我意愿的，这样其实就可以让我在其他事情上有更多的发语权，在职场上，没有朋友，没有知遇之恩的老板和上级，只有自己的利益，一定要在职场中保护好自己，不要成为顺从的羊，也不要成为过于尖锐的出头鸟。</li></ol></li></ul></li><li><p>责任</p><ul><li><p>个人责任</p><ol><li>我的责任是爱自己，首要就是爱自己，不再依靠别人的安慰，不再依靠别人的帮助，我要成为一个情感独立，生存独立的人，前 20 年都是掌握在我父母中，父母利用赡养我的理由一直以来都是采取打压来让我顺从他们，我到现在我甚至可以肯定他们可能还更喜欢看到我现在的样子，不要看他们对我的样子十分唾弃，其实内心都是在甩锅，底层的人其实就是那么一些人，喜欢落井下石，好为人师，喜欢打压别人，不知道如何爱自己，更不知道怎么爱别人。</li><li>我的责任其实首要是对要对自己的未来做准备，我要做什么，我想做什么，我必须要在有生之年在一些事中做出自己的功绩，我知道这很难，因为我个人天马行空，喜欢做一些不符实际的幻想，喜欢做白日梦，但是我对于这个世界，这个世界有什么组成，我们又是因为什么诞生在这个世界，我想要寻求答案，但是我知道，这并不是我这个普通人能做到的，但我会努力地去做，去做给自己看，有些事情，并不是一时没有能力就不能做的，我可以时时刻刻地去努力。</li></ol></li><li><p>家庭责任</p><ol><li>家庭责任书首要是孝敬父母，我知道我现在并无能力，也经常让父母担心，顶撞父母，当然，我会慢慢改，在我稳定好我自己后，我也会慢慢地回敬自己的父母，我并不想再去纠正自己的父母了，我决定要以当面顺从父母，背后应以自己来做，不能将父母的看法，父母的态度，父母的干预来影响自己，从此以后，我必须要谨慎对待各种观点，各种人对我的看法，我要做到表面无动于衷，背后分析利害并及时改正，司马懿的那句话说的好，这辈子走来，没有敌人，只有朋友，无论是谁，敌人也好，朋友也罢，都是能够让自己更加能够了解自己的人，不能对他们产生一些诸如怨恨、嫉妒、报复等等负面的情感来看别人，需要以礼待之，记住，自己的心态永远是自己最好的风水，不能让情绪，尤其是负面情绪击溃自己。</li><li>家庭责任第二点则是重建自己的影响力，不能让父母或者某些亲戚来干涉自己的事情，至于某些事情需要自己的时候，必须要有自己的确认，否则我不会将任何诸如钱财、信息、等等给父母许诺的任何人，我要逐渐找到自己信任的人，自己的父母生于底层，他们这一生都活在底层的环境，喜欢胡乱地结交别人，喜欢让我也去结交，哪怕别人和自己根本没有任何意愿，强行地撮合是最不能持久的，父亲一直以来都喜欢结交别人，然而忽略了自己，从不想着自己能怎么去帮助别人，一昧地想着如何从自己的关系中获益，这是十分不明智的做法，这世界上真的有人会因为一场谈话，一个谈不上很好的过去的缘分就去帮助一个根本不熟悉的人的孩子吗，我觉得这是不太可能的，所以，我一直坚信着，如果自己不强大，自己没有别人看中的特点和利益，是永远都不可能找到那所谓的贵人相助的，我觉得很多情况下，如果是别人强行塞给我的来帮助我的人，我反而不会去回报他，反而是那些在我真正遇到难处，自己主动或者被人发现并给予帮助的人，那种感恩，那种感情才是真挚的，总而言之，雪中送炭是真挚而且难得的。强塞给我，不是我想要的，我会觉得并不是我想，却与我父母来强行干预我的因果的人是无论如何都是无法让我产生好感的。</li></ol></li><li><p>岗位责任</p></li></ul></li><li><p>能力</p><ul><li><p>工作能力</p></li><li><p>生活能力</p></li><li><p>学习能力</p></li></ul></li></ul><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 个人简介 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原则 </tag>
            
            <tag> 个人详情 </tag>
            
            <tag> 个人分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础面试题</title>
      <link href="/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/computer-science/java/interview/Java%E5%9F%BA%E7%A1%80%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="java基础面试题"><a class="anchor" href="#java基础面试题">#</a> Java 基础面试题</h2><ol><li><p><strong>什么是 Java？它有哪些特点？</strong></p></li><li><p><strong>Java 中的四种访问修饰符是什么？</strong></p></li><li><p><strong>什么是面向对象编程（OOP）？</strong></p></li><li><p><strong>什么是多态性（Polymorphism）？</strong></p></li><li><p><strong>Java 中的异常处理机制是什么？</strong></p></li><li><p><strong>什么是 Java 的自动装箱和拆箱？</strong></p></li><li><p><strong>什么是 Java 的集合框架？</strong></p></li><li><p><strong>什么是 Java 线程？如何创建和启动线程？</strong></p></li><li><p><strong>什么是 Java 的同步机制？</strong></p></li><li><p><strong>Java 中的 final 关键字有什么用途？</strong></p></li><li><p><strong>Java 中如何实现多线程？</strong></p></li><li><p><strong>什么是 Java 的垃圾回收机制？</strong></p></li><li><p><strong>Java 中的静态方法和实例方法有何区别？</strong></p></li><li><p><strong>什么是 Java 的反射（Reflection）？</strong></p></li><li><p><strong>Java 中的抽象类和接口有何区别？</strong></p></li><li><p><strong>Java 中的 equals () 和 hashCode () 方法有何作用？</strong></p></li><li><p><strong>什么是 Java 的异常处理机制？</strong></p></li><li><p><strong>Java 中的序列化是什么？如何实现对象的序列化和反序列化？</strong></p></li><li><p><strong>Java 中的泛型（Generics）是什么？有什么作用？</strong></p></li><li><p><strong>Java 中的 Lambda 表达式是什么？有什么作用？</strong></p></li><li><p><strong>Java 中的重载和重写有何区别？</strong></p></li><li><p><strong>Java 中的 String 和 StringBuffer（或 StringBuilder）有何区别？</strong></p></li><li><p><strong>Java 中的静态块（static block）有何作用？</strong></p></li><li><p><strong>Java 中的异常分类及继承关系是什么？</strong></p></li><li><p><strong>Java 中的装箱和拆箱是什么？</strong></p></li><li><p><strong>Java 中的枚举（Enum）是什么？有什么用途？</strong></p></li><li><p><strong>Java 中的 finalize () 方法有何作用？</strong></p></li><li><p><strong>Java 中的注解是什么？有哪些内置注解？</strong></p></li><li><p><strong>Java 中的内部类有哪些类型？</strong></p></li><li><p><strong>Java 中的 ClassLoader 是什么？有哪些类加载器？</strong></p></li><li><p><strong>什么是 Java 中的泛型（Generics）？</strong></p></li><li><p><strong>Java 中的多态（Polymorphism）是什么？如何实现多态？</strong></p></li><li><p><strong>Java 中的集合框架（Collections Framework）包括哪些主要接口和类？</strong></p></li><li><p><strong>Java 中的序列化（Serialization）是什么？如何实现对象的序列化和反序列化？</strong></p></li><li><p><strong>Java 中的异常处理机制是怎样的？</strong></p></li><li><p><strong>Java 中的线程安全是什么？如何实现线程安全？</strong></p></li><li><p><strong>Java 中的反射（Reflection）是什么？如何使用反射获取类的信息和调用方法？</strong></p></li><li><p><strong>Java 中的 JVM（Java 虚拟机）是什么？它的作用是什么？</strong></p></li><li><p><strong>Java 中的 Lambda 表达式是什么？它的作用是什么？</strong></p></li><li><p><strong>Java 中的数据类型有哪些？基本数据类型和引用数据类型有什么区别？</strong></p></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> Java开发面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口限流</title>
      <link href="/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/"/>
      <url>/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%99%90%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h2 id="接口限流"><a class="anchor" href="#接口限流">#</a> 接口限流</h2><p>​接口限流是一种常见的应用程序设计模式，它的目的是为了防止系统超载，保持系统的可用性。在应用程序中，特别是在大规模分布式系统中，限制流量可以有效地控制系统负载，并避免由于高负载而导致的系统崩溃。</p><p>​限流通常是通过对请求进行计数并根据规则拒绝过多的请求来实现的。一些常见的限流策略包括： <code>固定窗口限流</code> 、 <code>滑动窗口限流</code> 、 <code>令牌桶限流</code> 、 <code>漏桶限流</code> 等。这些策略可以根据应用程序的实际需求和性能要求进行调整和组合使用。</p><p>​在实现接口限流时，需要考虑一些因素，如：最大请求速率、平均请求速率、请求处理时间、负载均衡等。一些常见的限流工具和框架，如 <code>Guava RateLimiter</code> 、 <code>Redis</code> 、 <code>Nginx</code>  等可以帮助实现接口限流。</p><p>​当我们的应用程序需要处理大量请求时，为了保证系统的稳定性和性能，我们可以使用接口限流技术来控制请求的流量，避免系统过载。以下是一些接口限流的解决方案：</p><ol><li><code>计数器算法</code> ：计数器算法是一种简单的限流算法，它基于一个计数器，每当有一个请求进来时就增加计数器的值。当计数器的值超过了设定的阈值时，就拒绝请求。这种算法的优点是简单易懂，但是不适合处理突发流量。</li><li><code>漏桶算法</code> ：漏桶算法是一种经典的限流算法，它模拟了一个水桶，请求就像水流一样，流进漏桶中，当漏桶已经满了时，就拒绝请求。漏桶算法可以有效地平滑请求的流量，避免系统过载。</li><li><code>令牌桶算法</code> ：令牌桶算法也是一种流量控制算法，它基于一个令牌桶，每当有一个请求进来时就从令牌桶中获取一个令牌，如果令牌桶中没有令牌了，就拒绝请求。令牌桶算法可以平滑处理请求的流量，适用于高峰期的流量控制。</li><li><code>基于时间窗口的限流</code> ：基于时间窗口的限流算法是一种常用的限流算法，它将时间分为多个窗口，每个窗口都有一个固定的限制值。当一个请求进来时，就检查当前时间窗口的请求数是否超过了限制值，如果超过了就拒绝请求。这种算法适用于处理大量请求的场景，可以有效地保护系统。</li><li><code>基于并发数的限流</code> ：基于并发数的限流算法是一种简单的限流算法，它通过监控系统中的并发请求数来控制请求的流量，当并发请求数达到一定阈值时就拒绝请求。这种算法适用于处理大量并发请求的场景，可以有效地保护系统。</li></ol><p>​这些都是常见的接口限流解决方案，我们可以根据实际业务场景选择合适的算法来保证系统的稳定性和性能。</p><h3 id="接口限流实现示例"><a class="anchor" href="#接口限流实现示例">#</a> 接口限流实现示例</h3><h4 id="1计数器算法"><a class="anchor" href="#1计数器算法">#</a> 1. 计数器算法</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastResetTime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxRequestsPerSecond<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> requestCount<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxRequestsPerSecond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastResetTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxRequestsPerSecond <span class="token operator">=</span> maxRequestsPerSecond<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>requestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentTime <span class="token operator">></span> lastResetTime <span class="token operator">+</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 1 second has passed since last reset</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            lastResetTime <span class="token operator">=</span> currentTime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            requestCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestCount <span class="token operator">>=</span> maxRequestsPerSecond<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// limit reached</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            requestCount<span class="token operator">++</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// request allowed</span></pre></td></tr><tr><td data-num="25"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="27"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>这个  <code>Counter</code>  类使用了一个  <code>lastResetTime</code>  变量来记录最后一次计数器清零的时间，以及一个  <code>requestCount</code>  变量来记录在这个时间段内已经发出的请求数量。在  <code>allowRequest()</code>  方法中，先判断是否已经过了 1 秒钟，如果是，则将计数器清零；然后再判断当前请求是否超过了每秒最大请求量，如果是，则返回  <code>false</code> ，否则将计数器加一，并返回  <code>true</code> 。可以根据实际需求来调整每秒最大请求量。</p><h4 id="2漏桶算法"><a class="anchor" href="#2漏桶算法">#</a> 2. 漏桶算法</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeakyBucket</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> maxBucketSize<span class="token punctuation">;</span>  <span class="token comment">// 漏桶容量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> flowRate<span class="token punctuation">;</span>       <span class="token comment">// 水流出速度</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentSize<span class="token punctuation">;</span>    <span class="token comment">// 当前桶内水量</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastLeakTime<span class="token punctuation">;</span>  <span class="token comment">// 上次漏水时间</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">LeakyBucket</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxBucketSize<span class="token punctuation">,</span> <span class="token keyword">int</span> flowRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>maxBucketSize <span class="token operator">=</span> maxBucketSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>flowRate <span class="token operator">=</span> flowRate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>currentSize <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastLeakTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">boolean</span> <span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token comment">// 计算桶内水量</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        currentSize <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> currentSize <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastLeakTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span> <span class="token operator">*</span> flowRate<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        lastLeakTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="19"></td><td><pre></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 如果桶未满，且本次请求能被放入桶中，则放行</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentSize <span class="token operator">+</span> tokens <span class="token operator">&lt;=</span> maxBucketSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            currentSize <span class="token operator">+=</span> tokens<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token comment">// 否则拒绝请求</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在上面的示例中，我们通过  <code>maxBucketSize</code>  定义了漏桶的容量， <code>flowRate</code>  定义了漏桶的出水速度，也就是漏水的速度。 <code>currentSize</code>  记录当前漏桶中的水量， <code>lastLeakTime</code>  记录上次漏水时间。在  <code>allowRequest</code>  方法中，首先计算当前漏桶中的水量，然后判断本次请求是否能被放入漏桶中，如果能，则将请求放入漏桶中，并返回  <code>true</code> ，否则返回  <code>false</code> ，拒绝请求。</p><h4 id="3令牌桶算法"><a class="anchor" href="#3令牌桶算法">#</a> 3. 令牌桶算法</h4><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>atomic<span class="token punctuation">.</span></span><span class="token class-name">AtomicInteger</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TokenBucket</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">// 桶的容量</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> capacity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token comment">// 当前桶内令牌数量</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">AtomicInteger</span> tokens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token comment">// 每秒增加的令牌数量</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> rate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token comment">// 上一次令牌添加的时间戳</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">long</span> lastAddTime<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">TokenBucket</span><span class="token punctuation">(</span><span class="token keyword">int</span> capacity<span class="token punctuation">,</span> <span class="token keyword">int</span> rate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>capacity <span class="token operator">=</span> capacity<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">=</span> rate<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastAddTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre></pre></td></tr><tr><td data-num="19"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">acquire</span><span class="token punctuation">(</span><span class="token keyword">int</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>        <span class="token comment">// 添加令牌</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token function">addTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token comment">// 判断桶内令牌数量是否足够</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>            <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token operator">-</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">addTokens</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>        <span class="token comment">// 计算当前时间和上一次添加令牌的时间之间应该添加的令牌数量</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">int</span> addTokens <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> lastAddTime<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000.0</span> <span class="token operator">*</span> rate<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>        <span class="token comment">// 如果添加的令牌数量不足一个，则不添加</span></pre></td></tr><tr><td data-num="35"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>addTokens <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>            <span class="token keyword">return</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>        <span class="token comment">// 添加令牌</span></pre></td></tr><tr><td data-num="39"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>tokens<span class="token punctuation">.</span><span class="token function">addAndGet</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>addTokens<span class="token punctuation">,</span> capacity<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="40"></td><td><pre>        <span class="token comment">// 更新上一次添加令牌的时间</span></pre></td></tr><tr><td data-num="41"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>lastAddTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="43"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>以上代码中， <code>TokenBucket </code> 类实现了令牌桶算法，使用了 <code> AtomicInteger</code>  类型的 tokens 属性保存桶内令牌数量。通过  <code>acquire(int tokens)</code>  方法尝试获取指定数量的令牌，如果令牌数量足够，则从桶内移除令牌，并返回 true；否则返回 false。同时，该类的 <code> addTokens()</code>  方法会根据当前时间和上一次添加令牌的时间计算出应该添加的令牌数量，并添加到桶内。</p><h4 id="4基于时间窗口的限流"><a class="anchor" href="#4基于时间窗口的限流">#</a> 4. 基于时间窗口的限流</h4><p>当我们使用基于时间窗口的限流时，我们可以使用一个固定大小的数组来存储每个时间窗口内的请求数量。我们可以定义一个时间窗口的长度，例如每秒钟或每分钟一个时间窗口，然后根据这个时间窗口内的请求数量来判断是否允许该请求通过。</p><p>下面是一个使用基于时间窗口的限流的 Java 代码示例：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimeWindowRateLimiter</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> limit<span class="token punctuation">;</span> <span class="token comment">// 限流阈值</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> windowSize<span class="token punctuation">;</span> <span class="token comment">// 时间窗口大小，单位为毫秒</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AtomicIntegerArray</span> counters<span class="token punctuation">;</span> <span class="token comment">// 存储每个时间窗口内的请求数量</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ScheduledExecutorService</span> scheduler<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">TimeWindowRateLimiter</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">,</span> <span class="token keyword">long</span> windowSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>limit <span class="token operator">=</span> limit<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>windowSize <span class="token operator">=</span> windowSize<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>        counters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicIntegerArray</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>windowSize <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据时间窗口大小计算数组长度</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        scheduler <span class="token operator">=</span> <span class="token class-name">Executors</span><span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        scheduler<span class="token punctuation">.</span><span class="token function">scheduleAtFixedRate</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">::</span><span class="token function">resetCounter</span><span class="token punctuation">,</span> windowSize<span class="token punctuation">,</span> windowSize<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">MILLISECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 定期清空计数器</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre></pre></td></tr><tr><td data-num="15"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">allowRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>        <span class="token keyword">int</span> currentCounterIndex <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>currentTime <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">%</span> counters<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 计算当前时间窗口所在的数组下标</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">int</span> currentCount <span class="token operator">=</span> counters<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span>currentCounterIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计数器加一</span></pre></td></tr><tr><td data-num="19"></td><td><pre>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentCount <span class="token operator">></span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 判断请求数量是否超过限流阈值</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            counters<span class="token punctuation">.</span><span class="token function">decrementAndGet</span><span class="token punctuation">(</span>currentCounterIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 计数器减一</span></pre></td></tr><tr><td data-num="21"></td><td><pre>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">resetCounter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> counters<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="28"></td><td><pre>            counters<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 清空计数器</span></pre></td></tr><tr><td data-num="29"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="30"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="31"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​在上面的代码中，我们使用  <code>AtomicIntegerArray</code>  数组来存储每个时间窗口内的请求数量。每次有请求进来时，我们先获取当前时间并计算出当前时间所在的时间窗口所在的数组下标。然后将该数组下标对应的计数器加一，判断是否超过限流阈值，如果超过则将计数器减一并拒绝该请求。定期清空计数器以开始新的时间窗口。</p><p>​基于并发数的限流一般采用信号量（ <code>Semaphore</code> ）实现，以下是一个简单的 Java 代码示例：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">Semaphore</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcurrentLimit</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">Semaphore</span> semaphore<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">ConcurrentLimit</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> </pre></td></tr><tr><td data-num="7"></td><td><pre>        semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span>limit<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token class-name">Runnable</span> task<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取信号量</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            task<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>            semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 释放信号量</span></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​在上面的代码中，我们通过  <code>Semaphore </code> 来实现并发数的限制。在构造方法中传入限制的并发数，每次执行任务时先调用  <code>semaphore.acquire()</code>  来获取一个信号量，如果已经达到限制的并发数，就会被阻塞直到有一个信号量被释放。任务执行完后再调用  <code>semaphore.release()</code>  来释放信号量。</p><p>​你可以在需要进行限流的地方使用  <code>ConcurrentLimit</code>  对象来包装需要执行的任务，以实现并发数限制。</p><h3 id="接口防刷各算法运用场景"><a class="anchor" href="#接口防刷各算法运用场景">#</a> 接口防刷各算法运用场景</h3><p>接口防刷是指限制同一用户在短时间内对接口的访问次数，以保证系统的稳定和安全。下面是几种常见的接口防刷算法及其运用场景：</p><ol><li><code>计数器算法</code> ：适用于对 <code>API</code>  调用频率的轻量级限制。例如在小型应用中使用，当同一个用户在指定时间内达到一定请求次数时会返回错误信息，可以用于防止恶意刷接口行为。</li><li><code>漏桶算法</code> ：适用于平滑请求流量，对突发流量进行限制。例如在 <code> CDN</code>  服务中可以利用漏桶算法对网络带宽进行限流，防止网络瘫痪。</li><li><code>令牌桶算法</code> ：适用于在短时间内处理请求数量比较少的场景，可以平滑地处理请求流量。例如在 <code>Web</code>  应用中限制用户的请求数量，可以保护系统不被恶意攻击。</li><li><code>基于时间窗口的限流</code> ：适用于对接口并发访问数的限制。例如在高并发访问场景下，使用时间窗口限制访问频率，避免了瞬时流量过大导致服务不可用的情况。</li><li><code>基于并发数的限流</code> ：适用于对服务能力的控制，避免服务过载。例如在分布式系统中，使用基于并发数的限流算法，可以控制分布式服务间的调用数量，避免服务调用链条过长，导致服务过载。</li></ol><p>需要注意的是，不同的算法适用于不同的场景，选择适合自己的算法是非常重要的。同时，防刷算法只是防止恶意访问的一种手段，还需要通过其他安全措施来保证系统的安全性。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 接口开发 </tag>
            
            <tag> 开发注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口防刷</title>
      <link href="/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%98%B2%E5%88%B7/"/>
      <url>/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E9%98%B2%E5%88%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="接口防刷"><a class="anchor" href="#接口防刷">#</a> 接口防刷</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 接口开发 </tag>
            
            <tag> 开发注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>接口实现幂等性</title>
      <link href="/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E6%80%A7/"/>
      <url>/computer-science/java/notice/%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0%E5%B9%82%E7%AD%89%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="接口实现幂等性"><a class="anchor" href="#接口实现幂等性">#</a> 接口实现幂等性</h2><p>实现接口的幂等性是为了确保多次调用同一个接口请求不会对系统产生不一致的影响，即使请求被重复发送或执行多次，也应该具有相同的效果。在设计和实现接口时，可以采用以下一些方法来确保接口的幂等性：</p><ol><li><strong>唯一请求标识符（Request Identifier）</strong>：每个请求都应该携带一个唯一的标识符，服务器端可以使用这个标识符来识别请求是否已经被处理。如果已经处理过的请求再次到达，服务器可以忽略它，或者返回相同的响应。常见的方式是在请求头或请求参数中包含一个唯一的标识符。</li><li><strong>幂等性检测</strong>：在服务器端，可以对每个请求进行幂等性检测。这通常需要记录已经处理的请求标识符，并在接收到请求时检查该标识符是否已经存在于记录中。如果存在，表示请求已经被处理，可以返回相同的响应。</li><li><strong>使用 HTTP 方法</strong>：HTTP 方法本身具有幂等性。例如，GET、PUT、DELETE 等 HTTP 方法都是幂等的，因此在 RESTful API 设计中，可以合理地使用这些方法来实现接口的幂等性。</li><li><strong>幂等性响应处理</strong>：客户端在接收到服务器的响应后，应该能够处理重复的响应。这意味着客户端需要能够处理重复请求的情况，例如，不重复执行同一个操作或合理地处理响应数据。</li><li><strong>使用事务</strong>：如果接口涉及到数据库操作或其他需要事务支持的操作，可以使用数据库事务或分布式事务来确保幂等性。事务可以保证一系列操作的原子性和幂等性。</li><li><strong>版本控制</strong>：在接口中引入版本控制，使得不同版本的接口可以共存。这样，即使客户端使用旧版本接口发送请求，新版本接口仍然能够正确处理请求，保证幂等性。</li><li><strong>幂等性测试</strong>：在接口开发阶段，需要进行幂等性测试，模拟多次请求，检查接口的行为是否满足幂等性要求。</li><li><strong>接口文档和规范</strong>：在接口文档中明确指出接口的幂等性行为，以便客户端开发者正确使用接口。</li></ol><p>综上所述，实现接口的幂等性需要在接口设计和开发阶段采取一系列策略和措施，以确保不同请求对系统的影响是可预测和一致的。这对于构建可靠的分布式系统和 API 非常重要。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> 开发规范 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> 接口开发 </tag>
            
            <tag> 开发注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合</title>
      <link href="/computer-science/java/javase/Java%E9%9B%86%E5%90%88/"/>
      <url>/computer-science/java/javase/Java%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="java集合"><a class="anchor" href="#java集合">#</a> Java 集合</h2><h3 id="arraylist"><a class="anchor" href="#arraylist">#</a> ArrayList</h3><h3 id="linkedlist"><a class="anchor" href="#linkedlist">#</a> LinkedList</h3><h3 id="vector"><a class="anchor" href="#vector">#</a> Vector</h3><h3 id="set"><a class="anchor" href="#set">#</a> Set</h3><h3 id="hashmap"><a class="anchor" href="#hashmap">#</a> HashMap</h3><h3 id="hashset"><a class="anchor" href="#hashset">#</a> HashSet</h3><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序言</title>
      <link href="/psychology/%E8%87%AA%E5%8D%91%E4%B8%8E%E8%B6%85%E8%B6%8A/%E5%BA%8F%E8%A8%80/"/>
      <url>/psychology/%E8%87%AA%E5%8D%91%E4%B8%8E%E8%B6%85%E8%B6%8A/%E5%BA%8F%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="自卑与超越"><a class="anchor" href="#自卑与超越">#</a> 自卑与超越</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 心理学 </category>
          
          <category> 自卑与超越 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心理学知识 </tag>
            
            <tag> 阿德勒心理学 </tag>
            
            <tag> 自卑与超越 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>语言元素</title>
      <link href="/computer-science/python/basic/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/"/>
      <url>/computer-science/python/basic/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="语言元素"><a class="anchor" href="#语言元素">#</a> 语言元素</h2><h4 id="指令和程序"><a class="anchor" href="#指令和程序">#</a> 指令和程序</h4><p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JUFGJUMyJUI3JUU4JUFGJUJBJUU0JUJDJThBJUU2JTlCJUJDJUU3JUJCJTkzJUU2JTlFJTg0"> “冯・诺依曼结构”</span> 的计算机。“冯・诺依曼结构” 有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种 “逢二进一” 的计数法，跟我们人类使用的 “逢十进一” 的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012 年是上一个所谓的 “太阳纪” 的最后一年，而 2013 年则是新的 “太阳纪” 的开始，后来这件事情被以讹传讹的方式误传为”2012 年是玛雅人预言的世界末日 “这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示 1，低电压表示 0），于是在 “冯・诺依曼结构” 的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJThDJUU4JUJGJTlCJUU1JTg4JUI2">维基百科</span>或者<span class="exturl" data-url="aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20=">百度百科</span>科普一下。</p><blockquote><p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018 年 6 月，Intel 宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019 年，IBM 和 Google 都推出了自己的量子计算机。</p></blockquote><h3 id="变量和类型"><a class="anchor" href="#变量和类型">#</a> 变量和类型</h3><p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python 中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p><ul><li>整型：Python 中可以处理任意大小的整数（Python 2.x 中有 <code>int</code>  和 <code>long</code>  两种类型的整数，但这种区分对 Python 来说意义不大，因此在 Python 3.x 中整数只有 int 这一种了），而且支持二进制（如 <code>0b100</code> ，换算成十进制是 4）、八进制（如 <code>0o100</code> ，换算成十进制是 64）、十进制（ <code>100</code> ）和十六进制（ <code>0x100</code> ，换算成十进制是 256）的表示法。</li><li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如 <code>123.456</code> ）之外还支持科学计数法（如 <code>1.23456e2</code> ）。</li><li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如 <code>'hello'</code>  和 <code>&quot;hello&quot;</code> , 字符串还有原始字符串表示法、字节字符串表示法、Unicode 字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li><li>布尔型：布尔值只有 <code>True</code> 、 <code>False</code>  两种值，要么是 <code>True</code> ，要么是 <code>False</code> ，在 Python 中，可以直接用 <code>True</code> 、 <code>False</code>  表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如 <code>3 &lt; 5</code>  会产生布尔值 <code>True</code> ，而 <code>2 == 1</code>  会产生布尔值 <code>False</code> ）。</li><li>复数型：形如 <code>3+5j</code> ，跟数学上的复数表示一样，唯一不同的是虚部的 <code>i</code>  换成了 <code>j</code> 。实际上，这个类型并不常用，大家了解一下就可以了。</li></ul><h4 id="变量命名"><a class="anchor" href="#变量命名">#</a> 变量命名</h4><p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在 Python 中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p><ul><li>硬性规则：<ul><li>变量名由字母（广义的 Unicode 字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li><li>大小写敏感（大写的 <code>a</code>  和小写的 <code>A</code>  是两个不同的变量）。</li><li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li></ul></li><li>PEP 8 要求：<ul><li>用小写字母拼写，多个单词用下划线连接。</li><li>受保护的实例属性用单个下划线开头（后面会讲到）。</li><li>私有的实例属性用两个下划线开头（后面会讲到）。</li></ul></li></ul><p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p><h4 id="变量的使用"><a class="anchor" href="#变量的使用">#</a> 变量的使用</h4><p>下面通过几个例子来说明变量的类型和变量使用。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>使用变量保存数据并进行加减乘除运算</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="6"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>a <span class="token operator">=</span> <span class="token number">321</span></pre></td></tr><tr><td data-num="8"></td><td><pre>b <span class="token operator">=</span> <span class="token number">12</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span>    <span class="token comment"># 333</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>    <span class="token comment"># 309</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b<span class="token punctuation">)</span>    <span class="token comment"># 3852</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">/</span> b<span class="token punctuation">)</span>    <span class="token comment"># 26.75</span></pre></td></tr></table></figure><p>在 Python 中可以使用 <code>type</code>  函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>使用type()检查变量的类型</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="6"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>a <span class="token operator">=</span> <span class="token number">100</span></pre></td></tr><tr><td data-num="8"></td><td><pre>b <span class="token operator">=</span> <span class="token number">12.345</span></pre></td></tr><tr><td data-num="9"></td><td><pre>c <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">5j</span></pre></td></tr><tr><td data-num="10"></td><td><pre>d <span class="token operator">=</span> <span class="token string">'hello, world'</span></pre></td></tr><tr><td data-num="11"></td><td><pre>e <span class="token operator">=</span> <span class="token boolean">True</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class 'int'></span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class 'float'></span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class 'complex'></span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class 'str'></span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># &lt;class 'bool'></span></pre></td></tr></table></figure><p>可以使用 Python 中内置的函数对变量类型进行转换。</p><ul><li><code>int()</code> ：将一个数值或字符串转换成整数，可以指定进制。</li><li><code>float()</code> ：将一个字符串转换成浮点数。</li><li><code>str()</code> ：将指定的对象转换成字符串形式，可以指定编码。</li><li><code>chr()</code> ：将整数转换成该编码对应的字符串（一个字符）。</li><li><code>ord()</code> ：将字符串（一个字符）转换成对应的编码（整数）。</li></ul><p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>使用input()函数获取键盘输入(字符串)</pre></td></tr><tr><td data-num="3"></td><td><pre>使用int()函数将输入的字符串转换成整数</pre></td></tr><tr><td data-num="4"></td><td><pre>使用print()函数输出带占位符的字符串</pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="7"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="8"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="9"></td><td><pre>a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'a = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>b <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'b = '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d + %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d - %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d * %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">*</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d / %d = %f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">/</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d // %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">//</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d %% %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%d ** %d = %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a <span class="token operator">**</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：上面的 print 函数中输出的字符串使用了占位符语法，其中 <code>%d</code>  是整数的占位符， <code>%f</code>  是小数的占位符， <code>%%</code>  表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成 <code>%%</code> ），字符串之后的 <code>%</code>  后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p></blockquote><h3 id="运算符"><a class="anchor" href="#运算符">#</a> 运算符</h3><p>Python 支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code>   <code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数</td></tr><tr><td><code>~</code>   <code>+</code>   <code>-</code></td><td>按位取反，正负号</td></tr><tr><td><code>*</code>   <code>/</code>   <code>%</code>   <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code>   <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code>   <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code>   <code>\|</code></td><td>按位异或，按位或</td></tr><tr><td><code>&lt;=</code>   <code>&lt;</code>   <code>&gt;</code>   <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code>   <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>    <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code>   <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code>   <code>or</code>   <code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code>   <code>+=</code>   <code>-=</code>   <code>*=</code>   <code>/=</code>   <code>%=</code>   <code>//=</code>   <code>**=</code>   <code>&amp;=</code>   <code>|=</code>   <code>^=</code>   <code>&gt;&gt;=</code>   <code>&lt;&lt;=</code></td><td>（复合）赋值运算符</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h4 id="赋值运算符"><a class="anchor" href="#赋值运算符">#</a> 赋值运算符</h4><p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>赋值运算符和复合赋值运算符</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="6"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>a <span class="token operator">=</span> <span class="token number">10</span></pre></td></tr><tr><td data-num="8"></td><td><pre>b <span class="token operator">=</span> <span class="token number">3</span></pre></td></tr><tr><td data-num="9"></td><td><pre>a <span class="token operator">+=</span> b        <span class="token comment"># 相当于：a = a + b</span></pre></td></tr><tr><td data-num="10"></td><td><pre>a <span class="token operator">*=</span> a <span class="token operator">+</span> <span class="token number">2</span>    <span class="token comment"># 相当于：a = a * (a + 2)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>      <span class="token comment"># 算一下这里会输出什么</span></pre></td></tr></table></figure><h3 id="比较运算符和逻辑运算符"><a class="anchor" href="#比较运算符和逻辑运算符">#</a> 比较运算符和逻辑运算符</h3><p>比较运算符有的地方也称为关系运算符，包括 <code>==</code> 、 <code>!=</code> 、 <code>&lt;</code> 、 <code>&gt;</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code> ，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是 <code>==</code> ，请注意这个地方是两个等号，因为 <code>=</code>  是赋值运算符，我们在上面刚刚讲到过， <code>==</code>  才是比较相等的比较运算符。比较运算符会产生布尔值，要么是 <code>True</code>  要么是 <code>False</code> 。</p><p>逻辑运算符有三个，分别是 <code>and</code> 、 <code>or</code>  和 <code>not</code> 。 <code>and</code>  字面意思是 “而且”，所以 <code>and</code>  运算符会连接两个布尔值，如果两个布尔值都是 <code>True</code> ，那么运算的结果就是 <code>True</code> ；左右两边的布尔值有一个是 <code>False</code> ，最终的运算结果就是 <code>False</code> 。相信大家已经想到了，如果 <code>and</code>  左边的布尔值是 <code>False</code> ，不管右边的布尔值是什么，最终的结果都是 <code>False</code> ，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在 <code>and</code>  运算符左边为 <code>False</code>  的情况下，右边的表达式根本不会执行。 <code>or</code>  字面意思是 “或者”，所以 <code>or</code>  运算符也会连接两个布尔值，如果两个布尔值有任意一个是 <code>True</code> ，那么最终的结果就是 <code>True</code> 。当然， <code>or</code>  运算符也是有短路功能的，在它左边的布尔值为 <code>True</code>  的情况下，右边的表达式根本不会执行。 <code>not</code>  运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是 <code>True</code>  运算结果就是 <code>False</code> ，而后面的布尔值如果是 <code>False</code>  则运算结果就是 <code>True</code> 。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>比较运算符和逻辑运算符的使用</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="6"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>flag0 <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="8"></td><td><pre>flag1 <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">></span> <span class="token number">2</span></pre></td></tr><tr><td data-num="9"></td><td><pre>flag2 <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span> <span class="token number">1</span></pre></td></tr><tr><td data-num="10"></td><td><pre>flag3 <span class="token operator">=</span> flag1 <span class="token keyword">and</span> flag2</pre></td></tr><tr><td data-num="11"></td><td><pre>flag4 <span class="token operator">=</span> flag1 <span class="token keyword">or</span> flag2</pre></td></tr><tr><td data-num="12"></td><td><pre>flag5 <span class="token operator">=</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag0 ='</span><span class="token punctuation">,</span> flag0<span class="token punctuation">)</span>    <span class="token comment"># flag0 = True</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag1 ='</span><span class="token punctuation">,</span> flag1<span class="token punctuation">)</span>    <span class="token comment"># flag1 = True</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag2 ='</span><span class="token punctuation">,</span> flag2<span class="token punctuation">)</span>    <span class="token comment"># flag2 = False</span></pre></td></tr><tr><td data-num="16"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag3 ='</span><span class="token punctuation">,</span> flag3<span class="token punctuation">)</span>    <span class="token comment"># flag3 = False</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag4 ='</span><span class="token punctuation">,</span> flag4<span class="token punctuation">)</span>    <span class="token comment"># flag4 = True</span></pre></td></tr><tr><td data-num="18"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag5 ='</span><span class="token punctuation">,</span> flag5<span class="token punctuation">)</span>    <span class="token comment"># flag5 = False</span></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以 <code>flag0 = 1 == 1</code>  先做 <code>1 == 1</code>  产生布尔值 <code>True</code> ，再将这个值赋值给变量 <code>flag0</code> 。 <code>print</code>  函数可以输出多个值，多个值之间可以用 <code>,</code>  进行分隔，输出的内容之间默认以空格分开。</p></blockquote><h3 id="练习"><a class="anchor" href="#练习">#</a> 练习</h3><h4 id="练习1华氏温度转换为摄氏温度"><a class="anchor" href="#练习1华氏温度转换为摄氏温度">#</a> 练习 1：华氏温度转换为摄氏温度。</h4><blockquote><p>提示：华氏温度到摄氏温度的转换公式为：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy="false">(</mo><mi>F</mi><mo>−</mo><mn>32</mn><mo stretchy="false">)</mo><mo>÷</mo><mn>1.8</mn></mrow><annotation encoding="application/x-tex">C=(F - 32) \div 1.8</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">÷</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">.</span><span class="mord">8</span></span></span></span>。</p></blockquote><p>参考答案：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>将华氏温度转换为摄氏温度</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="6"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>f <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入华氏温度: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>c <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1.8</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%.1f华氏度 = %.1f摄氏度'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：在使用 <code>print</code>  函数输出时，也可以对字符串内容进行格式化处理，上面 <code>print</code>  函数中的字符串 <code>%.1f</code>  是一个占位符，稍后会由一个 <code>float</code>  类型的变量值替换掉它。同理，如果字符串中有 <code>%d</code> ，后面可以用一个 <code>int</code>  类型的变量值替换掉它，而 <code>%s</code>  会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中 <code>&#123;f:.1f&#125;</code>  和 <code>&#123;c:.1f&#125;</code>  可以先看成是 <code>&#123;f&#125;</code>  和 <code>&#123;c&#125;</code> ，表示输出时会用变量 <code>f</code>  和变量 <code>c</code>  的值替换掉这两个占位符，后面的 <code>:.1f</code>  表示这是一个浮点数，小数点后保留 1 位有效数字。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>f<span class="token punctuation">:</span><span class="token format-spec">.1f</span><span class="token punctuation">&#125;</span></span><span class="token string">华氏度 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">:</span><span class="token format-spec">.1f</span><span class="token punctuation">&#125;</span></span><span class="token string">摄氏度'</span></span><span class="token punctuation">)</span></pre></td></tr></table></figure></blockquote><h4 id="练习2输入圆的半径计算计算周长和面积"><a class="anchor" href="#练习2输入圆的半径计算计算周长和面积">#</a> 练习 2：输入圆的半径计算计算周长和面积。</h4><p>参考答案：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>输入半径计算圆的周长和面积</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="6"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>radius <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入圆的半径: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radius</pre></td></tr><tr><td data-num="9"></td><td><pre>area <span class="token operator">=</span> <span class="token number">3.1416</span> <span class="token operator">*</span> radius <span class="token operator">*</span> radius</pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'周长: %.2f'</span> <span class="token operator">%</span> perimeter<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'面积: %.2f'</span> <span class="token operator">%</span> area<span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="练习3输入年份判断是不是闰年"><a class="anchor" href="#练习3输入年份判断是不是闰年">#</a> 练习 3：输入年份判断是不是闰年。</h4><p>参考答案：</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>输入年份 如果是闰年输出True 否则输出False</pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="5"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="6"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="7"></td><td><pre>year <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'请输入年份: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment"># 如果代码太长写成一行不便于阅读 可以使用 \ 对代码进行折行</span></pre></td></tr><tr><td data-num="9"></td><td><pre>is_leap <span class="token operator">=</span> year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token keyword">or</span> \</pre></td></tr><tr><td data-num="10"></td><td><pre>          year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>is_leap<span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符 <code>and</code>  和 <code>or</code>  会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出 <code>True</code> ，平年输出 <code>False</code> 。</p></blockquote><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String类</title>
      <link href="/computer-science/java/javase/String%E7%B1%BB/"/>
      <url>/computer-science/java/javase/String%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="string类"><a class="anchor" href="#string类">#</a> String 类</h3><p>​ <code>String</code>  是 <code>Java</code>  中非常常用的一个类，它代表了一个字符串对象。在 <code>Java</code>  中，字符串是不可变的，也就是说，一旦一个字符串对象被创建，它的值就不能被改变。因此，每次对字符串进行修改，都会创建一个新的字符串对象。</p><h3 id="string类为什么是不可变的"><a class="anchor" href="#string类为什么是不可变的">#</a> String 类为什么是不可变的？</h3><p>​String 类的不可变特性指的是 String 实例的值一旦被创建就不能被修改。这意味着对一个 String 对象进行操作时，如果需要修改其值，实际上是创建了一个新的 String 对象，并将新对象的引用赋给原对象。这种特性有助于提高程序的性能和安全性。</p><p>​从源码层面来看，String 类中的不可变特性是通过使用 final 关键字和 private 修饰符来实现的。String 类中的每个方法都不会修改原有的 String 对象，而是返回一个新的 String 对象，以保持原有的 String 对象的不可变性。</p><p>​例如，String 类中的 <code>concat</code>  方法可以将两个字符串连接起来，返回一个新的 String 对象，而不会修改原有的字符串：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"World"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">String</span> str3 <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建新的 String 对象，值为 "HelloWorld"</span></pre></td></tr></table></figure><p>​另外，String 类还有一种常用的创建方式，即使用字符串字面值创建对象。这种方式在 Java 虚拟机中被优化，称为字符串常量池（String Pool）。当使用字符串字面值创建一个 String 对象时，Java 虚拟机会首先在字符串常量池中查找是否已存在该值的字符串对象，如果存在则返回该对象的引用，否则创建一个新的 String 对象并加入字符串常量池。例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span> <span class="token comment">// 创建新的 String 对象并加入字符串常量池</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span> <span class="token comment">// 直接返回字符串常量池中的引用，与 str1 引用同一个对象</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建新的 String 对象，不在字符串常量池中</span></pre></td></tr></table></figure><p>​由于 String 的不可变特性和字符串常量池的存在，可以安全地共享字符串对象，从而提高程序的性能和安全性。</p><h3 id="string类有很多实用的方法例如"><a class="anchor" href="#string类有很多实用的方法例如">#</a> <strong>String 类有很多实用的方法，例如：</strong></h3><ul><li><code>length()</code> ：获取字符串的长度。</li><li><code>charAt(int index)</code> ：获取指定索引位置的字符。</li><li><code>substring(int beginIndex, int endIndex)</code> ：获取指定索引范围内的子字符串。</li><li><code>concat(String str)</code> ：将指定字符串连接到此字符串的末尾。</li><li><code>indexOf(String str)</code> ：返回指定子字符串第一次出现的索引。</li><li><code>equals(Object anObject)</code> ：将此字符串与指定对象进行比较。</li><li><code>toUpperCase()</code> ：将字符串中的所有字符转换为大写。</li><li><code>toLowerCase()</code> ：将字符串中的所有字符转换为小写。</li><li>...</li></ul><p><strong>以下是 String 类的常用方法的例子：</strong></p><ol><li><code>length()</code>  方法：获取字符串的长度。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> length <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// length = 12</span></pre></td></tr></table></figure><ol start="2"><li><code>charAt(int index)</code>  方法：获取指定位置的字符。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// c = 'e'</span></pre></td></tr></table></figure><ol start="3"><li><code>substring(int beginIndex, int endIndex)</code>  方法：获取指定位置范围内的子字符串。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> subStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// subStr = "Hello"</span></pre></td></tr></table></figure><ol start="4"><li><code>indexOf(String str)</code>  方法：获取指定字符串在该字符串中第一次出现的位置。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// index = 6</span></pre></td></tr></table></figure><ol start="5"><li><code>lastIndexOf(String str)</code>  方法：获取指定字符串在该字符串中最后一次出现的位置。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> index <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// index = 9</span></pre></td></tr></table></figure><ol start="6"><li><code>equals(Object obj)</code>  方法：比较字符串是否相等。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">boolean</span> isEqual <span class="token operator">=</span> str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// isEqual = true</span></pre></td></tr></table></figure><ol start="7"><li><code>startsWith(String prefix)</code>  方法：判断字符串是否以指定字符串开头。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">boolean</span> startsWith <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// startsWith = true</span></pre></td></tr></table></figure><ol start="8"><li><code>endsWith(String suffix)</code>  方法：判断字符串是否以指定字符串结尾。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">boolean</span> endsWith <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// endsWith = true</span></pre></td></tr></table></figure><ol start="9"><li><code>replace(char oldChar, char newChar)</code>  方法：用指定字符替换字符串中的所有指定字符。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> newStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// newStr = "Hell* W*rld!"</span></pre></td></tr></table></figure><ol start="10"><li><code>toLowerCase()</code>  方法和 <code>toUpperCase()</code>  方法：将字符串转换为小写或大写。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello World!"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> lowerCaseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lowerCaseStr = "hello world!"</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">String</span> upperCaseStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// upperCaseStr = "HELLO WORLD!"</span></pre></td></tr></table></figure><h3 id="string类其他特性"><a class="anchor" href="#string类其他特性">#</a> String 类其他特性</h3><p>​ <code>String</code>  类还支持字符串拼接操作。在 <code>Java 5</code>  之前，通常使用字符串拼接操作符 <code>+</code>  来实现字符串拼接，例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">"world!"</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>​在 <code>Java 5</code>  及之后的版本中，还引入了 <code>StringBuilder</code>  和 <code>StringBuffer</code>  两个类来优化字符串拼接操作。这两个类可以动态地添加、修改和删除字符串中的字符，并且能够避免频繁创建新的字符串对象。例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>​当需要在多线程环境下使用字符串拼接操作时，应该使用 <code>StringBuffer</code>  类。如果在单线程环境下使用字符串拼接操作，或者需要更高的性能，应该使用 <code>StringBuilder</code>  类。</p><p>​总之， <code>String</code>  类是 <code>Java</code>  中非常常用的一个类，它不仅支持字符串的基本操作，还提供了丰富的字符串处理方法，对于 <code>Java</code>  程序开发来说是一个必不可少的类。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日期类</title>
      <link href="/computer-science/java/javase/%E6%97%A5%E6%9C%9F%E7%B1%BB/"/>
      <url>/computer-science/java/javase/%E6%97%A5%E6%9C%9F%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="java日期类"><a class="anchor" href="#java日期类">#</a> Java 日期类</h2><p>​ <code>Java</code>  日期类主要包括 <code>java.util.Date</code> 、 <code>java.util.Calendar</code>  和 <code>java.time</code>  包下的类。</p><p>​ <code>java.util.Date</code>  类是 <code>Java</code>  提供的最早的日期类，它表示自 1970 年 1 月 1 日 0 时 0 分 0 秒 (GMT) 起的毫秒数。但是它的设计存在缺陷，所以在 <code>Java 8</code>  之后，推荐使用 java.time 包下的日期类。</p><p>​ <code>java.util.Calendar</code>  类是一个抽象类，提供了一些基本的日期操作，比如获取某一时间的年、月、日、时、分、秒等。但是该类使用起来比较繁琐。</p><p>​ <code>Java 8</code>  之后推出了全新的日期时间 <code>API</code> ， <code>java.time</code>  包下的类，包括 <code>LocalDate</code> 、 <code>LocalTime</code> 、 <code>LocalDateTime</code> 、 <code>ZonedDateTime</code>  等，这些类提供了更简单易用的方法和更好的可读性，能够更方便地进行日期和时间的计算和格式化。</p><p>下面是一些常用的 Java 日期类的方法：</p><h3 id="date"><a class="anchor" href="#date">#</a> Date</h3><ul><li><code>Date()</code> ：创建一个表示当前时间的 Date 对象。</li><li><code>getTime()</code> ：返回自 1970 年 1 月 1 日 0 时 0 分 0 秒 (GMT) 起的毫秒数。</li><li><code>toString()</code> ：返回一个 String 类型的表示形式，格式为 <code>EEE MMM dd HH:mm:ss zzz yyyy</code> 。</li></ul><h3 id="calender"><a class="anchor" href="#calender">#</a> Calender</h3><ul><li><code>getInstance()</code> ：返回一个 Calendar 对象，表示当前时间。</li><li><code>get(int field)</code> ：获取指定的日期字段值，如 <code>Calendar.YEAR</code> 、 <code>Calendar.MONTH</code> 、 <code>Calendar.DAY_OF_MONTH</code>  等。</li><li><code>set(int field, int value)</code> ：设置指定的日期字段值。</li><li><code>getTime()</code> ：返回一个 Date 对象，表示当前时间。</li></ul><h2 id="jdk8新增的日期类"><a class="anchor" href="#jdk8新增的日期类">#</a> JDK8 新增的日期类</h2><p>​Java 8 中引入了  <code>java.time</code>  包，该包提供了一组全新的日期和时间 API，其中包括  <code>LocalDate</code> 、 <code>LocalDateTime</code> 、 <code>ZonedDateTime</code>  等类，它们比旧的  <code>java.util.Date</code>  和  <code>java.util.Calendar</code>  更加方便易用，同时也更加安全和健壮。</p><p>以下是  <code>LocalDate</code> 、 <code>LocalDateTime</code>  的详细介绍：</p><h3 id="localdate"><a class="anchor" href="#localdate">#</a> LocalDate</h3><p><code>LocalDate</code>  表示一个日期，不包含时间和时区信息。它可以用来表示一个生日、节日、合同签订日期等等。</p><p>创建  <code>LocalDate</code>  对象有多种方式，比如使用  <code>now()</code>  方法获取当前日期，或者使用  <code>of()</code>  方法指定年、月、日：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDate</span> today <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>我们可以通过  <code>getYear()</code> 、 <code>getMonth()</code> 、 <code>getDayOfMonth()</code>  等方法获取日期的年、月、日等信息：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>LocalDate</code>  还提供了很多方法，比如  <code>plusDays()</code> 、 <code>minusMonths()</code>  等，用于对日期进行加减操作。例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDate</span> tomorrow <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDate</span> previousMonthSameDay <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">minusMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>LocalDate</code>  也支持一些常用的比较方法，比如  <code>isBefore()</code> 、 <code>isAfter()</code> 、 <code>isEqual()</code> ，用于比较两个日期的先后顺序：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">boolean</span> isBefore <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>tomorrow<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">boolean</span> isAfter <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>previousMonthSameDay<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">boolean</span> isEqual <span class="token operator">=</span> today<span class="token punctuation">.</span><span class="token function">isEqual</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="localdatetime"><a class="anchor" href="#localdatetime">#</a> LocalDateTime</h3><p><code>LocalDateTime</code>  表示一个日期时间，不包含时区信息。它可以用来表示一个会议时间、发布时间、交易时间等等。</p><p>创建  <code>LocalDateTime</code>  对象有多种方式，比如使用  <code>now()</code>  方法获取当前日期时间，或者使用  <code>of()</code>  方法指定年、月、日、时、分、秒等：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>我们可以通过  <code>getYear()</code> 、 <code>getMonth()</code> 、 <code>getDayOfMonth()</code> 、 <code>getHour()</code> 、 <code>getMinute()</code> 、 <code>getSecond()</code>  等方法获取日期时间的年、月、日、时、分、秒等信息：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> year <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> month <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> day <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> hour <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> minute <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> second <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>LocalDateTime</code>  类是 Java 8 中的日期时间类，表示日期和时间，不带时区信息。下面是 <code>LocalDateTime</code>  类中常用的一些方法：</p><ol><li><code>now()</code> ：获取当前日期时间。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="2"><li><code>of()</code> ：根据指定的年、月、日、时、分、秒、毫秒等参数创建一个 <code>LocalDateTime</code>  实例。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">2022</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="3"><li><code>plusXxx()</code> ：在当前 <code>LocalDateTime</code>  的基础上增加指定的时间量，其中 Xxx 可以是 <code>Years、Months、Weeks、Days、Hours、Minutes、Seconds</code>  等。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDateTime</span> plusOneDay <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="4"><li><code>minusXxx()</code> ：在当前 <code>LocalDateTime</code>  的基础上减少指定的时间量，其中 Xxx 可以是 <code>Years、Months、Weeks、Days、Hours、Minutes、Seconds</code>  等。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDateTime</span> minusOneHour <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">minusHours</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="5"><li><code>getXxx()</code> ：获取 <code>LocalDateTime</code>  的指定部分，其中 Xxx 可以是 <code>Year、Month、DayOfMonth、DayOfWeek、DayOfYear、Hour、Minute、Second、NanoOfSecond</code>  等。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">int</span> year <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Month</span> month <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">int</span> dayOfMonth <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">DayOfWeek</span> dayOfWeek <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getDayOfWeek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token keyword">int</span> hour <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getHour</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">int</span> minute <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getMinute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">int</span> second <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token keyword">int</span> nano <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="6"><li><code>withXxx()</code> ：设置 <code>LocalDateTime</code>  的指定部分，其中 Xxx 可以是 <code>Year、Month、DayOfMonth、DayOfWeek、DayOfYear、Hour、Minute、Second、NanoOfSecond</code>  等。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDateTime</span> withYear2023 <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="7"><li><code>isXxx()</code> ：判断 <code>LocalDateTime</code>  的指定部分是否满足某个条件，其中 Xxx 可以是 <code>LeapYear、After、Before</code>  等。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">boolean</span> isLeapYear <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isLeapYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="8"><li><code>toXxx()</code> ：将 <code>LocalDateTime</code>  转换为其他日期时间类，其中 Xxx 可以是 <code>LocalDate</code> 、 <code>LocalTime</code> 、 <code>Instant</code>  等。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">LocalTime</span> time <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">toLocalTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> dateTime<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>这些是 <code>LocalDateTime</code>  类中比较常用的方法，可以方便地对日期时间进行操作和计算。</p><h3 id="instant"><a class="anchor" href="#instant">#</a> Instant</h3><p>Java 的 <code>Instant</code>  类是用来表示时刻的类，可以精确到纳秒级别。它是不可变的，线程安全的。 <code>Instant</code>  类是在 Java 8 中引入的，它提供了与时区无关的机制来处理日期和时间。</p><p><code>Instant</code>  类的实例可以从时钟获取当前时间，也可以从另一个 <code>Instant</code>  实例中创建，或者通过解析表示 ISO-8601 格式的字符串来创建。 <code>Instant</code>  类的 API 提供了许多方法来操作 <code>Instant</code>  实例，以下是一些常用方法：</p><ol><li><code>now()</code> ：获取当前时间戳的 <code>Instant</code>  实例。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Instant</span> now <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="2"><li><code>ofEpochSecond()</code> ：根据秒数创建 <code>Instant</code>  实例。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochSecond</span><span class="token punctuation">(</span><span class="token number">1614305156</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="3"><li><code>ofEpochMilli()</code> ：根据毫秒数创建 <code>Instant</code>  实例。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span><span class="token number">1614305156000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="4"><li><code>getEpochSecond()</code> ：获取秒数。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">long</span> epochSecond <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">getEpochSecond</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="5"><li><code>getNano()</code> ：获取纳秒数。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> nano <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">getNano</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="6"><li><code>plusSeconds()</code> ：添加指定的秒数。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Instant</span> newInstant <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">plusSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="7"><li><code>minusSeconds()</code> ：减去指定的秒数。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Instant</span> newInstant <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">minusSeconds</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="8"><li><code>isAfter()</code> ：判断是否在指定的 Instant 实例之后。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">boolean</span> isAfter <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span>anotherInstant<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="9"><li><code>isBefore()</code> ：判断是否在指定的 <code>Instant</code>  实例之前。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">boolean</span> isBefore <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span>anotherInstant<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="10"><li><code>toString()</code> ：将 <code>Instant</code>  实例转换为字符串。</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>总之， <code>Instant</code>  类提供了一种简单而灵活的方式来处理日期和时间，它适用于需要精确处理时间戳的应用程序。</p><h3 id="timestamp"><a class="anchor" href="#timestamp">#</a> Timestamp</h3><p>Java 中的 <code>Timestamp</code>  类是用于处理数据库中日期时间类型的类，继承自 <code>java.util.Date</code>  类，但是它的精度要高于 <code>Date</code>  类，可以精确到纳秒级别。 <code>Timestamp</code>  类在 <code>JDBC</code>  程序中很常用，它可以表示精确到秒的时间戳。</p><p><code>Timestamp</code>  类的构造方法有以下几种：</p><ol><li><code>Timestamp(long time)</code> ：根据指定的时间创建一个 <code>Timestamp</code>  对象。</li><li><code>Timestamp(String s)</code> ：根据字符串表示的时间创建一个 <code>Timestamp</code>  对象。</li><li><code>Timestamp(int year, int month, int date, int hour, int minute, int second, int nano)</code> ：根据指定的年、月、日、时、分、秒和纳秒数创建一个 <code>Timestamp</code>  对象。</li></ol><p><code>Timestamp</code>  类中的常用方法包括：</p><ol><li><code>getTime()</code> ：返回以毫秒表示的 <code>Timestamp</code>  值。</li><li><code>valueOf(String s)</code> ：将指定的字符串转换为 <code>Timestamp</code>  类型。</li><li><code>valueOf(LocalDateTime dateTime)</code> ：将指定的 <code>LocalDateTime</code>  转换为 <code>Timestamp</code>  类型。</li><li><code>toLocalDateTime()</code> ：将 <code>Timestamp</code>  对象转换为 <code>LocalDateTime</code>  对象。</li><li><code>compareTo(Timestamp ts)</code> ：比较两个 <code>Timestamp</code>  对象的大小。</li><li><code>equals(Object ts)</code> ：判断当前 <code>Timestamp</code>  对象是否与指定对象相等。</li><li><code>toString()</code> ：将 <code>Timestamp</code>  对象转换为字符串表示。</li><li><code>setNanos(int n)</code> ：设置 <code>Timestamp</code>  对象的纳秒数。</li><li><code>setYear(int year)</code> ：设置 <code>Timestamp</code>  对象的年份。</li><li><code>setMonth(int month)</code> ：设置 <code>Timestamp</code>  对象的月份。</li><li><code>setDate(int date)</code> ：设置 <code>Timestamp</code>  对象的日期。</li><li><code>setHours(int hours)</code> ：设置 <code>Timestamp</code>  对象的小时。</li><li><code>setMinutes(int minutes)</code> ：设置 <code>Timestamp</code>  对象的分钟。</li><li><code>setSeconds(int seconds)</code> ：设置 <code>Timestamp</code>  对象的秒数。</li></ol><p>总之， <code>Timestamp</code>  类是 Java 中处理时间戳的一个重要类，它可以很方便地将时间戳转换为日期时间类型，或者将日期时间类型转换为时间戳。在开发中，我们通常会使用 <code>Timestamp</code>  来操作数据库中的时间类型数据。</p><h3 id="locale"><a class="anchor" href="#locale">#</a> Locale</h3><p>Java 中的 <code>Locale</code>  类表示了特定地理、政治或文化区域的信息，比如国家、语言、货币等。通过 <code>Locale</code>  类，Java 程序可以获取与地区相关的信息，例如日期和时间格式、货币符号、语言环境等。 <code>Locale</code>  类的实例表示一个特定的地理、政治或文化区域，由语言代码和国家（或地区）代码组成，例如 “en_US” 表示美国英语环境。</p><p><code>Locale</code>  类提供了多个构造函数和静态方法，用于创建和获取特定的地理、政治或文化区域。常用的构造函数和方法包括：</p><ol><li><code>Locale(String language) </code> 通过指定的语言代码创建一个 <code>Locale</code>  实例，国家代码默认为 &quot;&quot;。</li><li><code>Locale(String language, String country)</code>  通过指定的语言代码和国家代码创建一个 <code>Locale</code>  实例。</li><li><code>Locale(String language, String country, String variant)</code>  通过指定的语言代码、国家代码和变量创建一个 <code>Locale</code>  实例。</li><li><code>Locale.getDefault() </code> 获取当前默认的 <code>Locale</code>  实例。</li><li><code>Locale.getAvailableLocales()</code>  获取所有可用的 <code>Locale</code>  实例。</li><li><code>getCountry()</code>  获取 <code>Locale</code>  实例的国家代码。</li><li><code>getLanguage() </code> 获取 <code>Locale</code>  实例的语言代码。</li><li><code>getDisplayName() </code> 获取 <code>Locale</code>  实例的显示名称。</li><li><code>getDisplayName(Locale inLocale) </code> 获取在指定 Locale 环境下的 <code>Locale</code>  实例的显示名称。</li></ol><p><code>Locale</code>  类的应用场景包括但不限于以下几种：</p><ol><li>本地化日期、时间、货币等格式</li><li>国际化应用程序的开发</li><li>区域性数据的处理</li><li>多语言文本的翻译和处理</li></ol><h3 id="zone相关的类"><a class="anchor" href="#zone相关的类">#</a> Zone 相关的类</h3><p>在 Java 中，关于时区的相关操作主要是通过  <code>java.time.Zone</code>  相关的类来完成的。</p><p>首先， <code>ZoneId</code>  类表示了一个时区标识符，可以使用  <code>ZoneId.of()</code>  方法来获取。比如，以下代码可以获取表示 &quot;Asia/Shanghai&quot; 时区的  <code>ZoneId</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">ZoneId</span> zoneId <span class="token operator">=</span> <span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>ZoneOffset</code>  类表示了一个以秒为单位的时间偏移量，可以使用  <code>ZoneOffset.ofTotalSeconds()</code>  方法来获取。比如，以下代码可以获取表示东八区的  <code>ZoneOffset</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">ZoneOffset</span> offset <span class="token operator">=</span> <span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token function">ofTotalSeconds</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3600</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p><code>ZonedDateTime</code>  类表示了一个带时区的日期和时间。可以使用  <code>ZonedDateTime.of()</code>  方法来创建一个  <code>ZonedDateTime</code>  对象。比如，以下代码可以创建表示当前时间在东八区的  <code>ZonedDateTime</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> <span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>另外，Java 还提供了一些方便的方法来进行时区转换。比如， <code>LocalDateTime</code>  可以使用  <code>atZone()</code>  方法将其转换为  <code>ZonedDateTime</code> ，然后使用  <code>withZoneSameInstant()</code>  方法将其转换为另一个时区的  <code>ZonedDateTime</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">ZonedDateTime</span> shanghaiTime <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">ZonedDateTime</span> newYorkTime <span class="token operator">=</span> shanghaiTime<span class="token punctuation">.</span><span class="token function">withZoneSameInstant</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"America/New_York"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>类似的， <code>Instant</code>  可以使用  <code>atZone()</code>  方法将其转换为  <code>ZonedDateTime</code> ，然后使用  <code>toInstant()</code>  方法将其转换为  <code>Instant</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">ZonedDateTime</span> zonedDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Asia/Shanghai"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Instant</span> newYorkTime <span class="token operator">=</span> zonedDateTime<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>最后，需要注意的是，在处理时区相关的操作时，一定要注意时间的格式化和解析。比如，在使用  <code>SimpleDateFormat</code>  进行时间格式化时，应该使用带时区的格式化器来避免时区转换时的问题。</p><h3 id="日期格式化"><a class="anchor" href="#日期格式化">#</a> 日期格式化</h3><p>在 Java 中，可以使用格式化来将日期对象格式化为字符串。Java 提供了两种格式化方式：</p><ol><li>使用 <code>java.text.SimpleDateFormat</code>  类，该类可以根据指定的格式将日期格式化为字符串。</li></ol><p>例如，下面的代码将 <code>Date</code>  对象格式化为字符串：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">SimpleDateFormat</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateFormatExample</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">Date</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">String</span> strDate <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strDate<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>2022<span class="token punctuation">-</span>08<span class="token punctuation">-</span>22 16<span class="token punctuation">:</span><span class="token datetime number">32:11</span></pre></td></tr></table></figure><ol><li>使用 <code>java.time.format.DateTimeFormatter</code>  类，该类是 Java 8 新引入的日期时间格式化类，使用方式类似于 <code>SimpleDateFormat</code> 。</li></ol><p>例如，下面的代码将 <code>LocalDateTime</code>  对象格式化为字符串：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDateTime</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span>format<span class="token punctuation">.</span></span><span class="token class-name">DateTimeFormatter</span></span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DateTimeFormatterExample</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token class-name">LocalDateTime</span> now <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token class-name">String</span> strDate <span class="token operator">=</span> now<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>formatter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strDate<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight yaml"><figcaption data-lang="YAML"></figcaption><table><tr><td data-num="1"></td><td><pre>2022<span class="token punctuation">-</span>08<span class="token punctuation">-</span>22 16<span class="token punctuation">:</span><span class="token datetime number">32:11</span></pre></td></tr></table></figure><p>需要注意的是，在使用 <code>DateTimeFormatter</code>  格式化 <code>java.time</code>  包中的日期时间类时，要使用对应的格式化模式，例如年份用大写的 <code>yyyy</code>  表示，月份用小写的 <code>mm</code>  表示等。</p><p>另外，如果需要将字符串转换为日期对象，可以使用 <code>SimpleDateFormat</code>  或 <code>DateTimeFormatter</code>  中的 <code>parse</code>  方法，例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> strDate <span class="token operator">=</span> <span class="token string">"2022-08-22 16:32:11"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">SimpleDateFormat</span> dateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">Date</span> date <span class="token operator">=</span> dateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strDate<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>或者</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> strDate <span class="token operator">=</span> <span class="token string">"2022-08-22 16:32:11"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">DateTimeFormatter</span> formatter <span class="token operator">=</span> <span class="token class-name">DateTimeFormatter</span><span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">LocalDateTime</span> dateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>strDate<span class="token punctuation">,</span> formatter<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>需要注意的是，在使用 <code>SimpleDateFormat</code>  解析日期字符串时，要使用与格式化模式相同的模式进行解析。而使用 <code>DateTimeFormatter</code>  时，可以根据需要指定格式化模式。</p><h3 id="日期类的相互转化"><a class="anchor" href="#日期类的相互转化">#</a> 日期类的相互转化</h3><p>​在 Java 中，我们可以使用各种日期类进行日期的操作。这些日期类包括  <code>java.util.Date</code> 、 <code>java.sql.Date</code> 、 <code>java.util.Calendar</code> 、 <code>java.time.LocalDate</code> 、 <code>java.time.LocalDateTime</code> 、 <code>java.time.Instant</code>  等。为了进行不同日期类之间的相互转化，Java 提供了一些方法。</p><p>下面是一些常见的日期类之间的转化方法：</p><ol><li><p><code>java.util.Date</code>  和  <code>java.sql.Date</code>  的转化</p><ul><li><p>将  <code>java.util.Date</code>  转换成  <code>java.sql.Date</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> sqlDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li><li><p>将  <code>java.sql.Date</code>  转换成  <code>java.util.Date</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span> sqlDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span>sqlDate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li></ul></li><li><p><code>java.util.Date</code>  和  <code>java.time.LocalDateTime</code>  的转化</p><ul><li><p>将  <code>java.util.Date</code>  转换成  <code>java.time.LocalDateTime</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> instant<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li><li><p>将  <code>java.time.LocalDateTime</code>  转换成  <code>java.util.Date</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li></ul></li><li><p><code>java.util.Calendar</code>  和  <code>java.time.LocalDateTime</code>  的转化</p><ul><li><p>将  <code>java.util.Calendar</code>  转换成  <code>java.time.LocalDateTime</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">ofInstant</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> calendar<span class="token punctuation">.</span><span class="token function">getTimeZone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toZoneId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li><li><p>将  <code>java.time.LocalDateTime</code>  转换成  <code>java.util.Calendar</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDateTime</span> localDateTime <span class="token operator">=</span> <span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>calendar<span class="token punctuation">.</span><span class="token function">setTimeInMillis</span><span class="token punctuation">(</span>localDateTime<span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toEpochMilli</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li></ul></li><li><p><code>java.util.Date</code>  和  <code>java.time.Instant</code>  的转化</p><ul><li><p>将  <code>java.util.Date</code>  转换成  <code>java.time.Instant</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li><li><p>将  <code>java.time.Instant</code>  转换成  <code>java.util.Date</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li></ul></li><li><p><code>java.util.Date</code>  和  <code>java.time.LocalDate</code>  的转化</p><ul><li><p>将  <code>java.util.Date</code>  转换成  <code>java.time.LocalDate</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocalDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li><li><p>将  <code>java.time.LocalDate</code>  转换成  <code>java.util.Date</code> ：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">LocalDate</span> localDate <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Instant</span> instant <span class="token operator">=</span> localDate<span class="token punctuation">.</span><span class="token function">atStartOfDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">atZone</span><span class="token punctuation">(</span><span class="token class-name">ZoneId</span><span class="token punctuation">.</span><span class="token function">systemDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span> date <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Date</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>instant<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure></li></ul></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基本数据类型</title>
      <link href="/computer-science/java/javase/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/computer-science/java/javase/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="java八大基本数据类型"><a class="anchor" href="#java八大基本数据类型">#</a> Java 八大基本数据类型</h2><table><thead><tr><th>数据类型</th><th>大小</th><th>默认值</th><th>取值范围</th><th>描述</th></tr></thead><tbody><tr><td>byte</td><td>1 字节</td><td>0</td><td>-128 到 127</td><td>有符号整数</td></tr><tr><td>short</td><td>2 字节</td><td>0</td><td>-32,768 到 32,767</td><td>有符号整数</td></tr><tr><td>int</td><td>4 字节</td><td>0</td><td>-2,147,483,648 到 2,147,483,647</td><td>有符号整数</td></tr><tr><td>long</td><td>8 字节</td><td>0L</td><td>-9,223,372,036,854,775,808 到 9,223,372,036,854,775,807</td><td>有符号整数</td></tr><tr><td>float</td><td>4 字节</td><td>0.0f</td><td>1.4E-45 到 3.4028235E38</td><td>浮点数</td></tr><tr><td>double</td><td>8 字节</td><td>0.0d</td><td>4.9E-324 到 1.7976931348623157E308</td><td>双精度浮点数</td></tr><tr><td>char</td><td>2 字节</td><td>'\u0000'</td><td>'\u0000' 到 '\uffff' (0 到 65,535)</td><td>Unicode 字符</td></tr><tr><td>boolean</td><td>没有固定大小</td><td>false</td><td>true 或 false</td><td>true 或 false 值</td></tr></tbody></table><h3 id="java基本数据类型对应的包装类"><a class="anchor" href="#java基本数据类型对应的包装类">#</a> Java 基本数据类型对应的包装类</h3><table><thead><tr><th>数据类型</th><th>对应包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><h3 id="包装类常用方法和特别设计"><a class="anchor" href="#包装类常用方法和特别设计">#</a> 包装类常用方法和特别设计</h3><ul><li><code>Byte</code><ul><li>常用方法：valueOf (byte b)、byteValue ()、compareTo (Byte anotherByte)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：缓存了 - 128~127 之间的所有 Byte 对象，可以使用 Byte.valueOf (byte b) 方法直接返回缓存的对象，避免重复创建对象</li></ul></li><li><code>Short</code><ul><li>常用方法：valueOf (short s)、shortValue ()、compareTo (Short anotherShort)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：缓存了 - 128~127 之间的所有 Short 对象，可以使用 Short.valueOf (short s) 方法直接返回缓存的对象，避免重复创建对象</li></ul></li><li><code>Integer</code><ul><li>常用方法：valueOf (int i)、intValue ()、compareTo (Integer anotherInteger)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：缓存了 - 128~127 之间的所有 Integer 对象，可以使用 Integer.valueOf (int i) 方法直接返回缓存的对象，避免重复创建对象</li></ul></li><li><code>Long</code><ul><li>常用方法：valueOf (long l)、longValue ()、compareTo (Long anotherLong)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：缓存了 - 128~127 之间的所有 Long 对象，可以使用 Long.valueOf (long l) 方法直接返回缓存的对象，避免重复创建对象</li></ul></li><li><code>Float</code><ul><li>常用方法：valueOf (float f)、floatValue ()、compareTo (Float anotherFloat)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：没有特别设计</li></ul></li><li><code>Double</code><ul><li>常用方法：valueOf (double d)、doubleValue ()、compareTo (Double anotherDouble)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：没有特别设计</li></ul></li><li><code>Character</code><ul><li>常用方法：valueOf (char c)、charValue ()、compareTo (Character anotherCharacter)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：缓存了 0~127 之间的所有 Character 对象，可以使用 Character.valueOf (char c) 方法直接返回缓存的对象，避免重复创建对象</li></ul></li><li><code>Boolean</code><ul><li>常用方法：valueOf (boolean b)、booleanValue ()、compareTo (Boolean anotherBoolean)、equals (Object obj)、toString ()、hashCode ()</li><li>特别设计：缓存了 Boolean 类型的 TRUE 和 FALSE 两个对象</li></ul></li></ul><p>​当 Java 自动装箱时，会重用对象，将一些常见的包装类对象缓存起来以提高性能和降低内存占用。下面是几个常用的包装类缓存示例：</p><h3 id="包装类缓存示例"><a class="anchor" href="#包装类缓存示例">#</a> 包装类缓存示例</h3><ol><li><strong>Integer 类的缓存示例：</strong></li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Integer</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> </pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Integer</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，因为 10 在缓存范围内</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Integer</span> c <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Integer</span> d <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false，因为 128 不在缓存范围内</span></pre></td></tr></table></figure><p>​<strong>解释</strong>：在 Integer 类中，缓存了 -128 到 127 的 Integer 对象。因此，当值为在这个范围内时，自动装箱后的对象会直接从缓存中获取，而不是新建一个对象。因此，a 和 b 的值都是 10，因为它们共享了同一个对象，所以比较时结果为 true。而 c 和 d 的值都是 128，但由于它们不在缓存范围内，所以自动装箱后会新建两个对象，所以比较时结果为 false。</p><ol><li><strong>Boolean 类的缓存示例：</strong></li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Boolean</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，因为 true 和 false 都有缓存</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Boolean</span> c <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Boolean</span> d <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，因为 true 和 false 都有缓存</span></pre></td></tr></table></figure><p>​<strong>解释</strong>：在 Boolean 类中，缓存了 true 和 false 两个对象。因此，当自动装箱时，这两个对象会直接从缓存中获取，而不是新建对象。因此，a 和 b 都是 true，且共享了同一个对象，所以比较时结果为 true。而 c 和 d 都是 false，且共享了同一个对象，所以比较时结果为 true。</p><ol><li><strong>Character 类的缓存示例：</strong></li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Character</span> a <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Character</span> b <span class="token operator">=</span> <span class="token char">'a'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//true，因为 a 在缓存范围内</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token class-name">Character</span> c <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token class-name">Character</span> d <span class="token operator">=</span> <span class="token char">'中'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c <span class="token operator">==</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//false，因为 ' 中 ' 不在缓存范围内</span></pre></td></tr></table></figure><p>​<strong>解释</strong>：在 Character 类中，缓存了 Unicode 编码从 0 到 127 的字符。因此，当自动装箱时，这些字符会直接从缓存中获取，而不是新建对象。因此，a 和 b 的值都是 'a'，且共享了同一个对象，所以比较时结果为 true。而 c 和 d 的值都是 ' 中 '，但由于它们不在缓存范围内，所以自动装箱后会新建两个对象，所以比较时结果为 false。</p><p>​需要注意的是，虽然自动装箱时会重用对象，但如果使用构造函数手动创建对象，则不会使用缓存，每次都会新建一个对象。</p><h3 id="包装类对象的相互转化"><a class="anchor" href="#包装类对象的相互转化">#</a> 包装类对象的相互转化</h3><p>​当我们需要在基本数据类型和包装类之间进行转换时，可以使用 Java 中提供的自动装箱和自动拆箱机制，也可以手动调用包装类提供的转换方法。以下是一些常见的基本数据类型和包装类之间的转换示例：</p><ol><li>基本数据类型转换成对应的包装类：</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Integer</span> numWrapper <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="2"><li>包装类转换成对应的基本数据类型：</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Double</span> doubleWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token keyword">double</span> num <span class="token operator">=</span> doubleWrapper<span class="token punctuation">.</span><span class="token function">doubleValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="3"><li>使用自动装箱和自动拆箱：</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Integer</span> numWrapper <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment">// 自动装箱</span></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">int</span> newNum <span class="token operator">=</span> numWrapper<span class="token punctuation">;</span>   <span class="token comment">// 自动拆箱</span></pre></td></tr></table></figure><ol start="4"><li>字符串转换成包装类：</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Integer</span> numWrapper <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol start="5"><li>包装类转换成字符串：</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">Integer</span> numWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> numWrapper<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><p>​需要注意的是，在进行基本数据类型和字符串之间的转换时，也可以使用  <code>parseInt()</code>  和  <code>valueOf()</code>  等方法。例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr></table></figure><h3 id="自动装箱和自动拆箱"><a class="anchor" href="#自动装箱和自动拆箱">#</a> 自动装箱和自动拆箱</h3><p>​在 Java 中，自动装箱和自动拆箱是指基本数据类型与其对应的包装类之间的自动转换，使得它们在使用上可以互相替换，从而使代码更加简洁和易读。</p><p>​具体来说，自动装箱是指将基本数据类型自动转换为对应的包装类，而自动拆箱则是指将包装类自动转换为对应的基本数据类型。这样一来，程序员在使用时就无需手动进行类型转换，编译器会自动帮助完成。</p><p>​下面是自动装箱和自动拆箱的示例代码：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment">// 自动装箱</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于 Integer i = Integer.valueOf (10);</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token comment">// 自动拆箱</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 相当于 int j = i.intValue ();</span></pre></td></tr></table></figure><p>​从上面的示例代码可以看出，自动装箱和自动拆箱让代码更加简洁，减少了程序员的工作量，提高了代码的可读性和可维护性。</p><p>​其原理是编译器自动在编译时将代码进行转换。对于自动装箱，编译器会将基本数据类型转换为对应的包装类类型，调用相应的 valueOf 方法进行装箱；对于自动拆箱，编译器会将包装类类型转换为对应的基本数据类型，调用相应的 xxxValue 方法进行拆箱。这样一来，程序员就可以像操作基本数据类型一样操作包装类类型了。</p><p>​需要注意的是，自动装箱和自动拆箱虽然方便了编程，但是也会带来性能问题。在大量使用时，建议手动进行类型转换，以提高程序性能。</p><h3 id="其他注意项"><a class="anchor" href="#其他注意项">#</a> 其他注意项</h3><ol><li><strong>类型转换</strong>：Java 中的数据类型有不同的大小和精度，如果将一个大的数据类型转换为一个小的数据类型，会导致数据精度的丢失，这就需要进行类型转换。类型转换可以分为隐式类型转换和显式类型转换两种。</li><li><strong>final 关键字</strong>：final 关键字可以用来修饰变量、方法和类。final 修饰的变量不能被修改，final 修饰的方法不能被覆盖，final 修饰的类不能被继承。对于基本数据类型，final 修饰的变量必须被初始化，一旦被初始化后就不能再次被修改。</li><li><strong>枚举类型</strong>：Java 中的枚举类型可以列出一组常量，并为这些常量赋予特定的值。枚举类型可以用来取代常量，使代码更加可读和易于维护。枚举类型也是一种特殊的类，可以有构造函数、方法和字段。</li><li><strong>变量作用域</strong>：在 Java 中，变量有不同的作用域，变量的作用域决定了变量在程序中可以被访问的范围。Java 中有四种作用域：类作用域、方法作用域、块作用域和局部作用域。</li><li><strong>常量池</strong>：Java 中的常量池是指在编译时确定的、存储在.class 文件中的常量集合。常量池中可以包含字符串、数字、类名、方法名等常量。Java 的数据类型也有对应的常量池，例如 Integer 类型的常量池中包含了 - 128~127 之间的整数。常量池可以提高程序的运行效率，减少内存的占用。</li></ol><p><strong>这些内容也是 Java 数据类型中比较重要的一些方面，需要开发者在日常的开发中注意。</strong></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java发展历程</title>
      <link href="/computer-science/java/javase/Java%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/"/>
      <url>/computer-science/java/javase/Java%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么叫java"><a class="anchor" href="#为什么叫java">#</a> 为什么叫 Java？</h3><p>​Java 平台和语言最开始只是 SUN 公司在 1990 年 12 月开始研究的一个内部项目。SUN 公司的一个叫做帕特里克・诺顿的工程师被自己开发的 C 和 C 语言编译器搞得焦头烂额，因为其中的 API 极其难用。帕特里克决定改用 NeXT，同时他也获得了研究公司的一个叫做 “Stealth 计划” 的项目的机会。<br />   “Stealth 计划” 后来改名为 “Green 计划”，JGosling (詹姆斯・高斯林）和麦克・舍林丹也加入了帕特里克的工作小组。他们和其他几个工程师一起在加利福尼亚州门罗帕克市沙丘路的一个小工作室里面研究开发新技术，瞄准下一代智能家电（如微波炉）的程序设计，SUN 公司预料未来科技将在家用电器领域大显身手。团队最初考虑使用 C 语言，但是很多成员包括 SUN 的首席科学家比尔・乔伊，发现 C 和可用的 API 在某些方面存在很大问题。<br />   工作小组使用的是内嵌类型平台，可以用的资源极其有限。很多成员发现 C 太复杂以至很多开发者经常错误使用。他们发现 C 缺少垃圾回收系统，还有可移植的安全性、分布程序设计、和多线程功能。最后，他们想要一种易于移植到各种设备上的平台。<br />   根据可用的资金，比尔・乔伊决定开发一种集 C 语言和 Mesa 语言搭成的新语言，在一份报告上，乔伊把它叫做 “未来”，他提议 SUN 公司的工程师应该在 C 的基础上，开发一种面向对象的环境。最初，高斯林试图修改和扩展 C 的功能，他自己称这种新语言为 C –，但是后来他放弃了。他将要创造出一种全新的语言，被他命名为 “Oak”（橡树），以他的办公室外的树而命名。<br />就像很多开发新技术的秘密的工程一样，工作小组没日没夜地工作到了 1992 年的夏天，他们能够演示新平台的一部分了，包括 Green 操作系统，Oak 的程序设计语言，类库，和其硬件。最初的尝试是面向一种类 PDA 设备，被命名为 Star7，这种设备有鲜艳的图形界面和被称为 “Duke” 的智能代理来帮助用户。1992 年 12 月 3 日，这台设备进行了展示。<br />   同年 11 月，Green 计划被转化成了 “FirstPerson 有限公司”，一个 SUN 公司的全资子公司，团队也被重新安排到了帕洛阿尔托。FirstPerson 团队对建造一种高度互动的设备感兴趣，当时代华纳发布了一个关于电视机顶盒的征求提议书时（Request for proposal），FirstPerson 改变了他们的目标，作为对征求意见书的响应，提出了一个机顶盒平台的提议。但是有线电视业界觉得 FirstPerson 的平台给予用户过多地控制权，因此 FirstPerson 的投标败给了 SGI。与 3DO 公司的另外一笔关于机顶盒的交易也没有成功，由于他们的平台不能在电视工业产生任何效益，公司再并回 SUN 公司。<br />   JAVA 应用 1994 年 6、7 月间，在经历了一场历时三天的头脑风暴的讨论之后，约翰・盖吉、詹姆斯・高斯林、比尔・乔伊、帕特里克・诺顿、韦恩・罗斯因和埃里克・斯库米，团队决定再一次改变了努力的目标，这次他们决定将该技术应用于万维网。他们认为随着 Mosaic 浏览器的到来，因特网正在向同样的高度互动的远景演变，而这一远景正是他们在有线电视网中看到的。作为原型，帕特里克・诺顿写了一个小型万维网浏览器，WebRunner，后来改名为 HotJava。同年，Oak 改名为 Java。商标搜索显示，Oak 已被一家显卡制造商注册，因此团队找到了一个新名字。这个名字是在很多成员常去的本地咖啡馆中杜撰出来的。名字是不是首字母缩写还不清楚，很大程度上来说不是。虽然有人声称是开发人员名字的组合：James Gosling（詹姆斯・高斯林）Arthur Van Hoff（阿瑟・凡・霍夫）Andy Bechtolsheim（安迪・贝克托克姆），或 “Just Another Vague Acronym”（只是另外一个含糊的缩写）。还有一种比较可信的说法是这个名字是出于对咖啡的喜爱，所以以 Java 咖啡来命名。类文件的前四个字节如果用十六进制阅读的话，分别为 CA FE BA BE，就会拼出两个单词 “CAFE BABE”（咖啡宝贝）。<br />   1994 年 10 月，HotJava 和 Java 平台为公司高层进行演示。1994 年，Java 1.0a 版本已经可以提供下载，但是 Java 和 HotJava 浏览器的第一次公开发布却是在 1995 年 5 月 23 日 SunWorld 大会上进行的。SUN 公司的科学指导约翰・盖吉宣告 Java 技术。这个发布是与网景公司的执行副总裁马克・安德森的惊人发布一起进行的，宣布网景将在其浏览器中包含对 Java 的支持。1996 年 1 月，升阳公司成立了 Java 业务集团，专门开发 Java 技术。</p><h3 id="jdk发展历程"><a class="anchor" href="#jdk发展历程">#</a> JDK 发展历程</h3><p>​1996 年 1 月，Sun 公司发布了 Java 的第一个开发工具包（JDK 1.0），这是 Java 发展历程中的重要里程碑，标志着 Java 成为一种独立的开发工具。9 月，约 8.3 万个网页应用了 Java 技术来制作。10 月，Sun 公司发布了 Java 平台的第一个即时（JIT）编译器。</p><p>​1997 年 2 月，JDK 1.1 面世，在随后的 3 周时间里，达到了 22 万次的下载量。4 月 2 日，Java One 会议召开，参会者逾一万人，创当时全球同类会议规模之纪录。9 月，Java Developer Connection 社区成员超过 10 万。</p><p>​1998 年 12 月 8 日，第二代 Java 平台的企业版 J2EE 发布。1999 年 6 月，Sun 公司发布了第二代 Java 平台（简称为 Java2）的 3 个版本：J2ME（Java2 Micro Edition，Java2 平台的微型版），应用于移动、无线及有限资源的环境；J2SE（Java 2 Standard Edition，Java 2 平台的标准版），应用于桌面环境；J2EE（Java 2Enterprise Edition，Java 2 平台的企业版），应用于基于 Java 的应用服务器。Java 2 平台的发布，是 Java 发展过程中最重要的一个里程碑，标志着 Java 的应用开始普及。</p><p>​1999 年 4 月 27 日，HotSpot 虚拟机发布。HotSpot 虚拟机发布时是作为 JDK 1.2 的附加程序提供的，后来它成为了 JDK 1.3 及之后所有版本的 Sun JDK 的默认虚拟机  。</p><p>​2000 年 5 月，JDK1.3、JDK1.4 和 J2SE1.3 相继发布，几周后其获得了苹果公司 Mac OS X 的工业标准的支持。2001 年 9 月 24 日，J2EE1.3 发布。2002 年 2 月 26 日，J2SE1.4 发布。自此 Java 的计算能力有了大幅提升，与 J2SE1.3 相比，其多了近 62% 的类和接口。在这些新特性当中，还提供了广泛的 XML 支持、安全套接字（Socket）支持（通过 SSL 与 TLS 协议）、全新的 I/OAPI、正则表达式、日志与断言。2004 年 9 月 30 日，J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE 1.5 更名为 Java SE 5.0（内部版本号 1.5.0），代号为 “Tiger”，Tiger 包含了从 1996 年发布 1.0 版本以来的最重大的更新，其中包括泛型支持、基本类型的自动装箱、改进的循环、枚举类型、格式化 I/O 及可变参数。</p><p>​2005 年 6 月，在 Java One 大会上，Sun 公司发布了 Java SE 6。此时，Java 的各种版本已经更名，已取消其中的数字 2，如 J2EE 更名为 JavaEE，J2SE 更名为 JavaSE，J2ME 更名为 JavaME。</p><p>​2006 年 11 月 13 日，Java 技术的发明者 Sun 公司宣布，将 Java 技术作为免费软件对外发布。Sun 公司正式发布的有关 Java 平台标准版的第一批源代码，以及 Java 迷你版的可执行源代码。从 2007 年 3 月起，全世界所有的开发人员均可对 Java 源代码进行修改 。</p><p>​2009 年，甲骨文公司宣布收购 Sun   。2010 年，Java 编程语言的共同创始人之一詹姆斯・高斯林从 Oracle 公司辞职。2011 年，甲骨文公司举行了全球性的活动，以庆祝 Java7 的推出，随后 Java7 正式发布。</p><p>​2014 年，甲骨文公司发布了 Java8 正式版</p><p>​2017 年，甲骨文公司发布了 Java9 正式版</p><h3 id="java发展史上发生的大事件具体概括如下表"><a class="anchor" href="#java发展史上发生的大事件具体概括如下表">#</a> Java 发展史上发生的大事件具体概括如下表</h3><p>各版本 JDK 引入的主要新特性<br /> JDK Version 1.0<br /> 开发代号为 Oak（橡树），于 1996-01-23 发行。</p><table><thead><tr><th>时间</th><th>事件</th></tr></thead><tbody><tr><td>1996 年 1 月</td><td>第一个 JDK-JDK1.0 诞生；</td></tr><tr><td>1996 年 4 月</td><td>10 个最主要的操作系统供应商申明将在其产品中嵌入 Java 技术；</td></tr><tr><td>1996 年 9 月</td><td>约 8.3 万个网页应用了 Java 技术来制作</td></tr><tr><td>1997 年 2 月 18 日</td><td>JDK1.1 发布</td></tr><tr><td>1997 年 4 月 2 日</td><td>JavaOne 会议召开，参与者逾一万人，创当时全球同类会议纪录</td></tr><tr><td>1997 年 9 月</td><td>JavaDeveloperConnection 社区成员超过十万</td></tr><tr><td>1998 年 2 月</td><td>JDK1.1 被下载超过 2,000,000 次</td></tr><tr><td>1998 年 12 月 8 日</td><td>Java 2 企业平台 J2EE 发布 (J2EE1.2)</td></tr><tr><td>1999 年 6 月</td><td>SUN 公司发布 Java 三个版本：标准版（J2SE）、企业版（J2EE）和微型版（J2ME）</td></tr><tr><td>2000 年 5 月 8 日</td><td>JDK1.3 发布</td></tr><tr><td>2000 年 5 月 29 日</td><td>JDK1.4 发布</td></tr><tr><td>2001 年 6 月 5 日</td><td>Nokia 宣布到 2003 年将出售 1 亿部支持 Java 的手机</td></tr><tr><td>2001 年 9 月 24 日</td><td>J2EE1.3 发布</td></tr><tr><td>2002 年 2 月 26 日</td><td>J2SE1.4 发布，此后 Java 的计算能力有了大幅提升</td></tr><tr><td>2004 年 9 月 30 日</td><td>J2SE1.5 发布，成为 Java 语言发展史上的又一里程碑。为了表示该版本的重要性，J2SE1.5 更名为 Java SE 5.0；</td></tr><tr><td>2005 年 6 月</td><td>JavaOne 大会召开，SUN 公司公开 Java SE 6。此时，Java 的各种版本已经更名，以取消其中的数字 “2”： J2ME 更名为 Java ME， J2SE 更名为 Java SE，J2EE 更名为 Java EE</td></tr><tr><td>2006 年 12 月</td><td>SUN 公司发布 JRE6.0</td></tr><tr><td>2009 年 12 月</td><td>SUN 公司发布 Java EE 6</td></tr><tr><td>2010 年 11 月</td><td>由于甲骨文对 Java 社区的不友善，因此 Apache 扬言将退出 JCP</td></tr><tr><td>2011 年 7 月</td><td>甲骨文发布 Java SE 7</td></tr><tr><td>2014 年 3 月</td><td>甲骨文发表 Java SE 8</td></tr><tr><td>2017 年 9 月</td><td>甲骨文发表 Java SE 9</td></tr><tr><td>2018 年 3 月</td><td>甲骨文发布 Java SE 10</td></tr></tbody></table><h3 id="j2se-version-12"><a class="anchor" href="#j2se-version-12">#</a> J2SE Version 1.2</h3><p>开发代号为 Playground（操场），于 1998-12-08 发行。<br />引入的新特性包括：</p><ul><li>引入集合（Collection）框架；</li><li>对字符串常量做内存映射；</li><li>引入 JIT（Just In Time）编译器；</li><li>引入对打包的 Java 文件进行数字签名；</li><li>引入控制授权访问系统资源的策略工具；</li><li>引入 JFC（Java Foundation Classes），包括 Swing 1.0、拖放和 Java 2D 类库；</li><li>引入 Java 插件；</li><li>在 JDBC 中引入可滚动结果集、BLOB、CLOB、批量更新和用户自定义类型；</li><li>在 Applet 中添加声音支持。</li></ul><h3 id="j2se-version-13"><a class="anchor" href="#j2se-version-13">#</a> J2SE Version 1.3</h3><p>开发代号为 Kestrel（红隼），于 2000-05-08 发行。<br />引入的新特性包括：</p><ul><li>引入 Java Sound API；</li><li>jar 文件索引；</li><li>对 Java 的各个方面都做了大量优化和增强。</li></ul><h3 id="j2se-version-14"><a class="anchor" href="#j2se-version-14">#</a> J2SE Version 1.4</h3><p>开发代号为 Merlin（隼），于 2004-02-06 发行（首次在 JCP 下发行）。<br />引入的新特性包括:</p><ul><li>XML 处理；</li><li>Java 打印服务；</li><li>引入 Logging API；<br />引入 Java Web Start；</li><li>引入 JDBC 3.0 API；</li><li>引入断言；</li><li>引入 Preferences API；</li><li>引入链式异常处理；</li><li>支持 IPv6；</li><li>支持正则表达式；</li><li>引入 Image I/O slot machine API。</li></ul><h3 id="java-version-se-50"><a class="anchor" href="#java-version-se-50">#</a> Java Version SE 5.0</h3><p>开发代号为 Tiger（老虎），于 2004-09-30 发行。<br />引入的新特性包括:</p><ul><li>引入泛型；</li><li>增强循环，可以使用迭代方式；</li><li>自动装箱与自动拆箱；</li><li>类型安全的枚举；</li><li>可变参数；</li><li>静态引入；</li><li>元数据（注解）；</li><li>引入 Instrumentation。</li></ul><h3 id="java-version-se-6"><a class="anchor" href="#java-version-se-6">#</a> Java Version SE 6</h3><p>开发代号为 Mustang（野马），于 2006-12-11 发行。<br />引入的新特性包括：</p><ul><li>支持脚本语言；</li><li>引入 JDBC 4.0 API；</li><li>引入 Java Compiler API；</li><li>可插拔注解；</li><li>增加对 Native PKI (Public Key Infrastructure)、Java GSS (Generic Security Service)、Kerberos 和 LDAP (Lightweight Directory Access Protocol) 的支持；</li><li>继承 Web Services；做了很多优化。</li></ul><h3 id="java-version-se-7"><a class="anchor" href="#java-version-se-7">#</a> Java Version SE 7</h3><p>开发代号是 Dolphin（海豚），于 2011-07-28 发行。<br />引入的新特性包括：</p><ul><li>switch 语句块中允许以字符串作为分支条件；</li><li>在创建泛型对象时应用类型推断；</li><li>在一个语句块中捕获多种异常；</li><li>支持动态语言；</li><li>支持 try-with-resources；</li><li>引入 Java NIO.2 开发包；</li><li>数值类型可以用 2 进制字符串表示，并且可以在字符串表示中添加下划线；</li><li>钻石型语法；</li><li>null 值的自动处理。</li></ul><h3 id="java-version-se-8"><a class="anchor" href="#java-version-se-8">#</a> Java Version SE 8</h3><p>开发代号是 Spider（蜘蛛），于 2014-03-18 发行。</p><ul><li>支持 lambda 支持；</li><li>增强日期与时间 API 的功能；</li><li>对垃圾回收的性能也进行了改进；</li><li>并且移除了 permgen 区。</li><li>Lambdas 表达式与 Functional 接口。</li><li>接口的默认与静态方法。</li><li>方法引用。</li><li>重复注解。</li><li>更好的类型推测机制。</li><li>扩展注解的支持。</li></ul><h3 id="java-version-se-90"><a class="anchor" href="#java-version-se-90">#</a> Java Version SE 9.0</h3><ul><li>Java 平台级模块系统。</li><li>Linking。</li><li>JShell : 交互式 Java REPL。</li><li>改进的 Javadoc。</li><li>集合工厂方法。</li><li>改进的 Stream API。</li><li>私有接口方法。</li><li>HTTP/2。</li><li>多版本兼容 JAR。</li></ul><h3 id="java-version-se-100"><a class="anchor" href="#java-version-se-100">#</a> Java Version SE 10.0</h3><p>​本地变量类型推断，可以使用本地变量的初始化去推荐对应变量的类型。提升了并行垃圾收集器 G1 的性能，降低了收集延时。应用优化了启动时刻的数据共享，已经存在的类更好的共享。一个试用的即时编译器 Grral，只支持 linux x64 平台能够感知到 docker 的存在，如果运行在 linux 平台，可以感知到是否运行在 docker 容器中，可以查询到操作系统给容器分配的 cpu 和内存等等物理资源信息.<br /> 修复从主机 Java 线程连接到容器内 Java 线程的一个问题。更短的 jShell REPL tool 启动时间。提供了新接口，可以获取可变化的集合类，copyOf,Set.copyOf, 和 Map.copyOf 等方法创建一个新的集合对象，toUnmodifiableList, toUnmodifiableSet, 和 toUnmodifiableMap 获取不可修改对象，让 Stream 操作可以获取到不可变对象。<br />​本地变量类型推断。可以减少类型的生命，同时也保证了 static 类型的安全性。提供一个垃圾收集的接口去提供各个垃圾收集器隔离的能力，这样可以让内置的垃圾收集器正常运行，同时可以更容易向 hotspot 添加新的垃圾收集器。改进的并行的垃圾收集器 G1, 可以有效降低延迟。让 hotspot 支持寻找可用的任何内存，例如 NVDIMM 存储模块，用户可以去指定它，这也是为未来的异构内存提供支持。在 Linux/x64 平台提供一个实验性的即时编译器。让 jdk 使用单一仓库管理，现在分离在不同的仓库，这样给源码管理带来了一些困难。提升了内存的共享，减少了应用的启动时间。本地线程握手，可以在虚拟机的全局安全点暂停而不用等待其他的任何线程。为 openJDK 提供 Oracle 根认证，这样可以吸引更多的开发者使用 openJDK。</p><p>原文链接：<span class="exturl" data-url="aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2doc2NhcmVjcm93L2FydGljbGUvZGV0YWlscy84MjMxODYzNg==">https://blog.csdn.net/ghscarecrow/article/details/82318636</span></p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8新特性</title>
      <link href="/computer-science/java/javase/Java8%E6%96%B0%E7%89%B9%E6%80%A7/"/>
      <url>/computer-science/java/javase/Java8%E6%96%B0%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="java8新特性"><a class="anchor" href="#java8新特性">#</a> Java8 新特性</h2><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初识Python</title>
      <link href="/computer-science/python/basic/01.%E5%88%9D%E8%AF%86Python/"/>
      <url>/computer-science/python/basic/01.%E5%88%9D%E8%AF%86Python/</url>
      
        <content type="html"><![CDATA[<h3 id="python简介"><a class="anchor" href="#python简介">#</a> Python 简介</h3><h4 id="python的历史"><a class="anchor" href="#python的历史">#</a> Python 的历史</h4><ol><li><p>1989 年圣诞节： <code>Guido von Rossum</code>  开始写 <code>Python</code>  语言的编译器。</p><ol><li>1991 年 2 月：第一个 <code>Python</code>  编译器（同时也是解释器）诞生，它是用 C 语言实现的（后面），可以调用 C 语言的库函数。在最早的版本中， <code>Python</code>  已经提供了对 “类”，“函数”，“异常处理” 等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。</li></ol></li><li><p>1994 年 1 月： <code>Python 1.0</code>  正式发布。</p></li><li><p>2000 年 10 月 16 日： <code>Python 2.0</code>  发布，增加了完整的<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTlFJTgzJUU1JTlDJUJFJUU1JTlCJTlFJUU2JTk0JUI2XyglRTglQTglODglRTclQUUlOTclRTYlQTklOUYlRTclQTclOTElRTUlQUQlQjgp">垃圾回收</span>，提供了对<span class="exturl" data-url="aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVW5pY29kZQ=="> Unicode</span> 的支持。与此同时， <code>Python</code>  的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</p></li><li><p>2008 年 12 月 3 日： <code>Python 3.0</code>  发布，它并不完全兼容之前的 Python 代码，不过因为目前还有不少公司在项目和运维中使用 Python 2.x 版本，所以 <code>Python 3.x</code>  的很多新特性后来也被移植到 <code>Python 2.6/2.7</code>  版本中。</p></li></ol><p>目前我使用的 <code>Python 3.7.x</code>  的版本是在 2018 年发布的， <code>Python</code>  的版本号分为三段，形如 A.B.C。其中 A 表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加 A；B 表示功能更新，出现新功能时增加 B；C 表示小的改动（例如：修复了某个 <code>Bug</code> ），只要有修改就增加 C。如果对 <code>Python</code>  的历史感兴趣，可以阅读名为<span class="exturl" data-url="aHR0cDovL3d3dy5jbmJsb2dzLmNvbS92YW1laS9hcmNoaXZlLzIwMTMvMDIvMDYvMjg5MjYyOC5odG1s">《Python 简史》</span>的网络文章。</p><h4 id="python的优缺点"><a class="anchor" href="#python的优缺点">#</a> Python 的优缺点</h4><p><code>Python</code>  的优点很多，简单的可以总结为以下几点。</p><ol><li>简单明了，学习曲线低，比很多编程语言都容易上手。</li><li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li><li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li><li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li><li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li></ol><p><code>Python</code>  的缺点主要集中在以下几点。</p><ol><li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li><li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li><li>在开发时可以选择的框架太多（如 Web 框架就有 100 多个），有选择的地方就有错误。</li></ol><h4 id="python的应用领域"><a class="anchor" href="#python的应用领域">#</a> Python 的应用领域</h4><p>目前 <code>Python</code>  在 <code>Web</code>  应用后端开发、云基础设施建设、 <code>DevOps</code> 、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p><h3 id="安装python解释器"><a class="anchor" href="#安装python解释器">#</a> 安装 Python 解释器</h3><p>想要开始 <code>Python</code>  编程之旅，首先得在自己使用的计算机上安装 <code>Python</code>  解释器环境，下面将以安装官方的 <code>Python</code>  解释器为例，讲解如何在不同的操作系统上安装 <code>Python</code>  环境。官方的 <code>Python</code>  解释器是用 C 语言实现的，也是使用最为广泛的 Python 解释器，通常称之为 <code>CPython</code> 。除此之外， <code>Python</code>  解释器还有 <code>Java</code>  语言实现的 <code>Jython</code> 、C# 语言实现的 <code>IronPython</code>  以及 <code>PyPy</code> 、 <code>Brython</code> 、 <code>Pyston</code>  等版本，有兴趣的读者可以自行了解。</p><h4 id="windows环境"><a class="anchor" href="#windows环境">#</a> Windows 环境</h4><p>可以在<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZw=="> Python 官方网站</span>下载到 <code>Python</code>  的 <code>Windows</code>  安装程序（exe 文件），需要注意的是如果在 Windows 7 环境下安装 <code>Python 3.x</code> ，需要先安装 <code>Service Pack 1</code>  补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选 “ <code>Add Python 3.x to PATH</code> ”（将 Python 3.x 添加到 PATH 环境变量）并选择自定义安装，在设置 “ <code>Optional Features</code> ” 界面最好将 “ <code>pip</code> ”、“ <code>tcl/tk</code> ”、“ <code>Python test suite</code> ” 等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到 “ <code>Setup was successful</code> ” 的提示。如果稍后运行 Python 程序时，出现因为缺失一些动态链接库文件而导致 Python 解释器无法工作的问题，可以按照下面的方法加以解决。</p><p>如果系统显示 api-ms-win-crt*.dll 文件缺失，可以参照<span class="exturl" data-url="aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjA4NzEzNQ==">《api-ms-win-crt*.dll 缺失原因分析和解决方法》</span>一文讲解的方法进行处理或者直接在<span class="exturl" data-url="aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS96aC1jbi9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9NDgxNDU=">微软官网</span>下载 <code>Visual C++ Redistributable for Visual Studio 2015</code>  文件进行修复；如果是因为更新 Windows 的 DirectX 之后导致某些动态链接库文件缺失问题，可以下载一个<span class="exturl" data-url="aHR0cHM6Ly9kbC5wY29ubGluZS5jb20uY24vZG93bmxvYWQvMzYwMDc0LTEuaHRtbA=="> DirectX 修复工具</span>进行修复。</p><h4 id="linux环境"><a class="anchor" href="#linux环境">#</a> Linux 环境</h4><p><code>Linux</code>  环境自带了 <code>Python 2.x</code>  版本，但是如果要更新到 3.x 的版本，可以在<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZw=="> Python 的官方网站</span>下载 <code>Python</code>  的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以 <code>CentOS</code>  为例）。</p><ol><li>安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</li></ol><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>yum <span class="token parameter variable">-y</span> <span class="token function">install</span> <span class="token function">wget</span> gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel</pre></td></tr></table></figure><ol start="2"><li>下载 <code>Python</code>  源代码并解压缩到指定目录。</li></ol><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token function">wget</span> https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz</pre></td></tr><tr><td data-num="2"></td><td><pre>xz <span class="token parameter variable">-d</span> Python-3.7.6.tar.xz</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">tar</span> <span class="token parameter variable">-xvf</span> Python-3.7.6.tar</pre></td></tr></table></figure><ol start="3"><li>切换至 Python 源代码目录并执行下面的命令进行配置和安装。</li></ol><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> Python-3.7.6</pre></td></tr><tr><td data-num="2"></td><td><pre>./configure <span class="token parameter variable">--prefix</span><span class="token operator">=</span>/usr/local/python37 --enable-optimizations</pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span></pre></td></tr></table></figure><ol start="4"><li>修改用户主目录下名为.bash_profile 的文件，配置 PATH 环境变量并使其生效。</li></ol><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">cd</span> ~</pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token function">vim</span> .bash_profile</pre></td></tr></table></figure><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token comment"># ... 此处省略上面的代码 ...</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/python37/bin</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token comment"># ... 此处省略下面的代码 ...</span></pre></td></tr></table></figure><ol start="5"><li>激活环境变量。</li></ol><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token builtin class-name">source</span> .bash_profile</pre></td></tr></table></figure><h4 id="macos环境"><a class="anchor" href="#macos环境">#</a> macOS 环境</h4><p><code>macOS</code>  也自带了 <code>Python 2.x</code>  版本，可以通过<span class="exturl" data-url="aHR0cHM6Ly93d3cucHl0aG9uLm9yZw=="> Python 的官方网站</span>提供的安装文件（pkg 文件）安装 <code>Python 3.x</code>  的版本。默认安装完成后，可以通过在终端执行 <code>python</code>  命令来启动 2.x 版本的 <code>Python</code>  解释器，启动 3.x 版本的 <code>Python</code>  解释器需要执行 <code>python3</code>  命令。</p><h3 id="运行python程序"><a class="anchor" href="#运行python程序">#</a> 运行 Python 程序</h3><h4 id="确认python的版本"><a class="anchor" href="#确认python的版本">#</a> 确认 Python 的版本</h4><p>可以 Windows 的命令行提示符中键入下面的命令。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>python <span class="token parameter variable">--version</span></pre></td></tr></table></figure><p>在 Linux 或 macOS 系统的终端中键入下面的命令。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>python3 <span class="token parameter variable">--version</span></pre></td></tr></table></figure><p>当然也可以先输入 <code>python</code>  或 <code>python3</code>  进入交互式环境，再执行以下的代码检查 Python 的版本。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> sys</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>version_info<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>version<span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="编写python源代码"><a class="anchor" href="#编写python源代码">#</a> 编写 Python 源代码</h4><p>可以用文本编辑工具（推荐使用<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw=="> Sublime</span>、<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v">Visual Studio Code</span> 等高级文本编辑工具）编写 Python 源代码并用 py 作为后缀名保存该文件，代码内容如下所示。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, world!'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><h4 id="运行程序"><a class="anchor" href="#运行程序">#</a> 运行程序</h4><p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了 &quot;hello, world!&quot;。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>python hello.py</pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>python3 hello.py</pre></td></tr></table></figure><h4 id="代码中的注释"><a class="anchor" href="#代码中的注释">#</a> 代码中的注释</h4><p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p><ol><li>单行注释 - 以 #和空格开头的部分</li><li>多行注释 - 三个引号开头，三个引号结尾</li></ol><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token triple-quoted-string string">"""</pre></td></tr><tr><td data-num="2"></td><td><pre>第一个Python程序 - hello, world!</pre></td></tr><tr><td data-num="3"></td><td><pre>向伟大的Dennis M. Ritchie先生致敬</pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>Version: 0.1</pre></td></tr><tr><td data-num="6"></td><td><pre>Author: 骆昊</pre></td></tr><tr><td data-num="7"></td><td><pre>"""</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello, world!'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token comment"># print ("你好，世界！")</span></pre></td></tr></table></figure><h3 id="python开发工具"><a class="anchor" href="#python开发工具">#</a> Python 开发工具</h3><h4 id="idle-自带的集成开发工具"><a class="anchor" href="#idle-自带的集成开发工具">#</a> IDLE - 自带的集成开发工具</h4><p><code>IDLE</code>  是安装 <code>Python</code>  环境时自带的集成开发工具，如下图所示。但是由于 <code>IDLE</code>  的用户体验并不是那么好所以很少在实际开发中被采用。</p><p><img data-src="./res/python-idle.png" alt="" /></p><h4 id="ipython-更好的交互式编程工具"><a class="anchor" href="#ipython-更好的交互式编程工具">#</a> IPython - 更好的交互式编程工具</h4><p><code>IPython</code>  是一种基于 <code>Python</code>  的交互式解释器。相较于原生的 Python 交互式环境， <code>IPython</code>  提供了更为强大的编辑和交互功能。可以通过 Python 的包管理工具 pip 安装 <code>IPython</code> ，具体的操作如下所示。</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>pip <span class="token function">install</span> ipython</pre></td></tr></table></figure><p>或</p><figure class="highlight shell"><figcaption data-lang="Bash"></figcaption><table><tr><td data-num="1"></td><td><pre>pip3 <span class="token function">install</span> ipython</pre></td></tr></table></figure><p>安装成功后，可以通过下面的 ipython 命令启动 <code>IPython</code> ，如下图所示。</p><p><img data-src="./res/python-ipython.png" alt="" /></p><h4 id="sublime-text-高级文本编辑器"><a class="anchor" href="#sublime-text-高级文本编辑器">#</a> Sublime Text - 高级文本编辑器</h4><p><img data-src="./res/python-sublime.png" alt="" /></p><ul><li><p>首先可以通过<span class="exturl" data-url="aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==">官方网站</span>下载安装程序安装 <code>Sublime Text 3</code>  或 <code>Sublime Text 2</code> 。</p></li><li><p>安装包管理工具。</p><ol><li>通过快捷键 <code>Ctrl+</code>  或者在 View 菜单中选择 <code>Show Console</code>  打开控制台，输入下面的代码。</li></ol><ul><li><code>Sublime 3</code></li></ul><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span>  urllib<span class="token punctuation">.</span>request<span class="token punctuation">,</span>os<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>pf<span class="token operator">=</span><span class="token string">'Package Control.sublime-package'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ipp<span class="token operator">=</span>sublime<span class="token punctuation">.</span>installed_packages_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>ipp<span class="token punctuation">,</span>pf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://sublime.wbond.net/'</span><span class="token operator">+</span>pf<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'%20'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ul><li>Sublime 2</li></ul><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span>  urllib2<span class="token punctuation">,</span>os<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>pf<span class="token operator">=</span><span class="token string">'Package Control.sublime-package'</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>ipp<span class="token operator">=</span>sublime<span class="token punctuation">.</span>installed_packages_path<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>ipp<span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token keyword">if</span> notos<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>ipp<span class="token punctuation">)</span><span class="token punctuation">:</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">pass</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">else</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token boolean">None</span></pre></td></tr><tr><td data-num="9"></td><td><pre>urllib2<span class="token punctuation">.</span>install_opener<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token builtin">open</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>ipp<span class="token punctuation">,</span>pf<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>urllib2<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://sublime.wbond.net/'</span><span class="token operator">+</span>pf<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'%20'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Please restart Sublime Text to finish installation'</span><span class="token punctuation">)</span></pre></td></tr></table></figure><ol start="2"><li>在浏览器中输入  <span class="exturl" data-url="aHR0cHM6Ly9zdWJsaW1lLndib25kLm5ldC9QYWNrYWdlJTIwQ29udHJvbC5zdWJsaW1lLXBhY2thZ2U=">https://sublime.wbond.net/Package Control.sublime-package</span> 下载包管理工具的安装包，并找到安装 Sublime 目录下名为 &quot;Installed Packages&quot; 的目录，把刚才下载的文件放到这个文件加下，然后重启 Sublime Text 就搞定了。</li></ol></li><li><p>安装插件。通过 <code>Preference</code>  菜单的 <code>Package Control</code>  或快捷键 <code>Ctrl+Shift+P</code>  打开命令面板，在面板中输入 <code>Install Package</code>  就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件：</p><ul><li><code>SublimeCodeIntel</code>  - 代码自动补全工具插件。</li><li><code>Emmet</code>  - 前端开发代码模板插件。</li><li><code>Git</code>  - 版本控制工具插件。</li><li><code>Python PEP8 Autoformat</code>  -  <code>PEP8</code>  规范自动格式化插件。</li><li><code>ConvertToUTF8</code>  - 将本地编码转换为 <code>UTF-8</code> 。</li></ul></li></ul><blockquote><p><strong>说明</strong>：事实上<span class="exturl" data-url="aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v"> Visual Studio Code</span> 可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。</p></blockquote><h4 id="pycharm-python开发神器"><a class="anchor" href="#pycharm-python开发神器">#</a> PyCharm - Python 开发神器</h4><p>PyCharm 的安装、配置和使用在<a href="../%E7%95%AA%E5%A4%96%E7%AF%87/%E7%8E%A9%E8%BD%ACPyCharm.md">《玩转 PyCharm》</a>进行了介绍，有兴趣的读者可以选择阅读。</p><p><img data-src="./res/python-pycharm.png" alt="" /></p><h3 id="练习"><a class="anchor" href="#练习">#</a> 练习</h3><ol><li><p>在 <code>Python</code>  交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</p><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> this</pre></td></tr></table></figure><blockquote><p><strong>说明</strong>：输入上面的代码，在 <code>Python</code>  的交互式环境中可以看到 Tim Peter 撰写的<a href="../Python%E4%B9%8B%E7%A6%85.md"> “Python 之禅”</a>，里面讲述的道理不仅仅适用于 Python，也适用于其他编程语言。</p></blockquote></li><li><p>学习使用 turtle 在屏幕上绘制图形。</p><blockquote><p><strong>说明</strong>：turtle 是 Python 内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是 Logo 语言的一部分，Logo 语言是 Wally Feurzig 和 Seymour Papert 在 1966 发明的编程语言。</p></blockquote><figure class="highlight python"><figcaption data-lang="python"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">import</span> turtle</pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre>turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="4"></td><td><pre>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span><span class="token string">'red'</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="7"></td><td><pre>turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="8"></td><td><pre>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="9"></td><td><pre>turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="10"></td><td><pre>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="11"></td><td><pre>turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">90</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="12"></td><td><pre>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span></pre></td></tr><tr><td data-num="13"></td><td><pre></pre></td></tr><tr><td data-num="14"></td><td><pre>turtle<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></pre></td></tr></table></figure><blockquote><p><strong>提示</strong>：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。</p></blockquote></li></ol><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Python </category>
          
          <category> Python基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程笔记 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面对对象程序设计</title>
      <link href="/computer-science/java/javase/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
      <url>/computer-science/java/javase/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h4 id="java面对对象编程的概念"><a class="anchor" href="#java面对对象编程的概念">#</a> Java 面对对象编程的概念</h4><h5 id="类"><a class="anchor" href="#类">#</a> 类</h5><h5 id="类的概念"><a class="anchor" href="#类的概念">#</a> 类的概念</h5><p>类是描述世间万物的框架，在 java 中世间万物都可以用类来定义。</p><p>将数据及对数据的操作封装在一起，成为一个不可分割的整体。</p><p>同时将具有相同特征的对象抽象成一种新的数据类型 ---------- 类；</p><p>通过对象间的消息传递使整个系统运转，通过类的继承实现代码重用。</p><h5 id="类的创建格式"><a class="anchor" href="#类的创建格式">#</a> 类的创建格式</h5><p>[public] [修饰符] class [类名] extends (可选) [父类名] implements [接口 1 名],[接口 2 名],...{<br />// 类的成员<br />}</p><h5 id="注意"><a class="anchor" href="#注意">#</a> 注意：</h5><p>1.public 可选，当 java 文件名跟类名一致时，public 必须有<br /> 2. 第二个可选关键字有 final (子类不可继承)、abstract (无法实例化)<br /> 3. 第三个参数类名是定义的类名 (要符合 Java 类名命名规范)</p><h5 id="类的初始化"><a class="anchor" href="#类的初始化">#</a> 类的初始化</h5><p>【类名】 对象名 = new 【类名】();<br />【类名】 对象名 = new 【类名】(参数一...);</p><h5 id="类的组成"><a class="anchor" href="#类的组成">#</a> 类的组成</h5><p>类 = 字段 + 方法；</p><ol><li>字段（属性）</li></ol><pre><code>描述一类对象的特征值。比如，人拥有姓名、性别、年龄等特征。</code></pre><ol start="2"><li>方法</li></ol><pre><code>描述一类对象的行为。比如，人会说话，会学习，会唱歌等行为。</code></pre><h5 id="对象"><a class="anchor" href="#对象">#</a> 对象</h5><p>对象是类的实例。在 Java 中万物皆可看成是对象</p><h5 id="类与对象的区别"><a class="anchor" href="#类与对象的区别">#</a> 类与对象的区别</h5><p>类是同等对象的集合与抽象。它是一块创建现实<strong>对象的模板</strong>。<strong>对象是类的实例</strong>，对象是面向对象编程的核心部分，是实际存在的具体实体，具有明确定义的状态和行为。</p><h5 id="例子"><a class="anchor" href="#例子">#</a> 例子</h5><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span><span class="token comment">// 字段</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> sex <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// 方法</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">study</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token operator">+</span><span class="token string">"同学在学习"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token comment">// 类 = 方法 + 字段 </span></pre></td></tr><tr><td data-num="11"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 声明类的对象</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h5 id="构造函数"><a class="anchor" href="#构造函数">#</a> 构造函数</h5><p>构造函数是特殊的函数，函数名与类名一致，不能有返回值，包括 void；</p><figure class="highlight text"><figcaption data-lang="text"></figcaption><table><tr><td data-num="1"></td><td><pre>声明格式为：[修饰符] 类名(参数列表)&#123; //... &#125;</pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        </pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h5 id="分类"><a class="anchor" href="#分类">#</a> 分类</h5><h5 id="无参构造"><a class="anchor" href="#无参构造">#</a> 无参构造</h5><p>如果类中没有有参构造，也没有无参构造，则系统会默认给该类添加一个无参构造</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>      <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h5 id="有参构造"><a class="anchor" href="#有参构造">#</a> 有参构造</h5><p>如果没有无参构造，则有参构造函数则是初始化对象的构造函数（即必须传入参数才能完成初始化）</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>      <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>      <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>      <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>      <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>          <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>      <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>  <span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h5 id="构造函数的重载"><a class="anchor" href="#构造函数的重载">#</a> 构造函数的重载</h5><p>构造函数允许重载，可以根据需求重载构造函数。</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Studnet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        </pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h5 id="面对对象的三大特征"><a class="anchor" href="#面对对象的三大特征">#</a> 面对对象的三大特征</h5><ul><li><p><strong>封装</strong><br />把客观事物封装成抽象的类，并且类可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。<br />在一个对象内部，某些代码或某些数据可以是私有的，不能被外界访问。通过这种方式，现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象<br />封装的作用<br />封装把过程和数据包围起来，对数据的访问只能通过已定义的接口。面向对象编程始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。封装是一种信息隐藏技术，在 java 中通过控制成员的访问权限实现封装，即使用方法将类的数据隐藏起来，控制用户对类的修改和访问数据的程度。 ** 适当的封装可以让代码更容易理解和维护，也加强了代码的安全性。</p></li><li><p><strong>继承</strong></p><ul><li>继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法</li><li>一个新类可以从现有的类中派生，这个过程称为类继承，新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）</li><li>派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre></pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p><strong>多态</strong></p><ul><li>多态性是指允许不同类的对象对同一消息作出响应</li><li>多态性语言具有灵活、抽象、行为共享、代码共享的优势</li></ul></li></ul><h3 id="static关键字"><a class="anchor" href="#static关键字">#</a> static 关键字</h3><p><code>static</code>  修饰符只能修饰类的成员</p><ul><li>特点<ul><li><code>static</code>  只能修饰类成员（字段，方法）, 另外构造函数不允许 <code>static</code>  修饰</li><li><code>static</code>  修饰的类成员是属于所有类对象，这些成员所有对象共享 (即所有对象的该成员都在同一块内存区域)</li><li><code>static</code>  在类初始化前就已经加载完成了，所以它不能使用对象级别的其他成员</li><li><code>staitc</code>  表示静态成员，而静态成员只能使用静态成员 (无法在类中直接调用类的普通成员)</li></ul></li></ul><h3 id="final关键字"><a class="anchor" href="#final关键字">#</a> final 关键字</h3><p><code>final</code>  在 Java 的原意是不可变，很多场合下都会和 <code>static</code>  一起使用，表示静态不可变成员</p><ul><li><code>final</code>  修饰的字段称为常量；常量在声明的时候就必须初始化完；常量一经确定无法更改；</li><li><code>final</code>  修饰的方法无法被重写<ul><li><code>final</code>  修饰的类无法被继承 (如 <code>String</code>  类、 <code>LocalDate</code>  类等等)</li></ul></li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> age <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        </pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token class-name">String</span> name <span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    </pre></td></tr><tr><td data-num="12"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><h3 id="抽象类"><a class="anchor" href="#抽象类">#</a> 抽象类</h3><ul><li><p><strong>抽象类对多态的实现</strong></p><ul><li>接口</li><li>抽象类</li><li>重写父类方法</li></ul></li><li><p><strong>抽象类的特点</strong></p><ul><li>抽象类中没有实例，即不能声明调用自己的构造方法</li><li>抽象类中可以有普通方法，抽象方法不能在抽象类中实现</li><li>继承了抽象类的子类必须实现该抽象类中所有的抽象方法，如果不实现，子类也必须定义为抽象类</li></ul></li></ul><h3 id="接口"><a class="anchor" href="#接口">#</a> 接口</h3><ul><li><p><strong>接口对多态的实现</strong></p></li><li><p><strong>接口的特征</strong></p><ul><li>接口没有构造方法，也不能实例化。</li><li>接口中的抽象方法和默认为公开的，变量默认为公开静态常量（建议不要再写这些修饰符）</li><li>接口中允许静态方法和默认 ( <code>default</code> ) 方法（JDK1.8）</li><li>接口可以多继承（只允许接口之间）</li></ul><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">go</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token comment">/**</pre></td></tr><tr><td data-num="5"></td><td><pre>    * 下面的方法写法是在 JDK1.8 开始有的</pre></td></tr><tr><td data-num="6"></td><td><pre>    */</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        </pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">see</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        </pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li></ul><h3 id="对象转型"><a class="anchor" href="#对象转型">#</a> 对象转型</h3><ul><li><p><strong>向上转型</strong></p><p>父类对象或者实现类对象使用子类的引用</p><p>特点：</p><ol><li>使用子类或实现类引用的父类对象或接口对象无法调用子类或实现类的方法，只能调用父类或接口中的方法和字段。</li><li>编译时引用是父类对象或接口对象，运行时引用是子类对象或实现类对象</li></ol><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    </pre></td></tr><tr><td data-num="3"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Action</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">act</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="7"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Action</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    </pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token class-name">Person</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 父类对象使用子类的引用</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token class-name">Action</span> action <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 接口对象使用子类的引用</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li></ul><h3 id="抽象类和接口的区别"><a class="anchor" href="#抽象类和接口的区别">#</a> 抽象类和接口的区别</h3><ul><li>抽象类对属性没有限制，而接口的属性只能是公开静态常量</li><li>抽象类和接口都不能实例化，但是抽象类可以有构造方法 (仅供子类使用)，而接口不能有构造方法</li><li>抽象类可以有普通方法，但接口不能有普通方法，接口只能有静态方法 (JDK8) 和默认方法 (JDK8)</li><li>抽象类只能单继承，而接口之间可以多继承 (只能接口之间)</li></ul><h3 id="内部类"><a class="anchor" href="#内部类">#</a> 内部类</h3><p>​    <strong>什么是内部类？</strong></p><p>​    内部类就是嵌套在<strong>类或者方法代码块</strong>内部的类</p><ul><li><p><strong>内部类的作用</strong></p><p>我们为什么需要内部类？或者说内部类为啥要存在？其主要原因有如下几点：</p><ul><li><p><strong>内部类方法可以访问该类定义所在作用域中的数据，包括被 private 修饰的私有数据</strong></p><p><strong>为什么内部类可以无条件地访问外围类的所有元素</strong>？</p><p>解答：</p><p><strong>为什么可以引用？：</strong></p><p><strong>内部类虽然和外部类写在同一个文件中， 但是编译完成后， 还是生成各自的 class 文件，内部类通过 this 访问外部类的成员。</strong></p><ol><li>编译器自动为内部类添加一个成员变量， 这个成员变量的类型和外部类的类型相同， 这个成员变量就是指向外部类对象 this 的引用；</li><li>编译器自动为内部类的构造方法添加一个参数， 参数的类型是外部类的类型， 在构造方法内部使用这个参数为内部类中添加的成员变量赋值；</li><li>在调用内部类的构造函数初始化内部类对象时，会默认传入外部类的引用。</li></ol><p>编译指令 javac classpath (.java 文件的路径)<br /> 反编译指令 javap -v (详细信息) classpath (.class 文件的路径)</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">private</span> <span class="token keyword">int</span> a <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">private</span> <span class="token keyword">int</span> b <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Outer</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过 外部类名.this. 字段名 来访问外部重名字段</span></pre></td></tr><tr><td data-num="11"></td><td><pre>        <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="13"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p><strong>内部类可以对同一包中的其他类隐藏起来</strong></p><p><strong>实现隐藏</strong></p><p>​    关于内部类的第二个好处其实很显而易见，我们都知道外部类即普通的类不能使用  <code>private</code> , <code>protected</code>  访问权限符来修饰的，而内部类则可以使用  <code>private</code>  和  <code>protected </code> 来修饰。当我们使用 <code>private</code>  来修饰内部类的时候这个类就对外隐藏了。这看起来没什么作用，但是当内部类实现某个接口的时候，在进行<strong>向上转型</strong>，对外部来说，就完全隐藏了接口的实现了</p><ul><li><strong>内部类可以解决 java 单继承的缺陷</strong><br />当我们想要<strong>定义一个回调函数却不想写大量代码的时候</strong>我们可以选择使用<strong>匿名内部类</strong>来实现<br />我们知道 java 是不允许使用  <code>extends</code>  去继承多个类的。内部类的引入可以很好的解决这个事情。<br />我的理解 Java 只能继承一个类这个学过基本语法的人都知道，而在有内部类之前它的多重继承方式是用接口来实现的。但使用接口有时候有很多不方便的地方。<strong>比如我们实现一个接口就必须实现它里面的所有方法</strong>。</li></ul></li></ul></li><li><p><strong>内部类和外部类的关系</strong></p><ul><li><strong>对于非静态内部类，内部类的创建依赖外部类的实例对象，在没有外部类实例之前是无法创建内部类的</strong></li><li><strong>内部类是一个相对独立的实体，与外部类不是 is-a (依赖) 关系</strong></li><li><strong>创建内部类的时刻 并不依赖于 外部类 的创建</strong></li></ul></li><li><p><strong>内部类的分类</strong></p><ul><li><p><strong>静态内部类</strong></p></li><li><p><strong>非静态内部类</strong></p><ul><li><p><strong>非静态内部类访问权限的问题</strong></p></li><li><p><strong>非静态内部类和静态内部类的区别</strong></p><table><thead><tr><th></th><th>静态内部类</th><th>非静态内部类</th></tr></thead><tbody><tr><td><strong>是否可以拥有静态成员</strong></td><td><strong>是</strong></td><td><strong>否</strong></td></tr><tr><td><strong>是否可以访问外部类的静态成员</strong></td><td><strong>是</strong></td><td><strong>是</strong></td></tr><tr><td><strong>是否可以访问外部类的非静态成员</strong></td><td><strong>否</strong></td><td><strong>是</strong></td></tr><tr><td><strong>创建是否依赖外部类</strong></td><td><strong>否</strong></td><td><strong>是</strong></td></tr></tbody></table></li></ul></li><li><p><strong>匿名内部类 (属于非静态内部类)</strong></p><p>在定义时，要么给出<strong>类的超类</strong>，要么给出<strong>类要实现的接口（只能有一个）</strong>；对外部类的访问权限同本地内部类相同；常见的用途是在建立 GUI 应用程序时为组件添加事件监听器对象</p><ul><li><p>匿名内部类是没有访问修饰符的。</p></li><li><p><strong>匿名内部类必须继承一个抽象类或者实现一个接口</strong></p></li><li><p>匿名内部类中<strong>不能存在任何静态成员或方法</strong></p></li><li><p>匿名内部类是<strong>没有构造方法的</strong>，因为它没有类名。</p></li><li><p>与局部内部类相同匿名内部类也可以引用局部变量。此变量也必须声明为 <code> final</code></p><p><strong>为什么局部变量需要 final 修饰呢？</strong></p><ul><li><p>因为局部变量和匿名内部类的生命周期不同。</p></li><li><p>匿名内部类是创建后是存储在堆中的，而方法中的局部变量是存储在 Java 栈中，当方法执行完毕后，就进行退栈，同时局部变量也会消失。</p></li></ul><p><strong>那么此时匿名内部类还有可能在堆中存储着，那么匿名内部类要到哪里去找这个局部变量呢？</strong></p><p>为了解决这个问题编译器为自动地帮我们在匿名内部类中创建了一个局部变量的备份，也就是说即使方法执结束，匿名内部类中还有一个备份，自然就不怕找不到了。<br />但是问题又来了。<br />如果局部变量中的 <code>a</code>  不停的在变化。那么岂不是也要让备份的 <code>a</code>  变量无时无刻的变化。为了保持局部变量与匿名内部类中备份域保持一致。编译器不得不规定死这些局部域必须是常量，一旦赋值不能再发生变化了。<br />所以为什么匿名内部类应用外部方法的域必须是常量域的原因所在了。<br /><strong>特别注意</strong><br />在 Java8 中已经去掉要对 final 的修饰限制，但其实只要在匿名内部类使用了，该变量还是会自动变为 final 类型（<strong>只能使用，不能赋值</strong>）。</p></li></ul><p><strong>匿名类的创建示例</strong>：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NickClass</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类的抽象类无参构造创建方式"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre></pre></td></tr><tr><td data-num="10"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Outer1</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类的抽象有参构造创建方式"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre></pre></td></tr><tr><td data-num="16"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Outer2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token comment">// 这里的接口匿名类创建方式，重写时必须将 public 修饰符加上，否则报错</span></pre></td></tr><tr><td data-num="18"></td><td><pre>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="19"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"匿名内部类的接口创建方式"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 匿名内部类中可以访问原</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="22"></td><td><pre></pre></td></tr><tr><td data-num="23"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="24"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="25"></td><td><pre></pre></td></tr><tr><td data-num="26"></td><td><pre><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="29"></td><td><pre></pre></td></tr><tr><td data-num="30"></td><td><pre><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Outer1</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="31"></td><td><pre>    <span class="token keyword">int</span> i <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="32"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">Outer1</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="33"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>i <span class="token operator">=</span> i <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="34"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="35"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="36"></td><td><pre>        <span class="token keyword">return</span> i <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="37"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="38"></td><td><pre>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="39"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="40"></td><td><pre></pre></td></tr><tr><td data-num="41"></td><td><pre><span class="token keyword">interface</span> <span class="token class-name">Outer2</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="42"></td><td><pre>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span></pre></td></tr><tr><td data-num="43"></td><td><pre>    <span class="token keyword">void</span> <span class="token function">play</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="44"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p><strong>匿名类使用局部变量</strong></p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NickClassTest</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">final</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span> <span class="token punctuation">;</span><span class="token comment">// 匿名类允许使用常量</span></pre></td></tr><tr><td data-num="4"></td><td><pre>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// 匿名类可以使用局部变量，但是不能改变其值</span></pre></td></tr><tr><td data-num="5"></td><td><pre>        <span class="token keyword">new</span> <span class="token class-name">Listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>            <span class="token annotation punctuation">@Override</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> i1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre><span class="token comment">//                j = j+ 1; 编译错误，不能改变局部变量的值</span></pre></td></tr><tr><td data-num="9"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用局部变量i="</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">",j="</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i1="</span><span class="token operator">+</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 这里可以将需要传入方法的实参传入</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Listener</span><span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="16"></td><td><pre>    <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">listen</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure></li><li><p><strong>成员内部类 (属于非静态内部类)</strong></p></li><li><p><strong>本地内部类 (局部内部类)(属于非静态内部类)</strong></p><p>如果一个内部类只在一个方法中使用到了，那么我们可以将这个类定义在方法内部，这种内部类被称为局部内部类。其作用域仅限于该方法。</p><p>局部内部类有两点值得我们注意的地方：</p><ul><li>局部内类不允许使用访问权限修饰符 <code> public</code> , <code>private</code> , <code>protected </code> 均不允许</li><li>局部内部类对外完全隐藏，除了创建这个类的方法可以访问它其他的地方是不允许访问的。</li><li>局部内部类与成员内部类不同之处是他可以引用成员变量，但该成员必须声明为 final，并内部不允许修改该变量的值。（这句话并不准确，因为如果不是基本数据类型的时候，只是不允许修改引用指向的对象，而对象本身是可以被就修改的）</li></ul></li></ul></li><li><p><strong>内部类可能造成的问题</strong></p><p><strong>内部类会造成程序的内存泄漏</strong><br />相信做 Android 的朋友看到这个例子一定不会陌生，我们经常使用的 Handler 就无时无刻不给我们提示着这样的警告。</p><p>我们先来看下内部类为什么会造成内存泄漏。</p><p>​    要想了解为啥内部类为什么会造成内存泄漏我们就必须了解 <strong>java 虚拟机的回收机制</strong>，但是我们这里不会详尽的介绍 java 的内存回收机制，我们只需要了解 java 的内存回收机制通过「可达性分析」来实现的。</p><p>即 java 虚拟机会通过内存回收机制来判定引用是否可达，如果不可达就会在某些时刻去回收这些引用。</p><p>那么内部类在什么情况下会造成内存泄漏的可能呢？</p><ul><li>如果一个匿名内部类没有被任何引用持有，那么匿名内部类对象用完就有机会被回收。</li><li>如果内部类仅仅只是在外部类中被引用，当外部类的不再被引用时，外部类和内部类就可以都被 GC 回收。</li><li>如果当内部类的引用被外部类以外的其他类引用时，就会造成内部类和外部类无法被 GC 回收的情况，即使外部类没有被引用，<strong>因为内部类持有指向外部类的引用）</strong>。</li></ul></li></ul><h3 id="java包"><a class="anchor" href="#java包">#</a> Java 包</h3><ul><li><p>为了更好地组织类，Java 提供了包机制，用于区别类名的命名空间</p></li><li><p><strong>包的作用：</strong></p><ul><li>把功能相似或相关的类或接口组织在同一个包中，方便类的查找和使用</li><li>如同<strong>文件夹一样</strong>，包也采用了树形目录的存储方式。同一个包中的类名字是不同的，不同的包中的类的名字是可以相同的，当同时调用两个不同包中相同类名的类时，应该加上包名加以区别。因此，包可以避免名字冲突。</li><li>包也提供了限定了访问权限的一个控制范围，拥有包访问权限的类才能访问某个包中的类</li></ul></li><li><p>Java 使用包这种机制是为了防止命名冲突，访问控制，提供搜索和定位类、接口、枚举和注</p><p>解等，它把不同的 java 程序分类保存，更方便的被其他 java 程序调用</p><ul><li>以下是一些 JDK 中的包：</li><li>java.lang：打包基础的类</li><li><span class="exturl" data-url="aHR0cDovL2phdmEuaW8=">java.io</span>：包含输入输出功能的函数</li><li>java.util：包含一些重要的工具类</li><li>…</li></ul></li><li><p>开发者可以自己把一组类等组合定义自己的包。而且在实际开发中这样做是值得提倡的，将</p></li></ul><p>相关的类分组，可以让其他的编程者更容易地确定哪些类、接口、枚举和注解等是相关的 。</p><ul><li>由于包创建了新的命名空间，所以不会跟其他包中的任何名字产生命名冲突。使用包这种机</li></ul><p>制，更容易实现访问控制，并且让定位相关类更加简单。</p><h3 id="package与import关键字"><a class="anchor" href="#package与import关键字">#</a> package 与 import 关键字</h3><ul><li><p>Java 中用 package 语句来将一个 Java 源文件中的类打成一个包</p></li><li><p>package 语句必须作为 Java 源文件的第一条语句，指明该文件中定义的类</p><p>所在的包。(若忽略该语句，则指定为无名包)。它的格式为：</p><figure class="highlight text"><figcaption data-lang="text"></figcaption><table><tr><td data-num="1"></td><td><pre>package pkg1[.pkg2[.pkg3…]];</pre></td></tr></table></figure></li><li><p>Java 编译器把包对应于<strong>文件系统的目录</strong>管理</p></li><li><p>package 语句中，用 “.” 来指明目录的层次</p></li><li><p>包声明应该在源文件的第一行，每个源文件只能有一个包声明，这个文件中的每个类型都应用于它</p></li><li><p>为了能够使用其他包的成员，需要在 Java 程序中明确导入该包</p></li><li><p>使用 &quot;<strong>import</strong>&quot; 语句可完成此功能</p></li><li><p>在 java 源文件中 import 语句应位于 package 语句之后，所有类的定义之前，可以没有，也可以有多条，其语法格式为：</p></li></ul><figure class="highlight text"><figcaption data-lang="text"></figcaption><table><tr><td data-num="1"></td><td><pre>import package1[.package2…].(classname|);</pre></td></tr></table></figure><ul><li><p>如果在一个包中，一个类想要使用本包中的另一个类，那么该包名可以省略</p></li><li><p>import 语句中类名部分可以使用通配符 “*”</p></li><li><p>符号 * 表示直接导入包中所有的类</p></li><li><p>如： <code>import java.util.*;</code>  表示导入 <code>java.util</code>  包中所有的类</p></li><li><p>注意：包和子包之间不存在继承关系，只要两个类不直接在同一个文件中即认为位于不同的包，因此 * 号只能包含本包中的类而不能包含子包中的类</p></li><li><p><strong>包的命名规则</strong></p><ul><li><p>创建包的时候，你需要为这个包取一个合适的名字，根据 Java 包的约定，名字内的所有字母都应小写，之后，如果非同包的其他的一个源文件使用了这个包提供的类、接口、枚举或者注释类型的时候，都必须在这个源文件的开头说明所引用的包名</p></li><li><p>通常，一个公司使用它互联网域名的颠倒形式来作为它的包名。例如：互联网域名是 <span class="exturl" data-url="aHR0cDovL2NoaW5hc29mdGkuY29t">chinasofti.com</span>，所有的包名都以 com.chinasofti 开头</p></li></ul></li></ul><h3 id="访问控制符"><a class="anchor" href="#访问控制符">#</a> 访问控制符</h3><ul><li><p><strong>private</strong></p><p>本类友好</p></li><li><p><strong>public</strong></p><p>所有友好</p></li><li><p><strong>缺省的</strong></p><p>同包类友好</p></li><li><p><strong>protected</strong></p><p>同包类友好，不同包的子类友好</p></li><li><p><strong>访问权限示意图</strong></p></li></ul><table><thead><tr><th></th><th>本类</th><th>同包类</th><th>不同包子类</th><th>不同包类</th></tr></thead><tbody><tr><td>private</td><td>√</td><td></td><td></td><td></td></tr><tr><td>缺省的</td><td>√</td><td>√</td><td></td><td></td></tr><tr><td>protected</td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td>public</td><td>√</td><td>√</td><td>√</td><td>√</td></tr></tbody></table><h3 id="枚举"><a class="anchor" href="#枚举">#</a> 枚举</h3><p>​ <code>Java</code>  枚举（ <code>Enum</code> ）是一种特殊的类，用于表示一组相关的常量。枚举常量是预定义的，不允许添加或删除。枚举在 <code>Java</code>  中是一种基本数据类型，可以单独定义或嵌套在类或接口中。</p><h4 id="枚举示例"><a class="anchor" href="#枚举示例">#</a> 枚举示例</h4><p>​以下是一个枚举类的示例：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">DayOfWeek</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token constant">MONDAY</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token constant">TUESDAY</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token constant">WEDNESDAY</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token constant">THURSDAY</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token constant">FRIDAY</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token constant">SATURDAY</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token constant">SUNDAY</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​这个枚举类表示一周中的每一天，包括星期一至星期日。枚举常量（例如 MONDAY）是 DayOfWeek 类的实例，它们是 final、static 和 public 类型的。这意味着它们是不可修改的常量，可以在没有类实例的情况下访问。</p><p>​枚举常量可以有属性和方法。以下是一个带有属性和方法的示例：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Gender</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">MALE</span><span class="token punctuation">(</span><span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">FEMALE</span><span class="token punctuation">(</span><span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="4"></td><td><pre></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre></pre></td></tr><tr><td data-num="7"></td><td><pre>    <span class="token class-name">Gender</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="10"></td><td><pre></pre></td></tr><tr><td data-num="11"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">return</span> name<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="14"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​这个枚举类表示性别，包括男和女。枚举常量 MALE 和 FEMALE 都有一个名为 name 的属性，它们在构造函数中被初始化。此外，Gender 类还有一个名为 getName 的方法，用于返回枚举常量的 name 属性。</p><p>​枚举可以用于 switch 语句。以下是一个使用 switch 语句的示例：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printDay</span><span class="token punctuation">(</span><span class="token class-name">DayOfWeek</span> day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>day<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="3"></td><td><pre>        <span class="token keyword">case</span> <span class="token constant">MONDAY</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="4"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期一"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="6"></td><td><pre>        <span class="token keyword">case</span> <span class="token constant">TUESDAY</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="7"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期二"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">case</span> <span class="token constant">WEDNESDAY</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="10"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="11"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="12"></td><td><pre>        <span class="token keyword">case</span> <span class="token constant">THURSDAY</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="13"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期四"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="15"></td><td><pre>        <span class="token keyword">case</span> <span class="token constant">FRIDAY</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="16"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="17"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="18"></td><td><pre>        <span class="token keyword">case</span> <span class="token constant">SATURDAY</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="19"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期六"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="20"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="21"></td><td><pre>        <span class="token keyword">case</span> <span class="token constant">SUNDAY</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="22"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"星期日"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="23"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="24"></td><td><pre>        <span class="token keyword">default</span><span class="token operator">:</span></pre></td></tr><tr><td data-num="25"></td><td><pre>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"无效的日期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="26"></td><td><pre>            <span class="token keyword">break</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="27"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="28"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​这个方法使用 switch 语句打印给定日期的星期几。使用枚举作为 switch 语句的参数可以使代码更清晰易读。</p><p>​枚举类也可以实现接口、继承其他类或枚举，或者被其他类继承。这使得枚举类更加灵活和可扩展。</p><ul><li><strong>为什么要有枚举？枚举的作用</strong></li></ul><p>​ <code>Java</code>  引入枚举是为了提高代码的可读性和可维护性。枚举类型在 <code>Java</code>  中表示一组固定的常量，可以在代码中使用这些常量，而不必担心拼写错误或者传递无效的参数。这样可以减少由于错误参数而引起的问题，同时也使代码更加清晰和易于维护。</p><p>​枚举的主要用处包括：</p><ol><li>限制变量的取值范围，提高代码的可读性和可维护性。</li><li>枚举常量在代码中使用时具有类型安全性，可以防止类型转换错误。</li><li>枚举常量可以拥有自己的属性和行为，类似于类的实例，可以实现更复杂的功能。</li><li>枚举常量可以作为参数传递给方法，可以提高代码的可读性和可维护性，同时也可以防止传递无效的参数。</li><li>枚举常量可以作为集合类型的元素，可以更方便地对集合进行操作。</li></ol><p>总之， <code>Java</code>  中的枚举类型可以帮助程序员编写更可读、更可维护、更类型安全和更清晰的代码，提高程序的可靠性和可维护性。</p><ul><li><strong>枚举的使用</strong></li></ul><p>​Java 枚举的使用可以分为以下几个方面：</p><ol><li>定义枚举类型</li></ol><p>​Java 枚举类型通过关键字 <code>enum</code>  定义，语法如下：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EnumName</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token constant">ENUM_VALUE1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token constant">ENUM_VALUE2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token constant">ENUM_VALUE3</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="5"></td><td><pre>    <span class="token comment">// ...</span></pre></td></tr><tr><td data-num="6"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>其中， <code>EnumName</code>  表示枚举类型的名称， <code>ENUM_VALUE1</code> 、 <code>ENUM_VALUE2</code> 、 <code>ENUM_VALUE3</code>  等表示枚举常量。</p><ol><li>枚举常量的使用</li></ol><p>枚举常量通过 <code>EnumName.ENUM_VALUE</code>  的方式访问，例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">EnumName</span> enumValue <span class="token operator">=</span> <span class="token class-name">EnumName</span><span class="token punctuation">.</span><span class="token constant">ENUM_VALUE1</span><span class="token punctuation">;</span></pre></td></tr></table></figure><ol><li>枚举类型的方法</li></ol><p>枚举类型可以定义自己的方法，例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EnumName</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token constant">ENUM_VALUE1</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token constant">ENUM_VALUE2</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token constant">ENUM_VALUE3</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="7"></td><td><pre>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is my method."</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="9"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>在枚举类型中，每个枚举常量都是一个实例对象，因此可以在枚举常量上调用枚举类型中的方法：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">EnumName</span> enumValue <span class="token operator">=</span> <span class="token class-name">EnumName</span><span class="token punctuation">.</span><span class="token constant">ENUM_VALUE1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>enumValue<span class="token punctuation">.</span><span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "This is my method."</span></pre></td></tr></table></figure><ol><li>枚举类型的构造函数</li></ol><p>​枚举类型也可以有自己的构造函数，但是枚举常量必须在枚举类型定义的最开始处定义。例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token keyword">enum</span> <span class="token class-name">EnumName</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="2"></td><td><pre>    <span class="token function">ENUM_VALUE1</span><span class="token punctuation">(</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="3"></td><td><pre>    <span class="token function">ENUM_VALUE2</span><span class="token punctuation">(</span><span class="token string">"value2"</span><span class="token punctuation">)</span><span class="token punctuation">,</span></pre></td></tr><tr><td data-num="4"></td><td><pre>    <span class="token function">ENUM_VALUE3</span><span class="token punctuation">(</span><span class="token string">"value3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="5"></td><td><pre></pre></td></tr><tr><td data-num="6"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">String</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="7"></td><td><pre></pre></td></tr><tr><td data-num="8"></td><td><pre>    <span class="token keyword">private</span> <span class="token class-name">EnumName</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="9"></td><td><pre>        <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="10"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="11"></td><td><pre></pre></td></tr><tr><td data-num="12"></td><td><pre>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span></pre></td></tr><tr><td data-num="13"></td><td><pre>        <span class="token keyword">return</span> value<span class="token punctuation">;</span></pre></td></tr><tr><td data-num="14"></td><td><pre>    <span class="token punctuation">&#125;</span></pre></td></tr><tr><td data-num="15"></td><td><pre><span class="token punctuation">&#125;</span></pre></td></tr></table></figure><p>​在这个例子中，枚举类型 <code>EnumName</code>  有一个私有成员变量 <code>value</code> ，并且定义了一个有参数的构造函数，每个枚举常量都必须在定义时指定对应的参数。在枚举类型中，可以通过调用 <code>getValue()</code>  方法获取枚举常量对应的参数值。</p><ol><li>枚举类型的比较</li></ol><p>​枚举类型可以通过 <code>==</code>  符号进行比较，例如：</p><figure class="highlight java"><figcaption data-lang="java"></figcaption><table><tr><td data-num="1"></td><td><pre><span class="token class-name">EnumName</span> enumValue1 <span class="token operator">=</span> <span class="token class-name">EnumName</span><span class="token punctuation">.</span><span class="token constant">ENUM_VALUE1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="2"></td><td><pre><span class="token class-name">EnumName</span> enumValue2 <span class="token operator">=</span> <span class="token class-name">EnumName</span><span class="token punctuation">.</span><span class="token constant">ENUM_VALUE1</span><span class="token punctuation">;</span></pre></td></tr><tr><td data-num="3"></td><td><pre></pre></td></tr><tr><td data-num="4"></td><td><pre><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enumValue1 <span class="token operator">==</span> enumValue2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出 "true"</span></pre></td></tr></table></figure><p>以上是 Java 枚举的基本使用方法。</p><script type="text&#x2F;javascript" src="https://unpkg.com/kity@2.0.4/dist/kity.min.js"></script><script type="text&#x2F;javascript" src="https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text&#x2F;javascript" src="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text&#x2F;css" href="https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css">]]></content>
      
      
      <categories>
          
          <category> 计算机科学 </category>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 编程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
